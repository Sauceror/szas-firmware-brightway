
SchoolZoneAlert_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000faa4  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000653  0800fcdc  0800fcdc  00010cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010330  08010330  00011330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010338  08010338  00011338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801033c  0801033c  0001133c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000000  08010340  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006de  20000068  080103a8  00012068  2**2
                  ALLOC
  8 ._user_heap_stack 00000602  20000746  080103a8  00012746  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00012068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027055  00000000  00000000  0001209e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050ea  00000000  00000000  000390f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e08  00000000  00000000  0003e1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001725  00000000  00000000  0003ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007941  00000000  00000000  0004170d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003549d  00000000  00000000  0004904e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167351  00000000  00000000  0007e4eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e583c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000083f8  00000000  00000000  001e5880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000012d  00000000  00000000  001edc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000068 	.word	0x20000068
 8000254:	00000000 	.word	0x00000000
 8000258:	0800fcc4 	.word	0x0800fcc4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000006c 	.word	0x2000006c
 8000274:	0800fcc4 	.word	0x0800fcc4

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4917      	ldr	r1, [pc, #92]	@ (80002dc <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4816      	ldr	r0, [pc, #88]	@ (80002e0 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4815      	ldr	r0, [pc, #84]	@ (80002e4 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4912      	ldr	r1, [pc, #72]	@ (80002dc <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	4913      	ldr	r1, [pc, #76]	@ (80002e8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029c:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029e:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a2:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a4:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a8:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ac:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b0:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b4:	490d      	ldr	r1, [pc, #52]	@ (80002ec <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b6:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ba:	4770      	bx	lr

080002bc <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002bc:	f7ff bffe 	b.w	80002bc <__tx_BadHandler>

080002c0 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c0:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c8:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ca:	f000 f877 	bl	80003bc <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_NMIHandler>

080002d8 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002dc:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e0:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e4:	20000498 	.word	0x20000498
    LDR     r1, =SYSTICK_CYCLES
 80002e8:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a2d      	ldr	r2, [pc, #180]	@ (80003ac <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4824      	ldr	r0, [pc, #144]	@ (80003b0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a25      	ldr	r2, [pc, #148]	@ (80003b4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c1e      	ldr	r4, [pc, #120]	@ (80003b8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c17      	ldr	r4, [pc, #92]	@ (80003b8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b909      	cbnz	r1, 8000396 <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000392:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 8000394:	e7f9      	b.n	800038a <__tx_ts_wait>

08000396 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000396:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 800039a:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800039e:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003a4:	e7d8      	b.n	8000358 <__tx_ts_restore>
 80003a6:	bf00      	nop

080003a8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003a8:	4770      	bx	lr
 80003aa:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003ac:	2000052c 	.word	0x2000052c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003b0:	2000049c 	.word	0x2000049c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003b4:	200004a0 	.word	0x200004a0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003b8:	200005f8 	.word	0x200005f8

080003bc <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003bc:	4922      	ldr	r1, [pc, #136]	@ (8000448 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003be:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003c0:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003c4:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003c6:	4b21      	ldr	r3, [pc, #132]	@ (800044c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003c8:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ca:	b13a      	cbz	r2, 80003dc <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003cc:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003d0:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003d2:	b91a      	cbnz	r2, 80003dc <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000450 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 80003d6:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003da:	6018      	str	r0, [r3, #0]

080003dc <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003dc:	491d      	ldr	r1, [pc, #116]	@ (8000454 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003de:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003e0:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003e2:	b122      	cbz	r2, 80003ee <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000458 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 80003e6:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ea:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003ec:	e008      	b.n	8000400 <__tx_timer_done>

080003ee <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003ee:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003f2:	4b1a      	ldr	r3, [pc, #104]	@ (800045c <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003f4:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003f6:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003f8:	d101      	bne.n	80003fe <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003fa:	4b19      	ldr	r3, [pc, #100]	@ (8000460 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003fc:	6818      	ldr	r0, [r3, #0]

080003fe <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003fe:	6008      	str	r0, [r1, #0]

08000400 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000402:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000404:	b912      	cbnz	r2, 800040c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000406:	4914      	ldr	r1, [pc, #80]	@ (8000458 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000408:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800040a:	b1c8      	cbz	r0, 8000440 <__tx_timer_nothing_expired>

0800040c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800040c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800040e:	4912      	ldr	r1, [pc, #72]	@ (8000458 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000410:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000412:	b108      	cbz	r0, 8000418 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000414:	f00e fa74 	bl	800e900 <_tx_timer_expiration_process>

08000418 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000418:	4b0d      	ldr	r3, [pc, #52]	@ (8000450 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800041a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800041c:	b172      	cbz	r2, 800043c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800041e:	f00e fa1d 	bl	800e85c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000422:	4810      	ldr	r0, [pc, #64]	@ (8000464 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000424:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000426:	b949      	cbnz	r1, 800043c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000428:	480f      	ldr	r0, [pc, #60]	@ (8000468 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800042a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800042c:	4a0f      	ldr	r2, [pc, #60]	@ (800046c <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800042e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000430:	480f      	ldr	r0, [pc, #60]	@ (8000470 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000436:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000438:	d000      	beq.n	800043c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800043a:	6002      	str	r2, [r0, #0]

0800043c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800043c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000440 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000440:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000444:	4770      	bx	lr
 8000446:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000448:	20000530 	.word	0x20000530
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800044c:	200005f8 	.word	0x200005f8
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000450:	20000534 	.word	0x20000534
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000454:	20000540 	.word	0x20000540
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000458:	20000544 	.word	0x20000544
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800045c:	2000053c 	.word	0x2000053c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000460:	20000538 	.word	0x20000538
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000464:	2000052c 	.word	0x2000052c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000468:	2000049c 	.word	0x2000049c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800046c:	200004a0 	.word	0x200004a0
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000470:	e000ed04 	.word	0xe000ed04

08000474 <strlen>:
 8000474:	4603      	mov	r3, r0
 8000476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800047a:	2a00      	cmp	r2, #0
 800047c:	d1fb      	bne.n	8000476 <strlen+0x2>
 800047e:	1a18      	subs	r0, r3, r0
 8000480:	3801      	subs	r0, #1
 8000482:	4770      	bx	lr

08000484 <__aeabi_uldivmod>:
 8000484:	b953      	cbnz	r3, 800049c <__aeabi_uldivmod+0x18>
 8000486:	b94a      	cbnz	r2, 800049c <__aeabi_uldivmod+0x18>
 8000488:	2900      	cmp	r1, #0
 800048a:	bf08      	it	eq
 800048c:	2800      	cmpeq	r0, #0
 800048e:	bf1c      	itt	ne
 8000490:	f04f 31ff 	movne.w	r1, #4294967295
 8000494:	f04f 30ff 	movne.w	r0, #4294967295
 8000498:	f000 b97e 	b.w	8000798 <__aeabi_idiv0>
 800049c:	f1ad 0c08 	sub.w	ip, sp, #8
 80004a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004a4:	f000 f806 	bl	80004b4 <__udivmoddi4>
 80004a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004b0:	b004      	add	sp, #16
 80004b2:	4770      	bx	lr

080004b4 <__udivmoddi4>:
 80004b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004b8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80004ba:	460c      	mov	r4, r1
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d14d      	bne.n	800055c <__udivmoddi4+0xa8>
 80004c0:	428a      	cmp	r2, r1
 80004c2:	460f      	mov	r7, r1
 80004c4:	4684      	mov	ip, r0
 80004c6:	4696      	mov	lr, r2
 80004c8:	fab2 f382 	clz	r3, r2
 80004cc:	d960      	bls.n	8000590 <__udivmoddi4+0xdc>
 80004ce:	b14b      	cbz	r3, 80004e4 <__udivmoddi4+0x30>
 80004d0:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d4:	f1c3 0220 	rsb	r2, r3, #32
 80004d8:	409f      	lsls	r7, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f202 	lsr.w	r2, r0, r2
 80004e2:	4317      	orrs	r7, r2
 80004e4:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80004e8:	fa1f f48e 	uxth.w	r4, lr
 80004ec:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80004f0:	fbb7 f1f6 	udiv	r1, r7, r6
 80004f4:	fb06 7711 	mls	r7, r6, r1, r7
 80004f8:	fb01 f004 	mul.w	r0, r1, r4
 80004fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000500:	4290      	cmp	r0, r2
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x62>
 8000504:	eb1e 0202 	adds.w	r2, lr, r2
 8000508:	f101 37ff 	add.w	r7, r1, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x60>
 800050e:	4290      	cmp	r0, r2
 8000510:	f200 812d 	bhi.w	800076e <__udivmoddi4+0x2ba>
 8000514:	4639      	mov	r1, r7
 8000516:	1a12      	subs	r2, r2, r0
 8000518:	fa1f fc8c 	uxth.w	ip, ip
 800051c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000520:	fb06 2210 	mls	r2, r6, r0, r2
 8000524:	fb00 f404 	mul.w	r4, r0, r4
 8000528:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800052c:	4564      	cmp	r4, ip
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x8e>
 8000530:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000534:	f100 32ff 	add.w	r2, r0, #4294967295
 8000538:	d202      	bcs.n	8000540 <__udivmoddi4+0x8c>
 800053a:	4564      	cmp	r4, ip
 800053c:	f200 811a 	bhi.w	8000774 <__udivmoddi4+0x2c0>
 8000540:	4610      	mov	r0, r2
 8000542:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000546:	ebac 0c04 	sub.w	ip, ip, r4
 800054a:	2100      	movs	r1, #0
 800054c:	b125      	cbz	r5, 8000558 <__udivmoddi4+0xa4>
 800054e:	fa2c f303 	lsr.w	r3, ip, r3
 8000552:	2200      	movs	r2, #0
 8000554:	e9c5 3200 	strd	r3, r2, [r5]
 8000558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800055c:	428b      	cmp	r3, r1
 800055e:	d905      	bls.n	800056c <__udivmoddi4+0xb8>
 8000560:	b10d      	cbz	r5, 8000566 <__udivmoddi4+0xb2>
 8000562:	e9c5 0100 	strd	r0, r1, [r5]
 8000566:	2100      	movs	r1, #0
 8000568:	4608      	mov	r0, r1
 800056a:	e7f5      	b.n	8000558 <__udivmoddi4+0xa4>
 800056c:	fab3 f183 	clz	r1, r3
 8000570:	2900      	cmp	r1, #0
 8000572:	d14d      	bne.n	8000610 <__udivmoddi4+0x15c>
 8000574:	42a3      	cmp	r3, r4
 8000576:	f0c0 80f2 	bcc.w	800075e <__udivmoddi4+0x2aa>
 800057a:	4290      	cmp	r0, r2
 800057c:	f080 80ef 	bcs.w	800075e <__udivmoddi4+0x2aa>
 8000580:	4606      	mov	r6, r0
 8000582:	4623      	mov	r3, r4
 8000584:	4608      	mov	r0, r1
 8000586:	2d00      	cmp	r5, #0
 8000588:	d0e6      	beq.n	8000558 <__udivmoddi4+0xa4>
 800058a:	e9c5 6300 	strd	r6, r3, [r5]
 800058e:	e7e3      	b.n	8000558 <__udivmoddi4+0xa4>
 8000590:	2b00      	cmp	r3, #0
 8000592:	f040 80a2 	bne.w	80006da <__udivmoddi4+0x226>
 8000596:	1a8a      	subs	r2, r1, r2
 8000598:	ea4f 471e 	mov.w	r7, lr, lsr #16
 800059c:	fa1f f68e 	uxth.w	r6, lr
 80005a0:	2101      	movs	r1, #1
 80005a2:	fbb2 f4f7 	udiv	r4, r2, r7
 80005a6:	fb07 2014 	mls	r0, r7, r4, r2
 80005aa:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80005ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80005b2:	fb06 f004 	mul.w	r0, r6, r4
 80005b6:	4290      	cmp	r0, r2
 80005b8:	d90f      	bls.n	80005da <__udivmoddi4+0x126>
 80005ba:	eb1e 0202 	adds.w	r2, lr, r2
 80005be:	f104 38ff 	add.w	r8, r4, #4294967295
 80005c2:	bf2c      	ite	cs
 80005c4:	f04f 0901 	movcs.w	r9, #1
 80005c8:	f04f 0900 	movcc.w	r9, #0
 80005cc:	4290      	cmp	r0, r2
 80005ce:	d903      	bls.n	80005d8 <__udivmoddi4+0x124>
 80005d0:	f1b9 0f00 	cmp.w	r9, #0
 80005d4:	f000 80c8 	beq.w	8000768 <__udivmoddi4+0x2b4>
 80005d8:	4644      	mov	r4, r8
 80005da:	1a12      	subs	r2, r2, r0
 80005dc:	fa1f fc8c 	uxth.w	ip, ip
 80005e0:	fbb2 f0f7 	udiv	r0, r2, r7
 80005e4:	fb07 2210 	mls	r2, r7, r0, r2
 80005e8:	fb00 f606 	mul.w	r6, r0, r6
 80005ec:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80005f0:	4566      	cmp	r6, ip
 80005f2:	d908      	bls.n	8000606 <__udivmoddi4+0x152>
 80005f4:	eb1e 0c0c 	adds.w	ip, lr, ip
 80005f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80005fc:	d202      	bcs.n	8000604 <__udivmoddi4+0x150>
 80005fe:	4566      	cmp	r6, ip
 8000600:	f200 80bb 	bhi.w	800077a <__udivmoddi4+0x2c6>
 8000604:	4610      	mov	r0, r2
 8000606:	ebac 0c06 	sub.w	ip, ip, r6
 800060a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800060e:	e79d      	b.n	800054c <__udivmoddi4+0x98>
 8000610:	f1c1 0620 	rsb	r6, r1, #32
 8000614:	408b      	lsls	r3, r1
 8000616:	fa04 fe01 	lsl.w	lr, r4, r1
 800061a:	fa22 f706 	lsr.w	r7, r2, r6
 800061e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000622:	40f4      	lsrs	r4, r6
 8000624:	408a      	lsls	r2, r1
 8000626:	431f      	orrs	r7, r3
 8000628:	ea4e 030c 	orr.w	r3, lr, ip
 800062c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000630:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000634:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000638:	fa1f fc87 	uxth.w	ip, r7
 800063c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000640:	fb08 4410 	mls	r4, r8, r0, r4
 8000644:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000648:	fb00 f90c 	mul.w	r9, r0, ip
 800064c:	45a1      	cmp	r9, r4
 800064e:	d90e      	bls.n	800066e <__udivmoddi4+0x1ba>
 8000650:	193c      	adds	r4, r7, r4
 8000652:	f100 3aff 	add.w	sl, r0, #4294967295
 8000656:	bf2c      	ite	cs
 8000658:	f04f 0b01 	movcs.w	fp, #1
 800065c:	f04f 0b00 	movcc.w	fp, #0
 8000660:	45a1      	cmp	r9, r4
 8000662:	d903      	bls.n	800066c <__udivmoddi4+0x1b8>
 8000664:	f1bb 0f00 	cmp.w	fp, #0
 8000668:	f000 8093 	beq.w	8000792 <__udivmoddi4+0x2de>
 800066c:	4650      	mov	r0, sl
 800066e:	eba4 0409 	sub.w	r4, r4, r9
 8000672:	fa1f f983 	uxth.w	r9, r3
 8000676:	fbb4 f3f8 	udiv	r3, r4, r8
 800067a:	fb08 4413 	mls	r4, r8, r3, r4
 800067e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000682:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000686:	45a4      	cmp	ip, r4
 8000688:	d906      	bls.n	8000698 <__udivmoddi4+0x1e4>
 800068a:	193c      	adds	r4, r7, r4
 800068c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000690:	d201      	bcs.n	8000696 <__udivmoddi4+0x1e2>
 8000692:	45a4      	cmp	ip, r4
 8000694:	d87a      	bhi.n	800078c <__udivmoddi4+0x2d8>
 8000696:	4643      	mov	r3, r8
 8000698:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800069c:	eba4 040c 	sub.w	r4, r4, ip
 80006a0:	fba0 9802 	umull	r9, r8, r0, r2
 80006a4:	4544      	cmp	r4, r8
 80006a6:	46cc      	mov	ip, r9
 80006a8:	4643      	mov	r3, r8
 80006aa:	d302      	bcc.n	80006b2 <__udivmoddi4+0x1fe>
 80006ac:	d106      	bne.n	80006bc <__udivmoddi4+0x208>
 80006ae:	45ce      	cmp	lr, r9
 80006b0:	d204      	bcs.n	80006bc <__udivmoddi4+0x208>
 80006b2:	3801      	subs	r0, #1
 80006b4:	ebb9 0c02 	subs.w	ip, r9, r2
 80006b8:	eb68 0307 	sbc.w	r3, r8, r7
 80006bc:	b15d      	cbz	r5, 80006d6 <__udivmoddi4+0x222>
 80006be:	ebbe 020c 	subs.w	r2, lr, ip
 80006c2:	eb64 0403 	sbc.w	r4, r4, r3
 80006c6:	fa04 f606 	lsl.w	r6, r4, r6
 80006ca:	fa22 f301 	lsr.w	r3, r2, r1
 80006ce:	40cc      	lsrs	r4, r1
 80006d0:	431e      	orrs	r6, r3
 80006d2:	e9c5 6400 	strd	r6, r4, [r5]
 80006d6:	2100      	movs	r1, #0
 80006d8:	e73e      	b.n	8000558 <__udivmoddi4+0xa4>
 80006da:	fa02 fe03 	lsl.w	lr, r2, r3
 80006de:	f1c3 0120 	rsb	r1, r3, #32
 80006e2:	fa04 f203 	lsl.w	r2, r4, r3
 80006e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80006ea:	40cc      	lsrs	r4, r1
 80006ec:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80006f0:	fa20 f101 	lsr.w	r1, r0, r1
 80006f4:	fa1f f68e 	uxth.w	r6, lr
 80006f8:	fbb4 f0f7 	udiv	r0, r4, r7
 80006fc:	430a      	orrs	r2, r1
 80006fe:	fb07 4410 	mls	r4, r7, r0, r4
 8000702:	0c11      	lsrs	r1, r2, #16
 8000704:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000708:	fb00 f406 	mul.w	r4, r0, r6
 800070c:	428c      	cmp	r4, r1
 800070e:	d90e      	bls.n	800072e <__udivmoddi4+0x27a>
 8000710:	eb1e 0101 	adds.w	r1, lr, r1
 8000714:	f100 38ff 	add.w	r8, r0, #4294967295
 8000718:	bf2c      	ite	cs
 800071a:	f04f 0901 	movcs.w	r9, #1
 800071e:	f04f 0900 	movcc.w	r9, #0
 8000722:	428c      	cmp	r4, r1
 8000724:	d902      	bls.n	800072c <__udivmoddi4+0x278>
 8000726:	f1b9 0f00 	cmp.w	r9, #0
 800072a:	d02c      	beq.n	8000786 <__udivmoddi4+0x2d2>
 800072c:	4640      	mov	r0, r8
 800072e:	1b09      	subs	r1, r1, r4
 8000730:	b292      	uxth	r2, r2
 8000732:	fbb1 f4f7 	udiv	r4, r1, r7
 8000736:	fb07 1114 	mls	r1, r7, r4, r1
 800073a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800073e:	fb04 f106 	mul.w	r1, r4, r6
 8000742:	4291      	cmp	r1, r2
 8000744:	d907      	bls.n	8000756 <__udivmoddi4+0x2a2>
 8000746:	eb1e 0202 	adds.w	r2, lr, r2
 800074a:	f104 38ff 	add.w	r8, r4, #4294967295
 800074e:	d201      	bcs.n	8000754 <__udivmoddi4+0x2a0>
 8000750:	4291      	cmp	r1, r2
 8000752:	d815      	bhi.n	8000780 <__udivmoddi4+0x2cc>
 8000754:	4644      	mov	r4, r8
 8000756:	1a52      	subs	r2, r2, r1
 8000758:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800075c:	e721      	b.n	80005a2 <__udivmoddi4+0xee>
 800075e:	1a86      	subs	r6, r0, r2
 8000760:	eb64 0303 	sbc.w	r3, r4, r3
 8000764:	2001      	movs	r0, #1
 8000766:	e70e      	b.n	8000586 <__udivmoddi4+0xd2>
 8000768:	3c02      	subs	r4, #2
 800076a:	4472      	add	r2, lr
 800076c:	e735      	b.n	80005da <__udivmoddi4+0x126>
 800076e:	3902      	subs	r1, #2
 8000770:	4472      	add	r2, lr
 8000772:	e6d0      	b.n	8000516 <__udivmoddi4+0x62>
 8000774:	44f4      	add	ip, lr
 8000776:	3802      	subs	r0, #2
 8000778:	e6e3      	b.n	8000542 <__udivmoddi4+0x8e>
 800077a:	44f4      	add	ip, lr
 800077c:	3802      	subs	r0, #2
 800077e:	e742      	b.n	8000606 <__udivmoddi4+0x152>
 8000780:	3c02      	subs	r4, #2
 8000782:	4472      	add	r2, lr
 8000784:	e7e7      	b.n	8000756 <__udivmoddi4+0x2a2>
 8000786:	3802      	subs	r0, #2
 8000788:	4471      	add	r1, lr
 800078a:	e7d0      	b.n	800072e <__udivmoddi4+0x27a>
 800078c:	3b02      	subs	r3, #2
 800078e:	443c      	add	r4, r7
 8000790:	e782      	b.n	8000698 <__udivmoddi4+0x1e4>
 8000792:	3802      	subs	r0, #2
 8000794:	443c      	add	r4, r7
 8000796:	e76a      	b.n	800066e <__udivmoddi4+0x1ba>

08000798 <__aeabi_idiv0>:
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop

0800079c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007a0:	4b1e      	ldr	r3, [pc, #120]	@ (800081c <MX_ADC1_Init+0x80>)
 80007a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000820 <MX_ADC1_Init+0x84>)
 80007a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007a6:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <MX_ADC1_Init+0x80>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <MX_ADC1_Init+0x80>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_ADC1_Init+0x80>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b8:	4b18      	ldr	r3, [pc, #96]	@ (800081c <MX_ADC1_Init+0x80>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007be:	4b17      	ldr	r3, [pc, #92]	@ (800081c <MX_ADC1_Init+0x80>)
 80007c0:	2204      	movs	r2, #4
 80007c2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007c4:	4b15      	ldr	r3, [pc, #84]	@ (800081c <MX_ADC1_Init+0x80>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_ADC1_Init+0x80>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 80007d2:	4b12      	ldr	r3, [pc, #72]	@ (800081c <MX_ADC1_Init+0x80>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007d8:	4b10      	ldr	r3, [pc, #64]	@ (800081c <MX_ADC1_Init+0x80>)
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007e0:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_ADC1_Init+0x80>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <MX_ADC1_Init+0x80>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <MX_ADC1_Init+0x80>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_ADC1_Init+0x80>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <MX_ADC1_Init+0x80>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_ADC1_Init+0x80>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	@ (800081c <MX_ADC1_Init+0x80>)
 800080a:	f001 fa5b 	bl	8001cc4 <HAL_ADC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000814:	f000 fbe6 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000084 	.word	0x20000084
 8000820:	42028000 	.word	0x42028000

08000824 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b0ba      	sub	sp, #232	@ 0xe8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	22c0      	movs	r2, #192	@ 0xc0
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f00e fbbb 	bl	800efc0 <memset>
  if(adcHandle->Instance==ADC1)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a24      	ldr	r2, [pc, #144]	@ (80008e0 <HAL_ADC_MspInit+0xbc>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d140      	bne.n	80008d6 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000854:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000858:	f04f 0300 	mov.w	r3, #0
 800085c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000860:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000864:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4618      	mov	r0, r3
 800086e:	f007 f93b 	bl	8007ae8 <HAL_RCCEx_PeriphCLKConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000878:	f000 fbb4 	bl	8000fe4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800087c:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <HAL_ADC_MspInit+0xc0>)
 800087e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000882:	4a18      	ldr	r2, [pc, #96]	@ (80008e4 <HAL_ADC_MspInit+0xc0>)
 8000884:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000888:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <HAL_ADC_MspInit+0xc0>)
 800088e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <HAL_ADC_MspInit+0xc0>)
 800089c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008a0:	4a10      	ldr	r2, [pc, #64]	@ (80008e4 <HAL_ADC_MspInit+0xc0>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <HAL_ADC_MspInit+0xc0>)
 80008ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008b8:	2301      	movs	r3, #1
 80008ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008be:	2303      	movs	r3, #3
 80008c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <HAL_ADC_MspInit+0xc4>)
 80008d2:	f003 fc5b 	bl	800418c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008d6:	bf00      	nop
 80008d8:	37e8      	adds	r7, #232	@ 0xe8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	42028000 	.word	0x42028000
 80008e4:	46020c00 	.word	0x46020c00
 80008e8:	42020000 	.word	0x42020000

080008ec <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <MX_CRC_Init+0x3c>)
 80008f2:	4a0e      	ldr	r2, [pc, #56]	@ (800092c <MX_CRC_Init+0x40>)
 80008f4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <MX_CRC_Init+0x3c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <MX_CRC_Init+0x3c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <MX_CRC_Init+0x3c>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000908:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <MX_CRC_Init+0x3c>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <MX_CRC_Init+0x3c>)
 8000910:	2201      	movs	r2, #1
 8000912:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	@ (8000928 <MX_CRC_Init+0x3c>)
 8000916:	f002 fc19 	bl	800314c <HAL_CRC_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000920:	f000 fb60 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000110 	.word	0x20000110
 800092c:	40023000 	.word	0x40023000

08000930 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a0b      	ldr	r2, [pc, #44]	@ (800096c <HAL_CRC_MspInit+0x3c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d10e      	bne.n	8000960 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <HAL_CRC_MspInit+0x40>)
 8000944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000948:	4a09      	ldr	r2, [pc, #36]	@ (8000970 <HAL_CRC_MspInit+0x40>)
 800094a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800094e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000952:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <HAL_CRC_MspInit+0x40>)
 8000954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000958:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	40023000 	.word	0x40023000
 8000970:	46020c00 	.word	0x46020c00

08000974 <EC25_SendCommand>:
#include "string.h"
#include "stdio.h"

// Sends a command to EC25 via USART2
static void EC25_SendCommand(const char *cmd)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b0a2      	sub	sp, #136	@ 0x88
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
    char buffer[128];
    snprintf(buffer, sizeof(buffer), "%s\r\n", cmd);
 800097c:	f107 0008 	add.w	r0, r7, #8
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a0d      	ldr	r2, [pc, #52]	@ (80009b8 <EC25_SendCommand+0x44>)
 8000984:	2180      	movs	r1, #128	@ 0x80
 8000986:	f00e f9f5 	bl	800ed74 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fd70 	bl	8000474 <strlen>
 8000994:	4603      	mov	r3, r0
 8000996:	b29a      	uxth	r2, r3
 8000998:	f107 0108 	add.w	r1, r7, #8
 800099c:	f04f 33ff 	mov.w	r3, #4294967295
 80009a0:	4806      	ldr	r0, [pc, #24]	@ (80009bc <EC25_SendCommand+0x48>)
 80009a2:	f00c faaf 	bl	800cf04 <HAL_UART_Transmit>
    HAL_Delay(500);  // Give modem time to respond
 80009a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009aa:	f001 f82f 	bl	8001a0c <HAL_Delay>
}
 80009ae:	bf00      	nop
 80009b0:	3788      	adds	r7, #136	@ 0x88
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	0800fcdc 	.word	0x0800fcdc
 80009bc:	20000400 	.word	0x20000400

080009c0 <Init_EC25>:

void Init_EC25(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
    EC25_SendCommand("AT");
 80009c4:	480b      	ldr	r0, [pc, #44]	@ (80009f4 <Init_EC25+0x34>)
 80009c6:	f7ff ffd5 	bl	8000974 <EC25_SendCommand>
    EC25_SendCommand("ATE0");         // Echo off
 80009ca:	480b      	ldr	r0, [pc, #44]	@ (80009f8 <Init_EC25+0x38>)
 80009cc:	f7ff ffd2 	bl	8000974 <EC25_SendCommand>
    EC25_SendCommand("AT+CPIN?");     // Check SIM (optional, safe to leave)
 80009d0:	480a      	ldr	r0, [pc, #40]	@ (80009fc <Init_EC25+0x3c>)
 80009d2:	f7ff ffcf 	bl	8000974 <EC25_SendCommand>
    EC25_SendCommand("AT+QCFG=\"usbnet\",1");  // Set ECM mode if needed (only once)
 80009d6:	480a      	ldr	r0, [pc, #40]	@ (8000a00 <Init_EC25+0x40>)
 80009d8:	f7ff ffcc 	bl	8000974 <EC25_SendCommand>
    EC25_SendCommand("AT+QIDNSGIP=\"google.com\""); // DNS test (optional)
 80009dc:	4809      	ldr	r0, [pc, #36]	@ (8000a04 <Init_EC25+0x44>)
 80009de:	f7ff ffc9 	bl	8000974 <EC25_SendCommand>

    HAL_UART_Transmit(&huart1, (uint8_t *)"[EC25] Modem init done.\r\n", 25, HAL_MAX_DELAY);
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	2219      	movs	r2, #25
 80009e8:	4907      	ldr	r1, [pc, #28]	@ (8000a08 <Init_EC25+0x48>)
 80009ea:	4808      	ldr	r0, [pc, #32]	@ (8000a0c <Init_EC25+0x4c>)
 80009ec:	f00c fa8a 	bl	800cf04 <HAL_UART_Transmit>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	0800fce4 	.word	0x0800fce4
 80009f8:	0800fce8 	.word	0x0800fce8
 80009fc:	0800fcf0 	.word	0x0800fcf0
 8000a00:	0800fcfc 	.word	0x0800fcfc
 8000a04:	0800fd10 	.word	0x0800fd10
 8000a08:	0800fd2c 	.word	0x0800fd2c
 8000a0c:	2000036c 	.word	0x2000036c

08000a10 <Send_UDP_Trigger>:

void Send_UDP_Trigger(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
    EC25_SendCommand("AT+QIOPEN=1,0,\"UDP\",\"192.168.0.10\",10010,10010,0");
 8000a14:	480c      	ldr	r0, [pc, #48]	@ (8000a48 <Send_UDP_Trigger+0x38>)
 8000a16:	f7ff ffad 	bl	8000974 <EC25_SendCommand>
    HAL_Delay(1000); // Wait for connection to establish
 8000a1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a1e:	f000 fff5 	bl	8001a0c <HAL_Delay>

    EC25_SendCommand("AT+QISEND=0,7");  // Send 7-byte payload
 8000a22:	480a      	ldr	r0, [pc, #40]	@ (8000a4c <Send_UDP_Trigger+0x3c>)
 8000a24:	f7ff ffa6 	bl	8000974 <EC25_SendCommand>
    HAL_UART_Transmit(&huart2, (uint8_t *)"TRIGGER\r\n", 9, HAL_MAX_DELAY);
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2c:	2209      	movs	r2, #9
 8000a2e:	4908      	ldr	r1, [pc, #32]	@ (8000a50 <Send_UDP_Trigger+0x40>)
 8000a30:	4808      	ldr	r0, [pc, #32]	@ (8000a54 <Send_UDP_Trigger+0x44>)
 8000a32:	f00c fa67 	bl	800cf04 <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart1, (uint8_t *)"[EC25] Trigger sent over UDP.\r\n", 31, HAL_MAX_DELAY);
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3a:	221f      	movs	r2, #31
 8000a3c:	4906      	ldr	r1, [pc, #24]	@ (8000a58 <Send_UDP_Trigger+0x48>)
 8000a3e:	4807      	ldr	r0, [pc, #28]	@ (8000a5c <Send_UDP_Trigger+0x4c>)
 8000a40:	f00c fa60 	bl	800cf04 <HAL_UART_Transmit>
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	0800fd48 	.word	0x0800fd48
 8000a4c:	0800fd7c 	.word	0x0800fd7c
 8000a50:	0800fd8c 	.word	0x0800fd8c
 8000a54:	20000400 	.word	0x20000400
 8000a58:	0800fd98 	.word	0x0800fd98
 8000a5c:	2000036c 	.word	0x2000036c

08000a60 <MX_GPDMA1_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel1;
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000a66:	4b46      	ldr	r3, [pc, #280]	@ (8000b80 <MX_GPDMA1_Init+0x120>)
 8000a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a6c:	4a44      	ldr	r2, [pc, #272]	@ (8000b80 <MX_GPDMA1_Init+0x120>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000a76:	4b42      	ldr	r3, [pc, #264]	@ (8000b80 <MX_GPDMA1_Init+0x120>)
 8000a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8000a84:	4b3f      	ldr	r3, [pc, #252]	@ (8000b84 <MX_GPDMA1_Init+0x124>)
 8000a86:	4a40      	ldr	r2, [pc, #256]	@ (8000b88 <MX_GPDMA1_Init+0x128>)
 8000a88:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel1.Init.Request = DMA_REQUEST_SW;
 8000a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b84 <MX_GPDMA1_Init+0x124>)
 8000a8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a90:	605a      	str	r2, [r3, #4]
  handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000a92:	4b3c      	ldr	r3, [pc, #240]	@ (8000b84 <MX_GPDMA1_Init+0x124>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000a98:	4b3a      	ldr	r3, [pc, #232]	@ (8000b84 <MX_GPDMA1_Init+0x124>)
 8000a9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a9e:	60da      	str	r2, [r3, #12]
  handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_FIXED;
 8000aa0:	4b38      	ldr	r3, [pc, #224]	@ (8000b84 <MX_GPDMA1_Init+0x124>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 8000aa6:	4b37      	ldr	r3, [pc, #220]	@ (8000b84 <MX_GPDMA1_Init+0x124>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000aac:	4b35      	ldr	r3, [pc, #212]	@ (8000b84 <MX_GPDMA1_Init+0x124>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000ab2:	4b34      	ldr	r3, [pc, #208]	@ (8000b84 <MX_GPDMA1_Init+0x124>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
  handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000ab8:	4b32      	ldr	r3, [pc, #200]	@ (8000b84 <MX_GPDMA1_Init+0x124>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 8000abe:	4b31      	ldr	r3, [pc, #196]	@ (8000b84 <MX_GPDMA1_Init+0x124>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	625a      	str	r2, [r3, #36]	@ 0x24
  handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 8000ac4:	4b2f      	ldr	r3, [pc, #188]	@ (8000b84 <MX_GPDMA1_Init+0x124>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	629a      	str	r2, [r3, #40]	@ 0x28
  handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000aca:	4b2e      	ldr	r3, [pc, #184]	@ (8000b84 <MX_GPDMA1_Init+0x124>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	62da      	str	r2, [r3, #44]	@ 0x2c
  handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b84 <MX_GPDMA1_Init+0x124>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	631a      	str	r2, [r3, #48]	@ 0x30
  handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b84 <MX_GPDMA1_Init+0x124>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8000adc:	4829      	ldr	r0, [pc, #164]	@ (8000b84 <MX_GPDMA1_Init+0x124>)
 8000ade:	f002 fc93 	bl	8003408 <HAL_DMA_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_GPDMA1_Init+0x8c>
  {
    Error_Handler();
 8000ae8:	f000 fa7c 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000aec:	2110      	movs	r1, #16
 8000aee:	4825      	ldr	r0, [pc, #148]	@ (8000b84 <MX_GPDMA1_Init+0x124>)
 8000af0:	f003 f874 	bl	8003bdc <HAL_DMA_ConfigChannelAttributes>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_GPDMA1_Init+0x9e>
  {
    Error_Handler();
 8000afa:	f000 fa73 	bl	8000fe4 <Error_Handler>
  }
  handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8000afe:	4b23      	ldr	r3, [pc, #140]	@ (8000b8c <MX_GPDMA1_Init+0x12c>)
 8000b00:	4a23      	ldr	r2, [pc, #140]	@ (8000b90 <MX_GPDMA1_Init+0x130>)
 8000b02:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel0.Init.Request = DMA_REQUEST_SW;
 8000b04:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <MX_GPDMA1_Init+0x12c>)
 8000b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b0a:	605a      	str	r2, [r3, #4]
  handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b8c <MX_GPDMA1_Init+0x12c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000b12:	4b1e      	ldr	r3, [pc, #120]	@ (8000b8c <MX_GPDMA1_Init+0x12c>)
 8000b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b18:	60da      	str	r2, [r3, #12]
  handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <MX_GPDMA1_Init+0x12c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <MX_GPDMA1_Init+0x12c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
  handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000b26:	4b19      	ldr	r3, [pc, #100]	@ (8000b8c <MX_GPDMA1_Init+0x12c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <MX_GPDMA1_Init+0x12c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000b32:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <MX_GPDMA1_Init+0x12c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8000b38:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <MX_GPDMA1_Init+0x12c>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <MX_GPDMA1_Init+0x12c>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	629a      	str	r2, [r3, #40]	@ 0x28
  handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000b44:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <MX_GPDMA1_Init+0x12c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	62da      	str	r2, [r3, #44]	@ 0x2c
  handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <MX_GPDMA1_Init+0x12c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8000b50:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <MX_GPDMA1_Init+0x12c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8000b56:	480d      	ldr	r0, [pc, #52]	@ (8000b8c <MX_GPDMA1_Init+0x12c>)
 8000b58:	f002 fc56 	bl	8003408 <HAL_DMA_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_GPDMA1_Init+0x106>
  {
    Error_Handler();
 8000b62:	f000 fa3f 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000b66:	2110      	movs	r1, #16
 8000b68:	4808      	ldr	r0, [pc, #32]	@ (8000b8c <MX_GPDMA1_Init+0x12c>)
 8000b6a:	f003 f837 	bl	8003bdc <HAL_DMA_ConfigChannelAttributes>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_GPDMA1_Init+0x118>
  {
    Error_Handler();
 8000b74:	f000 fa36 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	46020c00 	.word	0x46020c00
 8000b84:	20000134 	.word	0x20000134
 8000b88:	400200d0 	.word	0x400200d0
 8000b8c:	200001ac 	.word	0x200001ac
 8000b90:	40020050 	.word	0x40020050

08000b94 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <MX_GPIO_Init+0xa0>)
 8000bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bb0:	4a20      	ldr	r2, [pc, #128]	@ (8000c34 <MX_GPIO_Init+0xa0>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bba:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <MX_GPIO_Init+0xa0>)
 8000bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <MX_GPIO_Init+0xa0>)
 8000bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bce:	4a19      	ldr	r2, [pc, #100]	@ (8000c34 <MX_GPIO_Init+0xa0>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bd8:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <MX_GPIO_Init+0xa0>)
 8000bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be6:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <MX_GPIO_Init+0xa0>)
 8000be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bec:	4a11      	ldr	r2, [pc, #68]	@ (8000c34 <MX_GPIO_Init+0xa0>)
 8000bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bf2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <MX_GPIO_Init+0xa0>)
 8000bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2101      	movs	r1, #1
 8000c08:	480b      	ldr	r0, [pc, #44]	@ (8000c38 <MX_GPIO_Init+0xa4>)
 8000c0a:	f003 feef 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	4619      	mov	r1, r3
 8000c24:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <MX_GPIO_Init+0xa4>)
 8000c26:	f003 fab1 	bl	800418c <HAL_GPIO_Init>

}
 8000c2a:	bf00      	nop
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	46020c00 	.word	0x46020c00
 8000c38:	42020400 	.word	0x42020400

08000c3c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c42:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb4 <MX_I2C1_Init+0x78>)
 8000c44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c48:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb8 <MX_I2C1_Init+0x7c>)
 8000c4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c58:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c76:	480e      	ldr	r0, [pc, #56]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c78:	f003 fee4 	bl	8004a44 <HAL_I2C_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c82:	f000 f9af 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c86:	2100      	movs	r1, #0
 8000c88:	4809      	ldr	r0, [pc, #36]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c8a:	f004 fe35 	bl	80058f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c94:	f000 f9a6 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c9c:	f004 febe 	bl	8005a1c <HAL_I2CEx_ConfigDigitalFilter>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ca6:	f000 f99d 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000224 	.word	0x20000224
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	00303d5b 	.word	0x00303d5b

08000cbc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0ba      	sub	sp, #232	@ 0xe8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	22c0      	movs	r2, #192	@ 0xc0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f00e f96f 	bl	800efc0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8000da4 <HAL_I2C_MspInit+0xe8>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d156      	bne.n	8000d9a <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cec:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000cf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cfc:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	4618      	mov	r0, r3
 8000d04:	f006 fef0 	bl	8007ae8 <HAL_RCCEx_PeriphCLKConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000d0e:	f000 f969 	bl	8000fe4 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d12:	4b25      	ldr	r3, [pc, #148]	@ (8000da8 <HAL_I2C_MspInit+0xec>)
 8000d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d18:	4a23      	ldr	r2, [pc, #140]	@ (8000da8 <HAL_I2C_MspInit+0xec>)
 8000d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d1e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d22:	4b21      	ldr	r3, [pc, #132]	@ (8000da8 <HAL_I2C_MspInit+0xec>)
 8000d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000d30:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d38:	2312      	movs	r3, #18
 8000d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d54:	4619      	mov	r1, r3
 8000d56:	4815      	ldr	r0, [pc, #84]	@ (8000dac <HAL_I2C_MspInit+0xf0>)
 8000d58:	f003 fa18 	bl	800418c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <HAL_I2C_MspInit+0xec>)
 8000d5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d62:	4a11      	ldr	r2, [pc, #68]	@ (8000da8 <HAL_I2C_MspInit+0xec>)
 8000d64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d68:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <HAL_I2C_MspInit+0xec>)
 8000d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2037      	movs	r0, #55	@ 0x37
 8000d80:	f002 f938 	bl	8002ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d84:	2037      	movs	r0, #55	@ 0x37
 8000d86:	f002 f95f 	bl	8003048 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2038      	movs	r0, #56	@ 0x38
 8000d90:	f002 f930 	bl	8002ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d94:	2038      	movs	r0, #56	@ 0x38
 8000d96:	f002 f957 	bl	8003048 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	37e8      	adds	r7, #232	@ 0xe8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40005400 	.word	0x40005400
 8000da8:	46020c00 	.word	0x46020c00
 8000dac:	42021800 	.word	0x42021800

08000db0 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000db4:	2000      	movs	r0, #0
 8000db6:	f004 fec1 	bl	8005b3c <HAL_ICACHE_ConfigAssociativityMode>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000dc0:	f000 f910 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000dc4:	f004 fee4 	bl	8005b90 <HAL_ICACHE_Enable>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000dce:	f000 f909 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Redirect printf to USART1 */
int _write(int file, char *ptr, int len)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	4804      	ldr	r0, [pc, #16]	@ (8000e00 <_write+0x28>)
 8000df0:	f00c f888 	bl	800cf04 <HAL_UART_Transmit>
  return len;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000036c 	.word	0x2000036c

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b5b0      	push	{r4, r5, r7, lr}
 8000e06:	b08c      	sub	sp, #48	@ 0x30
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0a:	f000 fdaf 	bl	800196c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000e0e:	f000 f8c8 	bl	8000fa2 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000e12:	f000 f87f 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e16:	f7ff febd 	bl	8000b94 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000e1a:	f7ff fe21 	bl	8000a60 <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8000e1e:	f000 fc1d 	bl	800165c <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000e22:	f7ff fd63 	bl	80008ec <MX_CRC_Init>
  MX_I2C1_Init();
 8000e26:	f7ff ff09 	bl	8000c3c <MX_I2C1_Init>
  MX_TIM16_Init();
 8000e2a:	f000 fa87 	bl	800133c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000e2e:	f000 faff 	bl	8001430 <MX_TIM17_Init>
  MX_ICACHE_Init();
 8000e32:	f7ff ffbd 	bl	8000db0 <MX_ICACHE_Init>
  MX_ADC1_Init();
 8000e36:	f7ff fcb1 	bl	800079c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000e3a:	f000 fc5b 	bl	80016f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);  // COM port init delay for USB VCP
 8000e3e:	2064      	movs	r0, #100	@ 0x64
 8000e40:	f000 fde4 	bl	8001a0c <HAL_Delay>

  printf("✅ System initialised.\r\n");
 8000e44:	482a      	ldr	r0, [pc, #168]	@ (8000ef0 <main+0xec>)
 8000e46:	f00d ff8d 	bl	800ed64 <puts>


  printf("🌐 Network stack initialised.\r\n");
 8000e4a:	482a      	ldr	r0, [pc, #168]	@ (8000ef4 <main+0xf0>)
 8000e4c:	f00d ff8a 	bl	800ed64 <puts>

  char debug_msg[] = "USART test message BEFORE ThreadX start\r\n";
 8000e50:	4b29      	ldr	r3, [pc, #164]	@ (8000ef8 <main+0xf4>)
 8000e52:	1d3c      	adds	r4, r7, #4
 8000e54:	461d      	mov	r5, r3
 8000e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e62:	c403      	stmia	r4!, {r0, r1}
 8000e64:	8022      	strh	r2, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)debug_msg, sizeof(debug_msg) - 1, HAL_MAX_DELAY);
 8000e66:	1d39      	adds	r1, r7, #4
 8000e68:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6c:	2229      	movs	r2, #41	@ 0x29
 8000e6e:	4823      	ldr	r0, [pc, #140]	@ (8000efc <main+0xf8>)
 8000e70:	f00c f848 	bl	800cf04 <HAL_UART_Transmit>

  HAL_Delay(100);
 8000e74:	2064      	movs	r0, #100	@ 0x64
 8000e76:	f000 fdc9 	bl	8001a0c <HAL_Delay>

  // Now start ThreadX
  //MX_ThreadX_Init();

  Init_EC25();            // Custom function to send AT+CFUN, AT+CGDCONT, etc.
 8000e7a:	f7ff fda1 	bl	80009c0 <Init_EC25>
  Send_UDP_Trigger();
 8000e7e:	f7ff fdc7 	bl	8000a10 <Send_UDP_Trigger>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_ADC_Start(&hadc1);
 8000e82:	481f      	ldr	r0, [pc, #124]	@ (8000f00 <main+0xfc>)
 8000e84:	f001 fdb0 	bl	80029e8 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	481c      	ldr	r0, [pc, #112]	@ (8000f00 <main+0xfc>)
 8000e8e:	f001 fe3f 	bl	8002b10 <HAL_ADC_PollForConversion>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d127      	bne.n	8000ee8 <main+0xe4>
    {
      adc_raw_value = HAL_ADC_GetValue(&hadc1);
 8000e98:	4819      	ldr	r0, [pc, #100]	@ (8000f00 <main+0xfc>)
 8000e9a:	f001 ff3f 	bl	8002d1c <HAL_ADC_GetValue>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4a18      	ldr	r2, [pc, #96]	@ (8000f04 <main+0x100>)
 8000ea2:	6013      	str	r3, [r2, #0]
      uint8_t current_adc_state = (adc_raw_value > ADC_THRESHOLD) ? 1 : 0;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <main+0x100>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000eac:	4293      	cmp	r3, r2
 8000eae:	bf8c      	ite	hi
 8000eb0:	2301      	movhi	r3, #1
 8000eb2:	2300      	movls	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

      if (last_adc_state == 1 && current_adc_state == 0)
 8000eba:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <main+0x104>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d10e      	bne.n	8000ee0 <main+0xdc>
 8000ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10a      	bne.n	8000ee0 <main+0xdc>
      {
        high_to_low_counter++;
 8000eca:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <main+0x108>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	@ (8000f0c <main+0x108>)
 8000ed2:	6013      	str	r3, [r2, #0]
        printf("⚠️ HIGH to LOW transition! Count = %lu\r\n", high_to_low_counter);
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <main+0x108>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480d      	ldr	r0, [pc, #52]	@ (8000f10 <main+0x10c>)
 8000edc:	f00d feda 	bl	800ec94 <iprintf>
      }

      last_adc_state = current_adc_state;
 8000ee0:	4a09      	ldr	r2, [pc, #36]	@ (8000f08 <main+0x104>)
 8000ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ee6:	7013      	strb	r3, [r2, #0]
    }

    HAL_Delay(200);  // Tune based on expected signal frequency
 8000ee8:	20c8      	movs	r0, #200	@ 0xc8
 8000eea:	f000 fd8f 	bl	8001a0c <HAL_Delay>
    HAL_ADC_Start(&hadc1);
 8000eee:	e7c8      	b.n	8000e82 <main+0x7e>
 8000ef0:	0800fdb8 	.word	0x0800fdb8
 8000ef4:	0800fdd4 	.word	0x0800fdd4
 8000ef8:	0800fe28 	.word	0x0800fe28
 8000efc:	2000036c 	.word	0x2000036c
 8000f00:	20000084 	.word	0x20000084
 8000f04:	20000278 	.word	0x20000278
 8000f08:	20000280 	.word	0x20000280
 8000f0c:	2000027c 	.word	0x2000027c
 8000f10:	0800fdf8 	.word	0x0800fdf8

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b09e      	sub	sp, #120	@ 0x78
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0318 	add.w	r3, r7, #24
 8000f1e:	2260      	movs	r2, #96	@ 0x60
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00e f84c 	bl	800efc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
 8000f36:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f004 fe39 	bl	8005bb0 <HAL_PWREx_ControlVoltageScaling>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f44:	f000 f84e 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f52:	2310      	movs	r3, #16
 8000f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5a:	f107 0318 	add.w	r3, r7, #24
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f004 ff40 	bl	8005de4 <HAL_RCC_OscConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000f6a:	f000 f83b 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6e:	231f      	movs	r3, #31
 8000f70:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f72:	2301      	movs	r3, #1
 8000f74:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f86:	463b      	mov	r3, r7
 8000f88:	2101      	movs	r1, #1
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f006 f846 	bl	800701c <HAL_RCC_ClockConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000f96:	f000 f825 	bl	8000fe4 <Error_Handler>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3778      	adds	r7, #120	@ 0x78
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000fa6:	f004 fefd 	bl	8005da4 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000faa:	2002      	movs	r0, #2
 8000fac:	f004 fea0 	bl	8005cf0 <HAL_PWREx_ConfigSupply>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000fb6:	f000 f815 	bl	8000fe4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d101      	bne.n	8000fd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fd2:	f000 fcfb 	bl	80019cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40001000 	.word	0x40001000

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <Error_Handler+0x8>

08000ff0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <HAL_MspInit+0x34>)
 8001010:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001014:	4a09      	ldr	r2, [pc, #36]	@ (800103c <HAL_MspInit+0x34>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800101e:	4b07      	ldr	r3, [pc, #28]	@ (800103c <HAL_MspInit+0x34>)
 8001020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800102c:	f004 feba 	bl	8005da4 <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_EnableVddA();
 8001030:	f004 fec8 	bl	8005dc4 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	46020c00 	.word	0x46020c00

08001040 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	@ 0x38
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001050:	4b2e      	ldr	r3, [pc, #184]	@ (800110c <HAL_InitTick+0xcc>)
 8001052:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001056:	4a2d      	ldr	r2, [pc, #180]	@ (800110c <HAL_InitTick+0xcc>)
 8001058:	f043 0310 	orr.w	r3, r3, #16
 800105c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001060:	4b2a      	ldr	r3, [pc, #168]	@ (800110c <HAL_InitTick+0xcc>)
 8001062:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001066:	f003 0310 	and.w	r3, r3, #16
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800106e:	f107 0210 	add.w	r2, r7, #16
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f006 fc67 	bl	800794c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800107e:	f006 fc29 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 8001082:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001086:	4a22      	ldr	r2, [pc, #136]	@ (8001110 <HAL_InitTick+0xd0>)
 8001088:	fba2 2303 	umull	r2, r3, r2, r3
 800108c:	0c9b      	lsrs	r3, r3, #18
 800108e:	3b01      	subs	r3, #1
 8001090:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001092:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <HAL_InitTick+0xd4>)
 8001094:	4a20      	ldr	r2, [pc, #128]	@ (8001118 <HAL_InitTick+0xd8>)
 8001096:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001098:	4b1e      	ldr	r3, [pc, #120]	@ (8001114 <HAL_InitTick+0xd4>)
 800109a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800109e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001114 <HAL_InitTick+0xd4>)
 80010a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001114 <HAL_InitTick+0xd4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ac:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <HAL_InitTick+0xd4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80010b2:	4818      	ldr	r0, [pc, #96]	@ (8001114 <HAL_InitTick+0xd4>)
 80010b4:	f009 fdec 	bl	800ac90 <HAL_TIM_Base_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80010be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d118      	bne.n	80010f8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010c6:	4813      	ldr	r0, [pc, #76]	@ (8001114 <HAL_InitTick+0xd4>)
 80010c8:	f009 ff76 	bl	800afb8 <HAL_TIM_Base_Start_IT>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80010d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10e      	bne.n	80010f8 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d808      	bhi.n	80010f2 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	2031      	movs	r0, #49	@ 0x31
 80010e6:	f001 ff85 	bl	8002ff4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ea:	4a0c      	ldr	r2, [pc, #48]	@ (800111c <HAL_InitTick+0xdc>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e002      	b.n	80010f8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80010f8:	2031      	movs	r0, #49	@ 0x31
 80010fa:	f001 ffa5 	bl	8003048 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80010fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001102:	4618      	mov	r0, r3
 8001104:	3738      	adds	r7, #56	@ 0x38
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	46020c00 	.word	0x46020c00
 8001110:	431bde83 	.word	0x431bde83
 8001114:	20000284 	.word	0x20000284
 8001118:	40001000 	.word	0x40001000
 800111c:	20000004 	.word	0x20000004

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <NMI_Handler+0x4>

08001128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <MemManage_Handler+0x4>

08001138 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <UsageFault_Handler+0x4>

08001148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <TIM6_IRQHandler+0x10>)
 800115e:	f00a f9eb 	bl	800b538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000284 	.word	0x20000284

0800116c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <I2C1_EV_IRQHandler+0x10>)
 8001172:	f003 fdb1 	bl	8004cd8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000224 	.word	0x20000224

08001180 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <I2C1_ER_IRQHandler+0x10>)
 8001186:	f003 fdc1 	bl	8004d0c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000224 	.word	0x20000224

08001194 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <USART1_IRQHandler+0x10>)
 800119a:	f00b ff51 	bl	800d040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000036c 	.word	0x2000036c

080011a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <USART2_IRQHandler+0x10>)
 80011ae:	f00b ff47 	bl	800d040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000400 	.word	0x20000400

080011bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	e00a      	b.n	80011e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011ce:	f3af 8000 	nop.w
 80011d2:	4601      	mov	r1, r0
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	60ba      	str	r2, [r7, #8]
 80011da:	b2ca      	uxtb	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	3301      	adds	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dbf0      	blt.n	80011ce <_read+0x12>
  }

  return len;
 80011ec:	687b      	ldr	r3, [r7, #4]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800121e:	605a      	str	r2, [r3, #4]
  return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <_isatty>:

int _isatty(int file)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001268:	4a14      	ldr	r2, [pc, #80]	@ (80012bc <_sbrk+0x5c>)
 800126a:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <_sbrk+0x60>)
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <_sbrk+0x64>)
 800127e:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <_sbrk+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001282:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	d207      	bcs.n	80012a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001290:	f00d fef4 	bl	800f07c <__errno>
 8001294:	4603      	mov	r3, r0
 8001296:	220c      	movs	r2, #12
 8001298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e009      	b.n	80012b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a0:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a6:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a05      	ldr	r2, [pc, #20]	@ (80012c4 <_sbrk+0x64>)
 80012b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200c0000 	.word	0x200c0000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	200002d0 	.word	0x200002d0
 80012c8:	20000748 	.word	0x20000748

080012cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012d0:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <SystemInit+0x68>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012d6:	4a17      	ldr	r2, [pc, #92]	@ (8001334 <SystemInit+0x68>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80012e0:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <SystemInit+0x6c>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80012e6:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <SystemInit+0x6c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <SystemInit+0x6c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <SystemInit+0x6c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <SystemInit+0x6c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001338 <SystemInit+0x6c>)
 80012fe:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001302:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001306:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001308:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <SystemInit+0x6c>)
 800130a:	2200      	movs	r2, #0
 800130c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800130e:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <SystemInit+0x6c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a09      	ldr	r2, [pc, #36]	@ (8001338 <SystemInit+0x6c>)
 8001314:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001318:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800131a:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <SystemInit+0x6c>)
 800131c:	2200      	movs	r2, #0
 800131e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001320:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <SystemInit+0x68>)
 8001322:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001326:	609a      	str	r2, [r3, #8]
  #endif
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00
 8001338:	46020c00 	.word	0x46020c00

0800133c <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b094      	sub	sp, #80	@ 0x50
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001342:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001356:	463b      	mov	r3, r7
 8001358:	2234      	movs	r2, #52	@ 0x34
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f00d fe2f 	bl	800efc0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001362:	4b31      	ldr	r3, [pc, #196]	@ (8001428 <MX_TIM16_Init+0xec>)
 8001364:	4a31      	ldr	r2, [pc, #196]	@ (800142c <MX_TIM16_Init+0xf0>)
 8001366:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001368:	4b2f      	ldr	r3, [pc, #188]	@ (8001428 <MX_TIM16_Init+0xec>)
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136e:	4b2e      	ldr	r3, [pc, #184]	@ (8001428 <MX_TIM16_Init+0xec>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001374:	4b2c      	ldr	r3, [pc, #176]	@ (8001428 <MX_TIM16_Init+0xec>)
 8001376:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800137a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137c:	4b2a      	ldr	r3, [pc, #168]	@ (8001428 <MX_TIM16_Init+0xec>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001382:	4b29      	ldr	r3, [pc, #164]	@ (8001428 <MX_TIM16_Init+0xec>)
 8001384:	2200      	movs	r2, #0
 8001386:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b27      	ldr	r3, [pc, #156]	@ (8001428 <MX_TIM16_Init+0xec>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800138e:	4826      	ldr	r0, [pc, #152]	@ (8001428 <MX_TIM16_Init+0xec>)
 8001390:	f009 fc7e 	bl	800ac90 <HAL_TIM_Base_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800139a:	f7ff fe23 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800139e:	4822      	ldr	r0, [pc, #136]	@ (8001428 <MX_TIM16_Init+0xec>)
 80013a0:	f009 ff2c 	bl	800b1fc <HAL_TIM_PWM_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80013aa:	f7ff fe1b 	bl	8000fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ae:	2360      	movs	r3, #96	@ 0x60
 80013b0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b6:	2300      	movs	r3, #0
 80013b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013ba:	2300      	movs	r3, #0
 80013bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013ce:	2200      	movs	r2, #0
 80013d0:	4619      	mov	r1, r3
 80013d2:	4815      	ldr	r0, [pc, #84]	@ (8001428 <MX_TIM16_Init+0xec>)
 80013d4:	f00a fa00 	bl	800b7d8 <HAL_TIM_PWM_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80013de:	f7ff fe01 	bl	8000fe4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001404:	463b      	mov	r3, r7
 8001406:	4619      	mov	r1, r3
 8001408:	4807      	ldr	r0, [pc, #28]	@ (8001428 <MX_TIM16_Init+0xec>)
 800140a:	f00b faab 	bl	800c964 <HAL_TIMEx_ConfigBreakDeadTime>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001414:	f7ff fde6 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001418:	4803      	ldr	r0, [pc, #12]	@ (8001428 <MX_TIM16_Init+0xec>)
 800141a:	f000 f8bd 	bl	8001598 <HAL_TIM_MspPostInit>

}
 800141e:	bf00      	nop
 8001420:	3750      	adds	r7, #80	@ 0x50
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200002d4 	.word	0x200002d4
 800142c:	40014400 	.word	0x40014400

08001430 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b094      	sub	sp, #80	@ 0x50
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001436:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
 8001446:	615a      	str	r2, [r3, #20]
 8001448:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800144a:	463b      	mov	r3, r7
 800144c:	2234      	movs	r2, #52	@ 0x34
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f00d fdb5 	bl	800efc0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001456:	4b31      	ldr	r3, [pc, #196]	@ (800151c <MX_TIM17_Init+0xec>)
 8001458:	4a31      	ldr	r2, [pc, #196]	@ (8001520 <MX_TIM17_Init+0xf0>)
 800145a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800145c:	4b2f      	ldr	r3, [pc, #188]	@ (800151c <MX_TIM17_Init+0xec>)
 800145e:	2200      	movs	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	4b2e      	ldr	r3, [pc, #184]	@ (800151c <MX_TIM17_Init+0xec>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001468:	4b2c      	ldr	r3, [pc, #176]	@ (800151c <MX_TIM17_Init+0xec>)
 800146a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800146e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b2a      	ldr	r3, [pc, #168]	@ (800151c <MX_TIM17_Init+0xec>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001476:	4b29      	ldr	r3, [pc, #164]	@ (800151c <MX_TIM17_Init+0xec>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147c:	4b27      	ldr	r3, [pc, #156]	@ (800151c <MX_TIM17_Init+0xec>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001482:	4826      	ldr	r0, [pc, #152]	@ (800151c <MX_TIM17_Init+0xec>)
 8001484:	f009 fc04 	bl	800ac90 <HAL_TIM_Base_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800148e:	f7ff fda9 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001492:	4822      	ldr	r0, [pc, #136]	@ (800151c <MX_TIM17_Init+0xec>)
 8001494:	f009 feb2 	bl	800b1fc <HAL_TIM_PWM_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800149e:	f7ff fda1 	bl	8000fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a2:	2360      	movs	r3, #96	@ 0x60
 80014a4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014aa:	2300      	movs	r3, #0
 80014ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014ae:	2300      	movs	r3, #0
 80014b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014c2:	2200      	movs	r2, #0
 80014c4:	4619      	mov	r1, r3
 80014c6:	4815      	ldr	r0, [pc, #84]	@ (800151c <MX_TIM17_Init+0xec>)
 80014c8:	f00a f986 	bl	800b7d8 <HAL_TIM_PWM_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80014d2:	f7ff fd87 	bl	8000fe4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80014f8:	463b      	mov	r3, r7
 80014fa:	4619      	mov	r1, r3
 80014fc:	4807      	ldr	r0, [pc, #28]	@ (800151c <MX_TIM17_Init+0xec>)
 80014fe:	f00b fa31 	bl	800c964 <HAL_TIMEx_ConfigBreakDeadTime>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001508:	f7ff fd6c 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800150c:	4803      	ldr	r0, [pc, #12]	@ (800151c <MX_TIM17_Init+0xec>)
 800150e:	f000 f843 	bl	8001598 <HAL_TIM_MspPostInit>

}
 8001512:	bf00      	nop
 8001514:	3750      	adds	r7, #80	@ 0x50
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000320 	.word	0x20000320
 8001520:	40014800 	.word	0x40014800

08001524 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a16      	ldr	r2, [pc, #88]	@ (800158c <HAL_TIM_Base_MspInit+0x68>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d10f      	bne.n	8001556 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001536:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <HAL_TIM_Base_MspInit+0x6c>)
 8001538:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800153c:	4a14      	ldr	r2, [pc, #80]	@ (8001590 <HAL_TIM_Base_MspInit+0x6c>)
 800153e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001542:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001546:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <HAL_TIM_Base_MspInit+0x6c>)
 8001548:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800154c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001554:	e013      	b.n	800157e <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM17)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a0e      	ldr	r2, [pc, #56]	@ (8001594 <HAL_TIM_Base_MspInit+0x70>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d10e      	bne.n	800157e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001560:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <HAL_TIM_Base_MspInit+0x6c>)
 8001562:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001566:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <HAL_TIM_Base_MspInit+0x6c>)
 8001568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800156c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001570:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <HAL_TIM_Base_MspInit+0x6c>)
 8001572:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
}
 800157e:	bf00      	nop
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40014400 	.word	0x40014400
 8001590:	46020c00 	.word	0x46020c00
 8001594:	40014800 	.word	0x40014800

08001598 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a25      	ldr	r2, [pc, #148]	@ (800164c <HAL_TIM_MspPostInit+0xb4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d11f      	bne.n	80015fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <HAL_TIM_MspPostInit+0xb8>)
 80015bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015c0:	4a23      	ldr	r2, [pc, #140]	@ (8001650 <HAL_TIM_MspPostInit+0xb8>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015ca:	4b21      	ldr	r3, [pc, #132]	@ (8001650 <HAL_TIM_MspPostInit+0xb8>)
 80015cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015d8:	2340      	movs	r3, #64	@ 0x40
 80015da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80015e8:	230e      	movs	r3, #14
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	4818      	ldr	r0, [pc, #96]	@ (8001654 <HAL_TIM_MspPostInit+0xbc>)
 80015f4:	f002 fdca 	bl	800418c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80015f8:	e023      	b.n	8001642 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM17)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a16      	ldr	r2, [pc, #88]	@ (8001658 <HAL_TIM_MspPostInit+0xc0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d11e      	bne.n	8001642 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_TIM_MspPostInit+0xb8>)
 8001606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800160a:	4a11      	ldr	r2, [pc, #68]	@ (8001650 <HAL_TIM_MspPostInit+0xb8>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001614:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <HAL_TIM_MspPostInit+0xb8>)
 8001616:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001622:	2380      	movs	r3, #128	@ 0x80
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8001632:	230e      	movs	r3, #14
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	@ (8001654 <HAL_TIM_MspPostInit+0xbc>)
 800163e:	f002 fda5 	bl	800418c <HAL_GPIO_Init>
}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	@ 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40014400 	.word	0x40014400
 8001650:	46020c00 	.word	0x46020c00
 8001654:	42020000 	.word	0x42020000
 8001658:	40014800 	.word	0x40014800

0800165c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001660:	4b22      	ldr	r3, [pc, #136]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 8001662:	4a23      	ldr	r2, [pc, #140]	@ (80016f0 <MX_USART1_UART_Init+0x94>)
 8001664:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001666:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 8001668:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800166c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800166e:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001674:	4b1d      	ldr	r3, [pc, #116]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800167a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001680:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 8001682:	220c      	movs	r2, #12
 8001684:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001686:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800168c:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001692:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001698:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169e:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a4:	4811      	ldr	r0, [pc, #68]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 80016a6:	f00b fb3d 	bl	800cd24 <HAL_UART_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016b0:	f7ff fc98 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b4:	2100      	movs	r1, #0
 80016b6:	480d      	ldr	r0, [pc, #52]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 80016b8:	f00c fe1a 	bl	800e2f0 <HAL_UARTEx_SetTxFifoThreshold>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016c2:	f7ff fc8f 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c6:	2100      	movs	r1, #0
 80016c8:	4808      	ldr	r0, [pc, #32]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 80016ca:	f00c fec5 	bl	800e458 <HAL_UARTEx_SetRxFifoThreshold>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016d4:	f7ff fc86 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 80016da:	f00c fd79 	bl	800e1d0 <HAL_UARTEx_DisableFifoMode>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016e4:	f7ff fc7e 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	2000036c 	.word	0x2000036c
 80016f0:	40013800 	.word	0x40013800

080016f4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f8:	4b22      	ldr	r3, [pc, #136]	@ (8001784 <MX_USART2_UART_Init+0x90>)
 80016fa:	4a23      	ldr	r2, [pc, #140]	@ (8001788 <MX_USART2_UART_Init+0x94>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <MX_USART2_UART_Init+0x90>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b1f      	ldr	r3, [pc, #124]	@ (8001784 <MX_USART2_UART_Init+0x90>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <MX_USART2_UART_Init+0x90>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001712:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <MX_USART2_UART_Init+0x90>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <MX_USART2_UART_Init+0x90>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <MX_USART2_UART_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <MX_USART2_UART_Init+0x90>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172a:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <MX_USART2_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001730:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <MX_USART2_UART_Init+0x90>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001736:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <MX_USART2_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800173c:	4811      	ldr	r0, [pc, #68]	@ (8001784 <MX_USART2_UART_Init+0x90>)
 800173e:	f00b faf1 	bl	800cd24 <HAL_UART_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001748:	f7ff fc4c 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800174c:	2100      	movs	r1, #0
 800174e:	480d      	ldr	r0, [pc, #52]	@ (8001784 <MX_USART2_UART_Init+0x90>)
 8001750:	f00c fdce 	bl	800e2f0 <HAL_UARTEx_SetTxFifoThreshold>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800175a:	f7ff fc43 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800175e:	2100      	movs	r1, #0
 8001760:	4808      	ldr	r0, [pc, #32]	@ (8001784 <MX_USART2_UART_Init+0x90>)
 8001762:	f00c fe79 	bl	800e458 <HAL_UARTEx_SetRxFifoThreshold>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800176c:	f7ff fc3a 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	@ (8001784 <MX_USART2_UART_Init+0x90>)
 8001772:	f00c fd2d 	bl	800e1d0 <HAL_UARTEx_DisableFifoMode>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800177c:	f7ff fc32 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000400 	.word	0x20000400
 8001788:	40004400 	.word	0x40004400

0800178c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b0bc      	sub	sp, #240	@ 0xf0
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a4:	f107 0318 	add.w	r3, r7, #24
 80017a8:	22c0      	movs	r2, #192	@ 0xc0
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f00d fc07 	bl	800efc0 <memset>
  if(uartHandle->Instance==USART1)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a54      	ldr	r2, [pc, #336]	@ (8001908 <HAL_UART_MspInit+0x17c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d14e      	bne.n	800185a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017bc:	f04f 0201 	mov.w	r2, #1
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80017c8:	2302      	movs	r3, #2
 80017ca:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017cc:	f107 0318 	add.w	r3, r7, #24
 80017d0:	4618      	mov	r0, r3
 80017d2:	f006 f989 	bl	8007ae8 <HAL_RCCEx_PeriphCLKConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80017dc:	f7ff fc02 	bl	8000fe4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e0:	4b4a      	ldr	r3, [pc, #296]	@ (800190c <HAL_UART_MspInit+0x180>)
 80017e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017e6:	4a49      	ldr	r2, [pc, #292]	@ (800190c <HAL_UART_MspInit+0x180>)
 80017e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ec:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80017f0:	4b46      	ldr	r3, [pc, #280]	@ (800190c <HAL_UART_MspInit+0x180>)
 80017f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b43      	ldr	r3, [pc, #268]	@ (800190c <HAL_UART_MspInit+0x180>)
 8001800:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001804:	4a41      	ldr	r2, [pc, #260]	@ (800190c <HAL_UART_MspInit+0x180>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800180e:	4b3f      	ldr	r3, [pc, #252]	@ (800190c <HAL_UART_MspInit+0x180>)
 8001810:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800181c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001820:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001836:	2307      	movs	r3, #7
 8001838:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001840:	4619      	mov	r1, r3
 8001842:	4833      	ldr	r0, [pc, #204]	@ (8001910 <HAL_UART_MspInit+0x184>)
 8001844:	f002 fca2 	bl	800418c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	203d      	movs	r0, #61	@ 0x3d
 800184e:	f001 fbd1 	bl	8002ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001852:	203d      	movs	r0, #61	@ 0x3d
 8001854:	f001 fbf8 	bl	8003048 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001858:	e051      	b.n	80018fe <HAL_UART_MspInit+0x172>
  else if(uartHandle->Instance==USART2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a2d      	ldr	r2, [pc, #180]	@ (8001914 <HAL_UART_MspInit+0x188>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d14c      	bne.n	80018fe <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001864:	f04f 0202 	mov.w	r2, #2
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001870:	2300      	movs	r3, #0
 8001872:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001874:	f107 0318 	add.w	r3, r7, #24
 8001878:	4618      	mov	r0, r3
 800187a:	f006 f935 	bl	8007ae8 <HAL_RCCEx_PeriphCLKConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8001884:	f7ff fbae 	bl	8000fe4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001888:	4b20      	ldr	r3, [pc, #128]	@ (800190c <HAL_UART_MspInit+0x180>)
 800188a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800188e:	4a1f      	ldr	r2, [pc, #124]	@ (800190c <HAL_UART_MspInit+0x180>)
 8001890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001894:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001898:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <HAL_UART_MspInit+0x180>)
 800189a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800189e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	4b19      	ldr	r3, [pc, #100]	@ (800190c <HAL_UART_MspInit+0x180>)
 80018a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ac:	4a17      	ldr	r2, [pc, #92]	@ (800190c <HAL_UART_MspInit+0x180>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018b6:	4b15      	ldr	r3, [pc, #84]	@ (800190c <HAL_UART_MspInit+0x180>)
 80018b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018c4:	230c      	movs	r3, #12
 80018c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018dc:	2307      	movs	r3, #7
 80018de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018e6:	4619      	mov	r1, r3
 80018e8:	4809      	ldr	r0, [pc, #36]	@ (8001910 <HAL_UART_MspInit+0x184>)
 80018ea:	f002 fc4f 	bl	800418c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	203e      	movs	r0, #62	@ 0x3e
 80018f4:	f001 fb7e 	bl	8002ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018f8:	203e      	movs	r0, #62	@ 0x3e
 80018fa:	f001 fba5 	bl	8003048 <HAL_NVIC_EnableIRQ>
}
 80018fe:	bf00      	nop
 8001900:	37f0      	adds	r7, #240	@ 0xf0
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40013800 	.word	0x40013800
 800190c:	46020c00 	.word	0x46020c00
 8001910:	42020000 	.word	0x42020000
 8001914:	40004400 	.word	0x40004400

08001918 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:


  ldr   sp, =_estack    /* set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001950 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800191c:	f7ff fcd6 	bl	80012cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001920:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001922:	e003      	b.n	800192c <LoopCopyDataInit>

08001924 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001926:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001928:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800192a:	3104      	adds	r1, #4

0800192c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800192c:	480a      	ldr	r0, [pc, #40]	@ (8001958 <LoopForever+0xa>)
	ldr	r3, =_edata
 800192e:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001930:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001932:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001934:	d3f6      	bcc.n	8001924 <CopyDataInit>
	ldr	r2, =_sbss
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001938:	e002      	b.n	8001940 <LoopFillZerobss>

0800193a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800193a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800193c:	f842 3b04 	str.w	r3, [r2], #4

08001940 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <LoopForever+0x16>)
	cmp	r2, r3
 8001942:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001944:	d3f9      	bcc.n	800193a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001946:	f00d fb9f 	bl	800f088 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800194a:	f7ff fa5b 	bl	8000e04 <main>

0800194e <LoopForever>:

LoopForever:
    b LoopForever
 800194e:	e7fe      	b.n	800194e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001950:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001954:	08010340 	.word	0x08010340
	ldr	r0, =_sdata
 8001958:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800195c:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8001960:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8001964:	20000746 	.word	0x20000746

08001968 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC1_IRQHandler>
	...

0800196c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001970:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <HAL_Init+0x50>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a11      	ldr	r2, [pc, #68]	@ (80019bc <HAL_Init+0x50>)
 8001976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800197a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197c:	2003      	movs	r0, #3
 800197e:	f001 fb19 	bl	8002fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001982:	f005 fe8b 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8001986:	4602      	mov	r2, r0
 8001988:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <HAL_Init+0x54>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	490c      	ldr	r1, [pc, #48]	@ (80019c4 <HAL_Init+0x58>)
 8001992:	5ccb      	ldrb	r3, [r1, r3]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
 8001998:	4a0b      	ldr	r2, [pc, #44]	@ (80019c8 <HAL_Init+0x5c>)
 800199a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800199c:	2004      	movs	r0, #4
 800199e:	f001 fb6b 	bl	8003078 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019a2:	200f      	movs	r0, #15
 80019a4:	f7ff fb4c 	bl	8001040 <HAL_InitTick>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e002      	b.n	80019b8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019b2:	f7ff fb29 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40022000 	.word	0x40022000
 80019c0:	46020c00 	.word	0x46020c00
 80019c4:	080101fc 	.word	0x080101fc
 80019c8:	20000000 	.word	0x20000000

080019cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_IncTick+0x20>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_IncTick+0x24>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <HAL_IncTick+0x24>)
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000494 	.word	0x20000494

080019f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return uwTick;
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <HAL_GetTick+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000494 	.word	0x20000494

08001a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a14:	f7ff ffee 	bl	80019f4 <HAL_GetTick>
 8001a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a24:	d005      	beq.n	8001a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a26:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <HAL_Delay+0x44>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a32:	bf00      	nop
 8001a34:	f7ff ffde 	bl	80019f4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d8f7      	bhi.n	8001a34 <HAL_Delay+0x28>
  {
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000008 	.word	0x20000008

08001a54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	601a      	str	r2, [r3, #0]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <LL_ADC_SetResolution+0x3c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d104      	bne.n	8001a9c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f023 020c 	bic.w	r2, r3, #12
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	60da      	str	r2, [r3, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	46021000 	.word	0x46021000

08001abc <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aca:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ace:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ade:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	2a00      	cmp	r2, #0
 8001ae6:	d002      	beq.n	8001aee <LL_ADC_SetGainCompensation+0x32>
 8001ae8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001aec:	e000      	b.n	8001af0 <LL_ADC_SetGainCompensation+0x34>
 8001aee:	2200      	movs	r2, #0
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b085      	sub	sp, #20
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2107      	movs	r1, #7
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	401a      	ands	r2, r3
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b76:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6093      	str	r3, [r2, #8]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b9e:	d101      	bne.n	8001ba4 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001bc2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bc6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001bee:	d101      	bne.n	8001bf4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c12:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c16:	f043 0201 	orr.w	r2, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <LL_ADC_IsEnabled+0x18>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <LL_ADC_IsEnabled+0x1a>
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c64:	f043 0204 	orr.w	r2, r3, #4
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d101      	bne.n	8001c90 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d101      	bne.n	8001cb6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	@ 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f000 be69 	b.w	80029b8 <HAL_ADC_Init+0xcf4>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a65      	ldr	r2, [pc, #404]	@ (8001e80 <HAL_ADC_Init+0x1bc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d013      	beq.n	8001d18 <HAL_ADC_Init+0x54>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a63      	ldr	r2, [pc, #396]	@ (8001e84 <HAL_ADC_Init+0x1c0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00e      	beq.n	8001d18 <HAL_ADC_Init+0x54>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a62      	ldr	r2, [pc, #392]	@ (8001e88 <HAL_ADC_Init+0x1c4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d009      	beq.n	8001d18 <HAL_ADC_Init+0x54>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a60      	ldr	r2, [pc, #384]	@ (8001e8c <HAL_ADC_Init+0x1c8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d004      	beq.n	8001d18 <HAL_ADC_Init+0x54>
 8001d0e:	f240 11a7 	movw	r1, #423	@ 0x1a7
 8001d12:	485f      	ldr	r0, [pc, #380]	@ (8001e90 <HAL_ADC_Init+0x1cc>)
 8001d14:	f7ff f96c 	bl	8000ff0 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d03b      	beq.n	8001d98 <HAL_ADC_Init+0xd4>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001d28:	d036      	beq.n	8001d98 <HAL_ADC_Init+0xd4>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001d32:	d031      	beq.n	8001d98 <HAL_ADC_Init+0xd4>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001d3c:	d02c      	beq.n	8001d98 <HAL_ADC_Init+0xd4>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d46:	d027      	beq.n	8001d98 <HAL_ADC_Init+0xd4>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001d50:	d022      	beq.n	8001d98 <HAL_ADC_Init+0xd4>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001d5a:	d01d      	beq.n	8001d98 <HAL_ADC_Init+0xd4>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001d64:	d018      	beq.n	8001d98 <HAL_ADC_Init+0xd4>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d6e:	d013      	beq.n	8001d98 <HAL_ADC_Init+0xd4>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001d78:	d00e      	beq.n	8001d98 <HAL_ADC_Init+0xd4>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001d82:	d009      	beq.n	8001d98 <HAL_ADC_Init+0xd4>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001d8c:	d004      	beq.n	8001d98 <HAL_ADC_Init+0xd4>
 8001d8e:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 8001d92:	483f      	ldr	r0, [pc, #252]	@ (8001e90 <HAL_ADC_Init+0x1cc>)
 8001d94:	f7ff f92c 	bl	8000ff0 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d014      	beq.n	8001dca <HAL_ADC_Init+0x106>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d010      	beq.n	8001dca <HAL_ADC_Init+0x106>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d00c      	beq.n	8001dca <HAL_ADC_Init+0x106>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b0c      	cmp	r3, #12
 8001db6:	d008      	beq.n	8001dca <HAL_ADC_Init+0x106>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d004      	beq.n	8001dca <HAL_ADC_Init+0x106>
 8001dc0:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8001dc4:	4832      	ldr	r0, [pc, #200]	@ (8001e90 <HAL_ADC_Init+0x1cc>)
 8001dc6:	f7ff f913 	bl	8000ff0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d009      	beq.n	8001de8 <HAL_ADC_Init+0x124>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d004      	beq.n	8001de8 <HAL_ADC_Init+0x124>
 8001dde:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001de2:	482b      	ldr	r0, [pc, #172]	@ (8001e90 <HAL_ADC_Init+0x1cc>)
 8001de4:	f7ff f904 	bl	8000ff0 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_ADC_Init+0x154>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001df8:	d00e      	beq.n	8001e18 <HAL_ADC_Init+0x154>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e02:	d009      	beq.n	8001e18 <HAL_ADC_Init+0x154>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001e0c:	d004      	beq.n	8001e18 <HAL_ADC_Init+0x154>
 8001e0e:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8001e12:	481f      	ldr	r0, [pc, #124]	@ (8001e90 <HAL_ADC_Init+0x1cc>)
 8001e14:	f7ff f8ec 	bl	8000ff0 <assert_failed>

  if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8001e88 <HAL_ADC_Init+0x1c4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	f000 80c4 	beq.w	8001fac <HAL_ADC_Init+0x2e8>
  {
    assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_ADC_Init+0x17a>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d004      	beq.n	8001e3e <HAL_ADC_Init+0x17a>
 8001e34:	f240 11af 	movw	r1, #431	@ 0x1af
 8001e38:	4815      	ldr	r0, [pc, #84]	@ (8001e90 <HAL_ADC_Init+0x1cc>)
 8001e3a:	f7ff f8d9 	bl	8000ff0 <assert_failed>
    assert_param(IS_ADC_GAIN_COMPENSATION(hadc->Init.GainCompensation));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f244 0209 	movw	r2, #16393	@ 0x4009
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d904      	bls.n	8001e54 <HAL_ADC_Init+0x190>
 8001e4a:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8001e4e:	4810      	ldr	r0, [pc, #64]	@ (8001e90 <HAL_ADC_Init+0x1cc>)
 8001e50:	f7ff f8ce 	bl	8000ff0 <assert_failed>
    assert_param(IS_ADC_CONVERSIONDATAMGT(hadc->Init.ConversionDataManagement));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01b      	beq.n	8001e94 <HAL_ADC_Init+0x1d0>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d017      	beq.n	8001e94 <HAL_ADC_Init+0x1d0>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d013      	beq.n	8001e94 <HAL_ADC_Init+0x1d0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d00f      	beq.n	8001e94 <HAL_ADC_Init+0x1d0>
 8001e74:	f240 11b1 	movw	r1, #433	@ 0x1b1
 8001e78:	4805      	ldr	r0, [pc, #20]	@ (8001e90 <HAL_ADC_Init+0x1cc>)
 8001e7a:	f7ff f8b9 	bl	8000ff0 <assert_failed>
 8001e7e:	e009      	b.n	8001e94 <HAL_ADC_Init+0x1d0>
 8001e80:	42028000 	.word	0x42028000
 8001e84:	52028000 	.word	0x52028000
 8001e88:	46021000 	.word	0x46021000
 8001e8c:	56021000 	.word	0x56021000
 8001e90:	0800fe54 	.word	0x0800fe54
    assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e9c:	f000 816d 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea4:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 8001ea8:	f000 8167 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eb0:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 8001eb4:	f000 8161 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ebc:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 8001ec0:	f000 815b 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ec8:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8001ecc:	f000 8155 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed4:	f5b3 6f94 	cmp.w	r3, #1184	@ 0x4a0
 8001ed8:	f000 814f 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee0:	f5b3 6f98 	cmp.w	r3, #1216	@ 0x4c0
 8001ee4:	f000 8149 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eec:	f5b3 6f9c 	cmp.w	r3, #1248	@ 0x4e0
 8001ef0:	f000 8143 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8001efc:	f000 813d 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f04:	f5b3 6fa4 	cmp.w	r3, #1312	@ 0x520
 8001f08:	f000 8137 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f10:	f5b3 6fa8 	cmp.w	r3, #1344	@ 0x540
 8001f14:	f000 8131 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f1c:	f5b3 6fac 	cmp.w	r3, #1376	@ 0x560
 8001f20:	f000 812b 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f28:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8001f2c:	f000 8125 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f34:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8001f38:	f000 811f 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f40:	f5b3 6fb8 	cmp.w	r3, #1472	@ 0x5c0
 8001f44:	f000 8119 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f4c:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 8001f50:	f000 8113 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f58:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8001f5c:	f000 810d 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f64:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8001f68:	f000 8107 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f70:	f5b3 6fcc 	cmp.w	r3, #1632	@ 0x660
 8001f74:	f000 8101 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f7c:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8001f80:	f000 80fb 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f88:	f5b3 6fd4 	cmp.w	r3, #1696	@ 0x6a0
 8001f8c:	f000 80f5 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 80f0 	beq.w	800217a <HAL_ADC_Init+0x4b6>
 8001f9a:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 8001f9e:	4802      	ldr	r0, [pc, #8]	@ (8001fa8 <HAL_ADC_Init+0x2e4>)
 8001fa0:	f7ff f826 	bl	8000ff0 <assert_failed>
 8001fa4:	e0e9      	b.n	800217a <HAL_ADC_Init+0x4b6>
 8001fa6:	bf00      	nop
 8001fa8:	0800fe54 	.word	0x0800fe54
  }
  else
  {
    assert_param(IS_ADC4_SCAN_MODE(hadc->Init.ScanConvMode));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d013      	beq.n	8001fdc <HAL_ADC_Init+0x318>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001fbc:	d00e      	beq.n	8001fdc <HAL_ADC_Init+0x318>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001fc6:	d009      	beq.n	8001fdc <HAL_ADC_Init+0x318>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	4a92      	ldr	r2, [pc, #584]	@ (8002218 <HAL_ADC_Init+0x554>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d004      	beq.n	8001fdc <HAL_ADC_Init+0x318>
 8001fd2:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 8001fd6:	4891      	ldr	r0, [pc, #580]	@ (800221c <HAL_ADC_Init+0x558>)
 8001fd8:	f7ff f80a 	bl	8000ff0 <assert_failed>
    assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_ADC_Init+0x332>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d004      	beq.n	8001ff6 <HAL_ADC_Init+0x332>
 8001fec:	f240 11b7 	movw	r1, #439	@ 0x1b7
 8001ff0:	488a      	ldr	r0, [pc, #552]	@ (800221c <HAL_ADC_Init+0x558>)
 8001ff2:	f7fe fffd 	bl	8000ff0 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d009      	beq.n	8002014 <HAL_ADC_Init+0x350>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002006:	2b01      	cmp	r3, #1
 8002008:	d004      	beq.n	8002014 <HAL_ADC_Init+0x350>
 800200a:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 800200e:	4883      	ldr	r0, [pc, #524]	@ (800221c <HAL_ADC_Init+0x558>)
 8002010:	f7fe ffee 	bl	8000ff0 <assert_failed>
    assert_param(IS_ADC4_LOW_POWER(hadc->Init.LowPowerAutoPowerOff));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d010      	beq.n	800203e <HAL_ADC_Init+0x37a>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d00c      	beq.n	800203e <HAL_ADC_Init+0x37a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d008      	beq.n	800203e <HAL_ADC_Init+0x37a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d004      	beq.n	800203e <HAL_ADC_Init+0x37a>
 8002034:	f240 11b9 	movw	r1, #441	@ 0x1b9
 8002038:	4878      	ldr	r0, [pc, #480]	@ (800221c <HAL_ADC_Init+0x558>)
 800203a:	f7fe ffd9 	bl	8000ff0 <assert_failed>
    assert_param(IS_ADC4_VREF_PROT(hadc->Init.VrefProtection));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002042:	2b00      	cmp	r3, #0
 8002044:	d010      	beq.n	8002068 <HAL_ADC_Init+0x3a4>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800204a:	2b04      	cmp	r3, #4
 800204c:	d00c      	beq.n	8002068 <HAL_ADC_Init+0x3a4>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002052:	2b08      	cmp	r3, #8
 8002054:	d008      	beq.n	8002068 <HAL_ADC_Init+0x3a4>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800205a:	2b0c      	cmp	r3, #12
 800205c:	d004      	beq.n	8002068 <HAL_ADC_Init+0x3a4>
 800205e:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
 8002062:	486e      	ldr	r0, [pc, #440]	@ (800221c <HAL_ADC_Init+0x558>)
 8002064:	f7fe ffc4 	bl	8000ff0 <assert_failed>
    assert_param(IS_ADC4_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800206c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002070:	d02b      	beq.n	80020ca <HAL_ADC_Init+0x406>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002076:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 800207a:	d026      	beq.n	80020ca <HAL_ADC_Init+0x406>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002080:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8002084:	d021      	beq.n	80020ca <HAL_ADC_Init+0x406>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208a:	f5b3 6f98 	cmp.w	r3, #1216	@ 0x4c0
 800208e:	d01c      	beq.n	80020ca <HAL_ADC_Init+0x406>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002094:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002098:	d017      	beq.n	80020ca <HAL_ADC_Init+0x406>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800209e:	f5b3 6fa8 	cmp.w	r3, #1344	@ 0x540
 80020a2:	d012      	beq.n	80020ca <HAL_ADC_Init+0x406>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a8:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80020ac:	d00d      	beq.n	80020ca <HAL_ADC_Init+0x406>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020b2:	f5b3 6fb8 	cmp.w	r3, #1472	@ 0x5c0
 80020b6:	d008      	beq.n	80020ca <HAL_ADC_Init+0x406>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <HAL_ADC_Init+0x406>
 80020c0:	f240 11bb 	movw	r1, #443	@ 0x1bb
 80020c4:	4855      	ldr	r0, [pc, #340]	@ (800221c <HAL_ADC_Init+0x558>)
 80020c6:	f7fe ff93 	bl	8000ff0 <assert_failed>
    assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <HAL_ADC_Init+0x422>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020da:	d004      	beq.n	80020e6 <HAL_ADC_Init+0x422>
 80020dc:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 80020e0:	484e      	ldr	r0, [pc, #312]	@ (800221c <HAL_ADC_Init+0x558>)
 80020e2:	f7fe ff85 	bl	8000ff0 <assert_failed>
    assert_param(IS_ADC4_SAMPLE_TIME(hadc->Init.SamplingTimeCommon1));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d020      	beq.n	8002130 <HAL_ADC_Init+0x46c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d01c      	beq.n	8002130 <HAL_ADC_Init+0x46c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d018      	beq.n	8002130 <HAL_ADC_Init+0x46c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002102:	2b03      	cmp	r3, #3
 8002104:	d014      	beq.n	8002130 <HAL_ADC_Init+0x46c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800210a:	2b04      	cmp	r3, #4
 800210c:	d010      	beq.n	8002130 <HAL_ADC_Init+0x46c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002112:	2b05      	cmp	r3, #5
 8002114:	d00c      	beq.n	8002130 <HAL_ADC_Init+0x46c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800211a:	2b06      	cmp	r3, #6
 800211c:	d008      	beq.n	8002130 <HAL_ADC_Init+0x46c>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002122:	2b07      	cmp	r3, #7
 8002124:	d004      	beq.n	8002130 <HAL_ADC_Init+0x46c>
 8002126:	f240 11bd 	movw	r1, #445	@ 0x1bd
 800212a:	483c      	ldr	r0, [pc, #240]	@ (800221c <HAL_ADC_Init+0x558>)
 800212c:	f7fe ff60 	bl	8000ff0 <assert_failed>
    assert_param(IS_ADC4_SAMPLE_TIME(hadc->Init.SamplingTimeCommon2));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002134:	2b00      	cmp	r3, #0
 8002136:	d020      	beq.n	800217a <HAL_ADC_Init+0x4b6>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213c:	2b01      	cmp	r3, #1
 800213e:	d01c      	beq.n	800217a <HAL_ADC_Init+0x4b6>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002144:	2b02      	cmp	r3, #2
 8002146:	d018      	beq.n	800217a <HAL_ADC_Init+0x4b6>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214c:	2b03      	cmp	r3, #3
 800214e:	d014      	beq.n	800217a <HAL_ADC_Init+0x4b6>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002154:	2b04      	cmp	r3, #4
 8002156:	d010      	beq.n	800217a <HAL_ADC_Init+0x4b6>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215c:	2b05      	cmp	r3, #5
 800215e:	d00c      	beq.n	800217a <HAL_ADC_Init+0x4b6>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002164:	2b06      	cmp	r3, #6
 8002166:	d008      	beq.n	800217a <HAL_ADC_Init+0x4b6>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216c:	2b07      	cmp	r3, #7
 800216e:	d004      	beq.n	800217a <HAL_ADC_Init+0x4b6>
 8002170:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8002174:	4829      	ldr	r0, [pc, #164]	@ (800221c <HAL_ADC_Init+0x558>)
 8002176:	f7fe ff3b 	bl	8000ff0 <assert_failed>
  }
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b04      	cmp	r3, #4
 8002180:	d008      	beq.n	8002194 <HAL_ADC_Init+0x4d0>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b08      	cmp	r3, #8
 8002188:	d004      	beq.n	8002194 <HAL_ADC_Init+0x4d0>
 800218a:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 800218e:	4823      	ldr	r0, [pc, #140]	@ (800221c <HAL_ADC_Init+0x558>)
 8002190:	f7fe ff2e 	bl	8000ff0 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002198:	2b00      	cmp	r3, #0
 800219a:	d009      	beq.n	80021b0 <HAL_ADC_Init+0x4ec>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021a4:	d004      	beq.n	80021b0 <HAL_ADC_Init+0x4ec>
 80021a6:	f240 11c1 	movw	r1, #449	@ 0x1c1
 80021aa:	481c      	ldr	r0, [pc, #112]	@ (800221c <HAL_ADC_Init+0x558>)
 80021ac:	f7fe ff20 	bl	8000ff0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7f1b      	ldrb	r3, [r3, #28]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_ADC_Init+0x506>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7f1b      	ldrb	r3, [r3, #28]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d004      	beq.n	80021ca <HAL_ADC_Init+0x506>
 80021c0:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 80021c4:	4815      	ldr	r0, [pc, #84]	@ (800221c <HAL_ADC_Init+0x558>)
 80021c6:	f7fe ff13 	bl	8000ff0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d009      	beq.n	80021e8 <HAL_ADC_Init+0x524>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d004      	beq.n	80021e8 <HAL_ADC_Init+0x524>
 80021de:	f240 11c3 	movw	r1, #451	@ 0x1c3
 80021e2:	480e      	ldr	r0, [pc, #56]	@ (800221c <HAL_ADC_Init+0x558>)
 80021e4:	f7fe ff04 	bl	8000ff0 <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d04b      	beq.n	8002288 <HAL_ADC_Init+0x5c4>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <HAL_ADC_Init+0x54a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002200:	2b01      	cmp	r3, #1
 8002202:	d004      	beq.n	800220e <HAL_ADC_Init+0x54a>
 8002204:	f240 11c7 	movw	r1, #455	@ 0x1c7
 8002208:	4804      	ldr	r0, [pc, #16]	@ (800221c <HAL_ADC_Init+0x558>)
 800220a:	f7fe fef1 	bl	8000ff0 <assert_failed>
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a03      	ldr	r2, [pc, #12]	@ (8002220 <HAL_ADC_Init+0x55c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	e005      	b.n	8002224 <HAL_ADC_Init+0x560>
 8002218:	80000010 	.word	0x80000010
 800221c:	0800fe54 	.word	0x0800fe54
 8002220:	46021000 	.word	0x46021000
 8002224:	d01f      	beq.n	8002266 <HAL_ADC_Init+0x5a2>
    {
      assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_ADC_Init+0x572>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002232:	2b10      	cmp	r3, #16
 8002234:	d904      	bls.n	8002240 <HAL_ADC_Init+0x57c>
 8002236:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
 800223a:	4893      	ldr	r0, [pc, #588]	@ (8002488 <HAL_ADC_Init+0x7c4>)
 800223c:	f7fe fed8 	bl	8000ff0 <assert_failed>
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002246:	2b01      	cmp	r3, #1
 8002248:	d11e      	bne.n	8002288 <HAL_ADC_Init+0x5c4>
      {
        assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_ADC_Init+0x596>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	2b08      	cmp	r3, #8
 8002258:	d916      	bls.n	8002288 <HAL_ADC_Init+0x5c4>
 800225a:	f240 11cd 	movw	r1, #461	@ 0x1cd
 800225e:	488a      	ldr	r0, [pc, #552]	@ (8002488 <HAL_ADC_Init+0x7c4>)
 8002260:	f7fe fec6 	bl	8000ff0 <assert_failed>
 8002264:	e010      	b.n	8002288 <HAL_ADC_Init+0x5c4>
      }
    }
    else
    {
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d10c      	bne.n	8002288 <HAL_ADC_Init+0x5c4>
      {
        assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_ADC_Init+0x5ba>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227a:	2b10      	cmp	r3, #16
 800227c:	d904      	bls.n	8002288 <HAL_ADC_Init+0x5c4>
 800227e:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8002282:	4881      	ldr	r0, [pc, #516]	@ (8002488 <HAL_ADC_Init+0x7c4>)
 8002284:	f7fe feb4 	bl	8000ff0 <assert_failed>
      }
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800228e:	2b01      	cmp	r3, #1
 8002290:	d109      	bne.n	80022a6 <HAL_ADC_Init+0x5e2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002298:	2b01      	cmp	r3, #1
 800229a:	d104      	bne.n	80022a6 <HAL_ADC_Init+0x5e2>
 800229c:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 80022a0:	4879      	ldr	r0, [pc, #484]	@ (8002488 <HAL_ADC_Init+0x7c4>)
 80022a2:	f7fe fea5 	bl	8000ff0 <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_ADC_Init+0x5fe>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe fab8 	bl	8000824 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fc5f 	bl	8001b8a <LL_ADC_IsDeepPowerDownEnabled>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d004      	beq.n	80022dc <HAL_ADC_Init+0x618>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fc45 	bl	8001b66 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fc7a 	bl	8001bda <LL_ADC_IsInternalRegulatorEnabled>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d115      	bne.n	8002318 <HAL_ADC_Init+0x654>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fc5e 	bl	8001bb2 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022f6:	4b65      	ldr	r3, [pc, #404]	@ (800248c <HAL_ADC_Init+0x7c8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	099b      	lsrs	r3, r3, #6
 80022fc:	4a64      	ldr	r2, [pc, #400]	@ (8002490 <HAL_ADC_Init+0x7cc>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	099b      	lsrs	r3, r3, #6
 8002304:	3301      	adds	r3, #1
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800230a:	e002      	b.n	8002312 <HAL_ADC_Init+0x64e>
    {
      wait_loop_index--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3b01      	subs	r3, #1
 8002310:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f9      	bne.n	800230c <HAL_ADC_Init+0x648>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fc5c 	bl	8001bda <LL_ADC_IsInternalRegulatorEnabled>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10e      	bne.n	8002346 <HAL_ADC_Init+0x682>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800232c:	f043 0210 	orr.w	r2, r3, #16
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002338:	f043 0201 	orr.w	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fc94 	bl	8001c78 <LL_ADC_REG_IsConversionOngoing>
 8002350:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 8321 	bne.w	80029a2 <HAL_ADC_Init+0xcde>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f040 831d 	bne.w	80029a2 <HAL_ADC_Init+0xcde>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800236c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002370:	f043 0202 	orr.w	r2, r3, #2
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fc54 	bl	8001c2a <LL_ADC_IsEnabled>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d140      	bne.n	800240a <HAL_ADC_Init+0x746>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a41      	ldr	r2, [pc, #260]	@ (8002494 <HAL_ADC_Init+0x7d0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d028      	beq.n	80023e4 <HAL_ADC_Init+0x720>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a40      	ldr	r2, [pc, #256]	@ (8002498 <HAL_ADC_Init+0x7d4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d109      	bne.n	80023b0 <HAL_ADC_Init+0x6ec>
 800239c:	483e      	ldr	r0, [pc, #248]	@ (8002498 <HAL_ADC_Init+0x7d4>)
 800239e:	f7ff fc44 	bl	8001c2a <LL_ADC_IsEnabled>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	bf0c      	ite	eq
 80023a8:	2301      	moveq	r3, #1
 80023aa:	2300      	movne	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	e008      	b.n	80023c2 <HAL_ADC_Init+0x6fe>
 80023b0:	4838      	ldr	r0, [pc, #224]	@ (8002494 <HAL_ADC_Init+0x7d0>)
 80023b2:	f7ff fc3a 	bl	8001c2a <LL_ADC_IsEnabled>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d021      	beq.n	800240a <HAL_ADC_Init+0x746>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a33      	ldr	r2, [pc, #204]	@ (8002498 <HAL_ADC_Init+0x7d4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_Init+0x710>
 80023d0:	4a32      	ldr	r2, [pc, #200]	@ (800249c <HAL_ADC_Init+0x7d8>)
 80023d2:	e000      	b.n	80023d6 <HAL_ADC_Init+0x712>
 80023d4:	4a32      	ldr	r2, [pc, #200]	@ (80024a0 <HAL_ADC_Init+0x7dc>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4619      	mov	r1, r3
 80023dc:	4610      	mov	r0, r2
 80023de:	f7ff fb39 	bl	8001a54 <LL_ADC_SetCommonClock>
 80023e2:	e012      	b.n	800240a <HAL_ADC_Init+0x746>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	4619      	mov	r1, r3
 80023ee:	4610      	mov	r0, r2
 80023f0:	f7ff fb44 	bl	8001a7c <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80023f4:	4b2a      	ldr	r3, [pc, #168]	@ (80024a0 <HAL_ADC_Init+0x7dc>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002404:	4926      	ldr	r1, [pc, #152]	@ (80024a0 <HAL_ADC_Init+0x7dc>)
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a21      	ldr	r2, [pc, #132]	@ (8002494 <HAL_ADC_Init+0x7d0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d010      	beq.n	8002436 <HAL_ADC_Init+0x772>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800241a:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002420:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002426:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800242e:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002430:	4313      	orrs	r3, r2
 8002432:	623b      	str	r3, [r7, #32]
 8002434:	e03e      	b.n	80024b4 <HAL_ADC_Init+0x7f0>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	7f1b      	ldrb	r3, [r3, #28]
 800243a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002442:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002444:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800244a:	2a00      	cmp	r2, #0
 800244c:	d002      	beq.n	8002454 <HAL_ADC_Init+0x790>
 800244e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002452:	e000      	b.n	8002456 <HAL_ADC_Init+0x792>
 8002454:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002456:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800245c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	da04      	bge.n	8002470 <HAL_ADC_Init+0x7ac>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800246e:	e001      	b.n	8002474 <HAL_ADC_Init+0x7b0>
 8002470:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8002474:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4907      	ldr	r1, [pc, #28]	@ (8002498 <HAL_ADC_Init+0x7d4>)
 800247c:	428b      	cmp	r3, r1
 800247e:	d111      	bne.n	80024a4 <HAL_ADC_Init+0x7e0>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002486:	e011      	b.n	80024ac <HAL_ADC_Init+0x7e8>
 8002488:	0800fe54 	.word	0x0800fe54
 800248c:	20000000 	.word	0x20000000
 8002490:	053e2d63 	.word	0x053e2d63
 8002494:	46021000 	.word	0x46021000
 8002498:	42028000 	.word	0x42028000
 800249c:	42028308 	.word	0x42028308
 80024a0:	46021308 	.word	0x46021308
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024aa:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80024ac:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024ae:	6a3a      	ldr	r2, [r7, #32]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d122      	bne.n	8002504 <HAL_ADC_Init+0x840>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a4b      	ldr	r2, [pc, #300]	@ (80025f0 <HAL_ADC_Init+0x92c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d007      	beq.n	80024d8 <HAL_ADC_Init+0x814>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024cc:	3b01      	subs	r3, #1
 80024ce:	045b      	lsls	r3, r3, #17
 80024d0:	6a3a      	ldr	r2, [r7, #32]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	623b      	str	r3, [r7, #32]
 80024d6:	e015      	b.n	8002504 <HAL_ADC_Init+0x840>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d104      	bne.n	80024ec <HAL_ADC_Init+0x828>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e8:	623b      	str	r3, [r7, #32]
 80024ea:	e00b      	b.n	8002504 <HAL_ADC_Init+0x840>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024f0:	f043 0220 	orr.w	r2, r3, #32
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024fc:	f043 0201 	orr.w	r2, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a39      	ldr	r2, [pc, #228]	@ (80025f0 <HAL_ADC_Init+0x92c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d018      	beq.n	8002540 <HAL_ADC_Init+0x87c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <HAL_ADC_Init+0x866>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800251a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002522:	4313      	orrs	r3, r2
 8002524:	6a3a      	ldr	r2, [r7, #32]
 8002526:	4313      	orrs	r3, r2
 8002528:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	4b30      	ldr	r3, [pc, #192]	@ (80025f4 <HAL_ADC_Init+0x930>)
 8002532:	4013      	ands	r3, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	6a39      	ldr	r1, [r7, #32]
 800253a:	430b      	orrs	r3, r1
 800253c:	60d3      	str	r3, [r2, #12]
 800253e:	e031      	b.n	80025a4 <HAL_ADC_Init+0x8e0>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002544:	2b00      	cmp	r3, #0
 8002546:	d009      	beq.n	800255c <HAL_ADC_Init+0x898>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800254c:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002554:	4313      	orrs	r3, r2
 8002556:	6a3a      	ldr	r2, [r7, #32]
 8002558:	4313      	orrs	r3, r2
 800255a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	4b25      	ldr	r3, [pc, #148]	@ (80025f8 <HAL_ADC_Init+0x934>)
 8002564:	4013      	ands	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	6a39      	ldr	r1, [r7, #32]
 800256c:	430b      	orrs	r3, r1
 800256e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_ADC_Init+0x8c6>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1a      	ldr	r2, [r3, #32]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800258e:	2b00      	cmp	r3, #0
 8002590:	d008      	beq.n	80025a4 <HAL_ADC_Init+0x8e0>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a11      	ldr	r2, [pc, #68]	@ (80025f0 <HAL_ADC_Init+0x92c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	f000 8116 	beq.w	80027dc <HAL_ADC_Init+0xb18>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fb5f 	bl	8001c78 <LL_ADC_REG_IsConversionOngoing>
 80025ba:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fb6c 	bl	8001c9e <LL_ADC_INJ_IsConversionOngoing>
 80025c6:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 80df 	bne.w	800278e <HAL_ADC_Init+0xaca>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 80db 	bne.w	800278e <HAL_ADC_Init+0xaca>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	7f1b      	ldrb	r3, [r3, #28]
 80025dc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4906      	ldr	r1, [pc, #24]	@ (80025fc <HAL_ADC_Init+0x938>)
 80025e4:	428b      	cmp	r3, r1
 80025e6:	d10b      	bne.n	8002600 <HAL_ADC_Init+0x93c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ec:	e00b      	b.n	8002606 <HAL_ADC_Init+0x942>
 80025ee:	bf00      	nop
 80025f0:	46021000 	.word	0x46021000
 80025f4:	fff0c013 	.word	0xfff0c013
 80025f8:	ffde800d 	.word	0xffde800d
 80025fc:	42028000 	.word	0x42028000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002604:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002606:	4313      	orrs	r3, r2
 8002608:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002614:	f023 0303 	bic.w	r3, r3, #3
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	6a39      	ldr	r1, [r7, #32]
 800261e:	430b      	orrs	r3, r1
 8002620:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <HAL_ADC_Init+0x976>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	4619      	mov	r1, r3
 8002634:	4610      	mov	r0, r2
 8002636:	f7ff fa41 	bl	8001abc <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002640:	2b01      	cmp	r3, #1
 8002642:	f040 8091 	bne.w	8002768 <HAL_ADC_Init+0xaa4>
        {
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264a:	2b00      	cmp	r3, #0
 800264c:	db04      	blt.n	8002658 <HAL_ADC_Init+0x994>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002656:	d304      	bcc.n	8002662 <HAL_ADC_Init+0x99e>
 8002658:	f240 21fe 	movw	r1, #766	@ 0x2fe
 800265c:	485d      	ldr	r0, [pc, #372]	@ (80027d4 <HAL_ADC_Init+0xb10>)
 800265e:	f7fe fcc7 	bl	8000ff0 <assert_failed>
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002666:	2b00      	cmp	r3, #0
 8002668:	d034      	beq.n	80026d4 <HAL_ADC_Init+0xa10>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266e:	2b20      	cmp	r3, #32
 8002670:	d030      	beq.n	80026d4 <HAL_ADC_Init+0xa10>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002676:	2b40      	cmp	r3, #64	@ 0x40
 8002678:	d02c      	beq.n	80026d4 <HAL_ADC_Init+0xa10>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267e:	2b60      	cmp	r3, #96	@ 0x60
 8002680:	d028      	beq.n	80026d4 <HAL_ADC_Init+0xa10>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002686:	2b80      	cmp	r3, #128	@ 0x80
 8002688:	d024      	beq.n	80026d4 <HAL_ADC_Init+0xa10>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002690:	d020      	beq.n	80026d4 <HAL_ADC_Init+0xa10>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002696:	2bc0      	cmp	r3, #192	@ 0xc0
 8002698:	d01c      	beq.n	80026d4 <HAL_ADC_Init+0xa10>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269e:	2be0      	cmp	r3, #224	@ 0xe0
 80026a0:	d018      	beq.n	80026d4 <HAL_ADC_Init+0xa10>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026aa:	d013      	beq.n	80026d4 <HAL_ADC_Init+0xa10>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b0:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 80026b4:	d00e      	beq.n	80026d4 <HAL_ADC_Init+0xa10>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ba:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80026be:	d009      	beq.n	80026d4 <HAL_ADC_Init+0xa10>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c4:	f5b3 7fb0 	cmp.w	r3, #352	@ 0x160
 80026c8:	d004      	beq.n	80026d4 <HAL_ADC_Init+0xa10>
 80026ca:	f240 21ff 	movw	r1, #767	@ 0x2ff
 80026ce:	4841      	ldr	r0, [pc, #260]	@ (80027d4 <HAL_ADC_Init+0xb10>)
 80026d0:	f7fe fc8e 	bl	8000ff0 <assert_failed>
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d009      	beq.n	80026f0 <HAL_ADC_Init+0xa2c>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026e4:	d004      	beq.n	80026f0 <HAL_ADC_Init+0xa2c>
 80026e6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80026ea:	483a      	ldr	r0, [pc, #232]	@ (80027d4 <HAL_ADC_Init+0xb10>)
 80026ec:	f7fe fc80 	bl	8000ff0 <assert_failed>
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d00a      	beq.n	800270e <HAL_ADC_Init+0xa4a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026fc:	f240 4201 	movw	r2, #1025	@ 0x401
 8002700:	4293      	cmp	r3, r2
 8002702:	d004      	beq.n	800270e <HAL_ADC_Init+0xa4a>
 8002704:	f240 3101 	movw	r1, #769	@ 0x301
 8002708:	4832      	ldr	r0, [pc, #200]	@ (80027d4 <HAL_ADC_Init+0xb10>)
 800270a:	f7fe fc71 	bl	8000ff0 <assert_failed>

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_ADC_Init+0xa5a>
              || (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271a:	2b00      	cmp	r3, #0
 800271c:	d108      	bne.n	8002730 <HAL_ADC_Init+0xa6c>
          {
            /* Multi trigger is not applicable to software-triggered conversions */
            assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002722:	2b00      	cmp	r3, #0
 8002724:	d004      	beq.n	8002730 <HAL_ADC_Init+0xa6c>
 8002726:	f240 3107 	movw	r1, #775	@ 0x307
 800272a:	482a      	ldr	r0, [pc, #168]	@ (80027d4 <HAL_ADC_Init+0xb10>)
 800272c:	f7fe fc60 	bl	8000ff0 <assert_failed>
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	4b28      	ldr	r3, [pc, #160]	@ (80027d8 <HAL_ADC_Init+0xb14>)
 8002738:	4013      	ands	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800273e:	0411      	lsls	r1, r2, #16
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002744:	4311      	orrs	r1, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800274a:	4311      	orrs	r1, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002750:	4311      	orrs	r1, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002756:	0892      	lsrs	r2, r2, #2
 8002758:	430a      	orrs	r2, r1
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0201 	orr.w	r2, r2, #1
 8002764:	611a      	str	r2, [r3, #16]
 8002766:	e007      	b.n	8002778 <HAL_ADC_Init+0xab4>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691a      	ldr	r2, [r3, #16]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d10c      	bne.n	80027b0 <HAL_ADC_Init+0xaec>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279c:	f023 010f 	bic.w	r1, r3, #15
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	1e5a      	subs	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80027ae:	e007      	b.n	80027c0 <HAL_ADC_Init+0xafc>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 020f 	bic.w	r2, r2, #15
 80027be:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027c4:	f023 0303 	bic.w	r3, r3, #3
 80027c8:	f043 0201 	orr.w	r2, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80027d0:	e0f0      	b.n	80029b4 <HAL_ADC_Init+0xcf0>
 80027d2:	bf00      	nop
 80027d4:	0800fe54 	.word	0x0800fe54
 80027d8:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d176      	bne.n	80028d4 <HAL_ADC_Init+0xc10>
      {
        assert_param(IS_ADC4_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027ee:	d027      	beq.n	8002840 <HAL_ADC_Init+0xb7c>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f4:	4a72      	ldr	r2, [pc, #456]	@ (80029c0 <HAL_ADC_Init+0xcfc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d022      	beq.n	8002840 <HAL_ADC_Init+0xb7c>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fe:	4a71      	ldr	r2, [pc, #452]	@ (80029c4 <HAL_ADC_Init+0xd00>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d01d      	beq.n	8002840 <HAL_ADC_Init+0xb7c>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002808:	4a6f      	ldr	r2, [pc, #444]	@ (80029c8 <HAL_ADC_Init+0xd04>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d018      	beq.n	8002840 <HAL_ADC_Init+0xb7c>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002812:	4a6e      	ldr	r2, [pc, #440]	@ (80029cc <HAL_ADC_Init+0xd08>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d013      	beq.n	8002840 <HAL_ADC_Init+0xb7c>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281c:	4a6c      	ldr	r2, [pc, #432]	@ (80029d0 <HAL_ADC_Init+0xd0c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00e      	beq.n	8002840 <HAL_ADC_Init+0xb7c>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002826:	4a6b      	ldr	r2, [pc, #428]	@ (80029d4 <HAL_ADC_Init+0xd10>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d009      	beq.n	8002840 <HAL_ADC_Init+0xb7c>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002830:	4a69      	ldr	r2, [pc, #420]	@ (80029d8 <HAL_ADC_Init+0xd14>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d004      	beq.n	8002840 <HAL_ADC_Init+0xb7c>
 8002836:	f240 313d 	movw	r1, #829	@ 0x33d
 800283a:	4868      	ldr	r0, [pc, #416]	@ (80029dc <HAL_ADC_Init+0xd18>)
 800283c:	f7fe fbd8 	bl	8000ff0 <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d025      	beq.n	8002894 <HAL_ADC_Init+0xbd0>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284c:	2b20      	cmp	r3, #32
 800284e:	d021      	beq.n	8002894 <HAL_ADC_Init+0xbd0>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002854:	2b40      	cmp	r3, #64	@ 0x40
 8002856:	d01d      	beq.n	8002894 <HAL_ADC_Init+0xbd0>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285c:	2b60      	cmp	r3, #96	@ 0x60
 800285e:	d019      	beq.n	8002894 <HAL_ADC_Init+0xbd0>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002864:	2b80      	cmp	r3, #128	@ 0x80
 8002866:	d015      	beq.n	8002894 <HAL_ADC_Init+0xbd0>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286c:	2ba0      	cmp	r3, #160	@ 0xa0
 800286e:	d011      	beq.n	8002894 <HAL_ADC_Init+0xbd0>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002874:	2bc0      	cmp	r3, #192	@ 0xc0
 8002876:	d00d      	beq.n	8002894 <HAL_ADC_Init+0xbd0>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287c:	2be0      	cmp	r3, #224	@ 0xe0
 800287e:	d009      	beq.n	8002894 <HAL_ADC_Init+0xbd0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002888:	d004      	beq.n	8002894 <HAL_ADC_Init+0xbd0>
 800288a:	f240 313e 	movw	r1, #830	@ 0x33e
 800288e:	4853      	ldr	r0, [pc, #332]	@ (80029dc <HAL_ADC_Init+0xd18>)
 8002890:	f7fe fbae 	bl	8000ff0 <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002898:	2b00      	cmp	r3, #0
 800289a:	d009      	beq.n	80028b0 <HAL_ADC_Init+0xbec>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028a4:	d004      	beq.n	80028b0 <HAL_ADC_Init+0xbec>
 80028a6:	f240 313f 	movw	r1, #831	@ 0x33f
 80028aa:	484c      	ldr	r0, [pc, #304]	@ (80029dc <HAL_ADC_Init+0xd18>)
 80028ac:	f7fe fba0 	bl	8000ff0 <assert_failed>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80028b8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80028be:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80028c4:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	4b41      	ldr	r3, [pc, #260]	@ (80029e0 <HAL_ADC_Init+0xd1c>)
 80028dc:	4013      	ands	r3, r2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	69f9      	ldr	r1, [r7, #28]
 80028e4:	430b      	orrs	r3, r1
 80028e6:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f0:	461a      	mov	r2, r3
 80028f2:	2100      	movs	r1, #0
 80028f4:	f7ff f905 	bl	8001b02 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002900:	461a      	mov	r2, r3
 8002902:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8002906:	f7ff f8fc 	bl	8001b02 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d108      	bne.n	8002924 <HAL_ADC_Init+0xc60>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f062 020f 	orn	r2, r2, #15
 8002920:	629a      	str	r2, [r3, #40]	@ 0x28
 8002922:	e018      	b.n	8002956 <HAL_ADC_Init+0xc92>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800292c:	d113      	bne.n	8002956 <HAL_ADC_Init+0xc92>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002938:	3b01      	subs	r3, #1
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	f003 031c 	and.w	r3, r3, #28
 8002940:	f06f 020f 	mvn.w	r2, #15
 8002944:	fa02 f103 	lsl.w	r1, r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	4b21      	ldr	r3, [pc, #132]	@ (80029e4 <HAL_ADC_Init+0xd20>)
 800295e:	4013      	ands	r3, r2
 8002960:	6a3a      	ldr	r2, [r7, #32]
 8002962:	429a      	cmp	r2, r3
 8002964:	d10b      	bne.n	800297e <HAL_ADC_Init+0xcba>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002970:	f023 0303 	bic.w	r3, r3, #3
 8002974:	f043 0201 	orr.w	r2, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800297c:	e01a      	b.n	80029b4 <HAL_ADC_Init+0xcf0>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002982:	f023 0312 	bic.w	r3, r3, #18
 8002986:	f043 0210 	orr.w	r2, r3, #16
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002992:	f043 0201 	orr.w	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80029a0:	e008      	b.n	80029b4 <HAL_ADC_Init+0xcf0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029a6:	f043 0210 	orr.w	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80029b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3728      	adds	r7, #40	@ 0x28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	80000004 	.word	0x80000004
 80029c4:	80000008 	.word	0x80000008
 80029c8:	8000000c 	.word	0x8000000c
 80029cc:	80000010 	.word	0x80000010
 80029d0:	80000014 	.word	0x80000014
 80029d4:	80000018 	.word	0x80000018
 80029d8:	8000001c 	.word	0x8000001c
 80029dc:	0800fe54 	.word	0x0800fe54
 80029e0:	f7fffc02 	.word	0xf7fffc02
 80029e4:	833ffff3 	.word	0x833ffff3

080029e8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  const ADC_TypeDef       *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a41      	ldr	r2, [pc, #260]	@ (8002afc <HAL_ADC_Start+0x114>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_ADC_Start+0x3a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a40      	ldr	r2, [pc, #256]	@ (8002b00 <HAL_ADC_Start+0x118>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00e      	beq.n	8002a22 <HAL_ADC_Start+0x3a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a3e      	ldr	r2, [pc, #248]	@ (8002b04 <HAL_ADC_Start+0x11c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d009      	beq.n	8002a22 <HAL_ADC_Start+0x3a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a3d      	ldr	r2, [pc, #244]	@ (8002b08 <HAL_ADC_Start+0x120>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d004      	beq.n	8002a22 <HAL_ADC_Start+0x3a>
 8002a18:	f240 6122 	movw	r1, #1570	@ 0x622
 8002a1c:	483b      	ldr	r0, [pc, #236]	@ (8002b0c <HAL_ADC_Start+0x124>)
 8002a1e:	f7fe fae7 	bl	8000ff0 <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff f926 	bl	8001c78 <LL_ADC_REG_IsConversionOngoing>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d15d      	bne.n	8002aee <HAL_ADC_Start+0x106>
  {
    __HAL_LOCK(hadc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_ADC_Start+0x58>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e059      	b.n	8002af4 <HAL_ADC_Start+0x10c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f995 	bl	8002d78 <ADC_Enable>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d145      	bne.n	8002ae4 <HAL_ADC_Start+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	679a      	str	r2, [r3, #120]	@ 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a24      	ldr	r2, [pc, #144]	@ (8002b04 <HAL_ADC_Start+0x11c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d011      	beq.n	8002a9a <HAL_ADC_Start+0xb2>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a82:	d106      	bne.n	8002a92 <HAL_ADC_Start+0xaa>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a88:	f023 0206 	bic.w	r2, r3, #6
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002a90:	e006      	b.n	8002aa0 <HAL_ADC_Start+0xb8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002a98:	e002      	b.n	8002aa0 <HAL_ADC_Start+0xb8>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	67da      	str	r2, [r3, #124]	@ 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	221c      	movs	r2, #28
 8002aa6:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a13      	ldr	r2, [pc, #76]	@ (8002b04 <HAL_ADC_Start+0x11c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00e      	beq.n	8002ad8 <HAL_ADC_Start+0xf0>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }

        }
#else
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <HAL_ADC_Start+0xf0>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002acc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ad0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	679a      	str	r2, [r3, #120]	@ 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff f8b7 	bl	8001c50 <LL_ADC_REG_StartConversion>
 8002ae2:	e006      	b.n	8002af2 <HAL_ADC_Start+0x10a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8002aec:	e001      	b.n	8002af2 <HAL_ADC_Start+0x10a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
 8002af0:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	42028000 	.word	0x42028000
 8002b00:	52028000 	.word	0x52028000
 8002b04:	46021000 	.word	0x46021000
 8002b08:	56021000 	.word	0x56021000
 8002b0c:	0800fe54 	.word	0x0800fe54

08002b10 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a7a      	ldr	r2, [pc, #488]	@ (8002d08 <HAL_ADC_PollForConversion+0x1f8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d013      	beq.n	8002b4c <HAL_ADC_PollForConversion+0x3c>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a78      	ldr	r2, [pc, #480]	@ (8002d0c <HAL_ADC_PollForConversion+0x1fc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00e      	beq.n	8002b4c <HAL_ADC_PollForConversion+0x3c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a77      	ldr	r2, [pc, #476]	@ (8002d10 <HAL_ADC_PollForConversion+0x200>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d009      	beq.n	8002b4c <HAL_ADC_PollForConversion+0x3c>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a75      	ldr	r2, [pc, #468]	@ (8002d14 <HAL_ADC_PollForConversion+0x204>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d004      	beq.n	8002b4c <HAL_ADC_PollForConversion+0x3c>
 8002b42:	f240 61e7 	movw	r1, #1767	@ 0x6e7
 8002b46:	4874      	ldr	r0, [pc, #464]	@ (8002d18 <HAL_ADC_PollForConversion+0x208>)
 8002b48:	f7fe fa52 	bl	8000ff0 <assert_failed>

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d102      	bne.n	8002b5a <HAL_ADC_PollForConversion+0x4a>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002b54:	2308      	movs	r3, #8
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e027      	b.n	8002baa <HAL_ADC_PollForConversion+0x9a>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6c      	ldr	r2, [pc, #432]	@ (8002d10 <HAL_ADC_PollForConversion+0x200>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d011      	beq.n	8002b88 <HAL_ADC_PollForConversion+0x78>
          tmp_flag_end = (ADC_FLAG_EOC);
        }
      }
#else
      /* Check ADC DMA mode */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b76:	f043 0220 	orr.w	r2, r3, #32
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	679a      	str	r2, [r3, #120]	@ 0x78
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e0be      	b.n	8002d00 <HAL_ADC_PollForConversion+0x1f0>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8002b82:	2304      	movs	r3, #4
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e010      	b.n	8002baa <HAL_ADC_PollForConversion+0x9a>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d007      	beq.n	8002ba6 <HAL_ADC_PollForConversion+0x96>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b9a:	f043 0220 	orr.w	r2, r3, #32
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	679a      	str	r2, [r3, #120]	@ 0x78
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0ac      	b.n	8002d00 <HAL_ADC_PollForConversion+0x1f0>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002baa:	f7fe ff23 	bl	80019f4 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002bb0:	e021      	b.n	8002bf6 <HAL_ADC_PollForConversion+0xe6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d01d      	beq.n	8002bf6 <HAL_ADC_PollForConversion+0xe6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002bba:	f7fe ff1b 	bl	80019f4 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d302      	bcc.n	8002bd0 <HAL_ADC_PollForConversion+0xc0>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d112      	bne.n	8002bf6 <HAL_ADC_PollForConversion+0xe6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10b      	bne.n	8002bf6 <HAL_ADC_PollForConversion+0xe6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002be2:	f043 0204 	orr.w	r2, r3, #4
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e084      	b.n	8002d00 <HAL_ADC_PollForConversion+0x1f0>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0d6      	beq.n	8002bb2 <HAL_ADC_PollForConversion+0xa2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fe ff93 	bl	8001b40 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d06e      	beq.n	8002cfe <HAL_ADC_PollForConversion+0x1ee>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d169      	bne.n	8002cfe <HAL_ADC_PollForConversion+0x1ee>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a38      	ldr	r2, [pc, #224]	@ (8002d10 <HAL_ADC_PollForConversion+0x200>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d02e      	beq.n	8002c92 <HAL_ADC_PollForConversion+0x182>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d111      	bne.n	8002c66 <HAL_ADC_PollForConversion+0x156>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c46:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	679a      	str	r2, [r3, #120]	@ 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d105      	bne.n	8002c66 <HAL_ADC_PollForConversion+0x156>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c5e:	f043 0201 	orr.w	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	679a      	str	r2, [r3, #120]	@ 0x78
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d104      	bne.n	8002c7e <HAL_ADC_PollForConversion+0x16e>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	e03f      	b.n	8002cfe <HAL_ADC_PollForConversion+0x1ee>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d13a      	bne.n	8002cfe <HAL_ADC_PollForConversion+0x1ee>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	220c      	movs	r2, #12
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e035      	b.n	8002cfe <HAL_ADC_PollForConversion+0x1ee>
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d126      	bne.n	8002cee <HAL_ADC_PollForConversion+0x1de>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe ffe7 	bl	8001c78 <LL_ADC_REG_IsConversionOngoing>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d112      	bne.n	8002cd6 <HAL_ADC_PollForConversion+0x1c6>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 020c 	bic.w	r2, r2, #12
 8002cbe:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	f043 0201 	orr.w	r2, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	679a      	str	r2, [r3, #120]	@ 0x78
 8002cd4:	e00b      	b.n	8002cee <HAL_ADC_PollForConversion+0x1de>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cda:	f043 0220 	orr.w	r2, r3, #32
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	67da      	str	r2, [r3, #124]	@ 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	7f1b      	ldrb	r3, [r3, #28]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d103      	bne.n	8002cfe <HAL_ADC_PollForConversion+0x1ee>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	220c      	movs	r2, #12
 8002cfc:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	42028000 	.word	0x42028000
 8002d0c:	52028000 	.word	0x52028000
 8002d10:	46021000 	.word	0x46021000
 8002d14:	56021000 	.word	0x56021000
 8002d18:	0800fe54 	.word	0x0800fe54

08002d1c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0e      	ldr	r2, [pc, #56]	@ (8002d64 <HAL_ADC_GetValue+0x48>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_ADC_GetValue+0x3a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a0d      	ldr	r2, [pc, #52]	@ (8002d68 <HAL_ADC_GetValue+0x4c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00e      	beq.n	8002d56 <HAL_ADC_GetValue+0x3a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d6c <HAL_ADC_GetValue+0x50>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d009      	beq.n	8002d56 <HAL_ADC_GetValue+0x3a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a0a      	ldr	r2, [pc, #40]	@ (8002d70 <HAL_ADC_GetValue+0x54>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d004      	beq.n	8002d56 <HAL_ADC_GetValue+0x3a>
 8002d4c:	f640 2183 	movw	r1, #2691	@ 0xa83
 8002d50:	4808      	ldr	r0, [pc, #32]	@ (8002d74 <HAL_ADC_GetValue+0x58>)
 8002d52:	f7fe f94d 	bl	8000ff0 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	42028000 	.word	0x42028000
 8002d68:	52028000 	.word	0x52028000
 8002d6c:	46021000 	.word	0x46021000
 8002d70:	56021000 	.word	0x56021000
 8002d74:	0800fe54 	.word	0x0800fe54

08002d78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe ff50 	bl	8001c2a <LL_ADC_IsEnabled>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d15a      	bne.n	8002e46 <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	4b2e      	ldr	r3, [pc, #184]	@ (8002e50 <ADC_Enable+0xd8>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00d      	beq.n	8002dba <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002da2:	f043 0210 	orr.w	r2, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dae:	f043 0201 	orr.w	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e046      	b.n	8002e48 <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe ff1b 	bl	8001c02 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <ADC_Enable+0x66>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1e      	ldr	r2, [pc, #120]	@ (8002e54 <ADC_Enable+0xdc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d033      	beq.n	8002e46 <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002dde:	f7fe fe09 	bl	80019f4 <HAL_GetTick>
 8002de2:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002de4:	e028      	b.n	8002e38 <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe ff1d 	bl	8001c2a <LL_ADC_IsEnabled>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d104      	bne.n	8002e00 <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe ff01 	bl	8001c02 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e00:	f7fe fdf8 	bl	80019f4 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d914      	bls.n	8002e38 <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d00d      	beq.n	8002e38 <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e20:	f043 0210 	orr.w	r2, r3, #16
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e2c:	f043 0201 	orr.w	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e007      	b.n	8002e48 <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d1cf      	bne.n	8002de6 <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	8000003f 	.word	0x8000003f
 8002e54:	46021000 	.word	0x46021000

08002e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e68:	4b0c      	ldr	r3, [pc, #48]	@ (8002e9c <__NVIC_SetPriorityGrouping+0x44>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e74:	4013      	ands	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e8a:	4a04      	ldr	r2, [pc, #16]	@ (8002e9c <__NVIC_SetPriorityGrouping+0x44>)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	60d3      	str	r3, [r2, #12]
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea4:	4b04      	ldr	r3, [pc, #16]	@ (8002eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	f003 0307 	and.w	r3, r3, #7
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	db0b      	blt.n	8002ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	f003 021f 	and.w	r2, r3, #31
 8002ed4:	4907      	ldr	r1, [pc, #28]	@ (8002ef4 <__NVIC_EnableIRQ+0x38>)
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2001      	movs	r0, #1
 8002ede:	fa00 f202 	lsl.w	r2, r0, r2
 8002ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	e000e100 	.word	0xe000e100

08002ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	6039      	str	r1, [r7, #0]
 8002f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	db0a      	blt.n	8002f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	490c      	ldr	r1, [pc, #48]	@ (8002f44 <__NVIC_SetPriority+0x4c>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	0112      	lsls	r2, r2, #4
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f20:	e00a      	b.n	8002f38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4908      	ldr	r1, [pc, #32]	@ (8002f48 <__NVIC_SetPriority+0x50>)
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	3b04      	subs	r3, #4
 8002f30:	0112      	lsls	r2, r2, #4
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	440b      	add	r3, r1
 8002f36:	761a      	strb	r2, [r3, #24]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000e100 	.word	0xe000e100
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	@ 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f1c3 0307 	rsb	r3, r3, #7
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	bf28      	it	cs
 8002f6a:	2304      	movcs	r3, #4
 8002f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3304      	adds	r3, #4
 8002f72:	2b06      	cmp	r3, #6
 8002f74:	d902      	bls.n	8002f7c <NVIC_EncodePriority+0x30>
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3b03      	subs	r3, #3
 8002f7a:	e000      	b.n	8002f7e <NVIC_EncodePriority+0x32>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f80:	f04f 32ff 	mov.w	r2, #4294967295
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	401a      	ands	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f94:	f04f 31ff 	mov.w	r1, #4294967295
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	43d9      	mvns	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa4:	4313      	orrs	r3, r2
         );
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3724      	adds	r7, #36	@ 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b07      	cmp	r3, #7
 8002fc0:	d00f      	beq.n	8002fe2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b06      	cmp	r3, #6
 8002fc6:	d00c      	beq.n	8002fe2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d009      	beq.n	8002fe2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d006      	beq.n	8002fe2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d003      	beq.n	8002fe2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002fda:	21c0      	movs	r1, #192	@ 0xc0
 8002fdc:	4804      	ldr	r0, [pc, #16]	@ (8002ff0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002fde:	f7fe f807 	bl	8000ff0 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff ff38 	bl	8002e58 <__NVIC_SetPriorityGrouping>
}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	0800fe8c 	.word	0x0800fe8c

08002ff4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b0f      	cmp	r3, #15
 8003006:	d903      	bls.n	8003010 <HAL_NVIC_SetPriority+0x1c>
 8003008:	21d9      	movs	r1, #217	@ 0xd9
 800300a:	480e      	ldr	r0, [pc, #56]	@ (8003044 <HAL_NVIC_SetPriority+0x50>)
 800300c:	f7fd fff0 	bl	8000ff0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2b0f      	cmp	r3, #15
 8003014:	d903      	bls.n	800301e <HAL_NVIC_SetPriority+0x2a>
 8003016:	21da      	movs	r1, #218	@ 0xda
 8003018:	480a      	ldr	r0, [pc, #40]	@ (8003044 <HAL_NVIC_SetPriority+0x50>)
 800301a:	f7fd ffe9 	bl	8000ff0 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800301e:	f7ff ff3f 	bl	8002ea0 <__NVIC_GetPriorityGrouping>
 8003022:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	6978      	ldr	r0, [r7, #20]
 800302a:	f7ff ff8f 	bl	8002f4c <NVIC_EncodePriority>
 800302e:	4602      	mov	r2, r0
 8003030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff ff5e 	bl	8002ef8 <__NVIC_SetPriority>
}
 800303c:	bf00      	nop
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	0800fe8c 	.word	0x0800fe8c

08003048 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	2b00      	cmp	r3, #0
 8003058:	da03      	bge.n	8003062 <HAL_NVIC_EnableIRQ+0x1a>
 800305a:	21ee      	movs	r1, #238	@ 0xee
 800305c:	4805      	ldr	r0, [pc, #20]	@ (8003074 <HAL_NVIC_EnableIRQ+0x2c>)
 800305e:	f7fd ffc7 	bl	8000ff0 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff ff28 	bl	8002ebc <__NVIC_EnableIRQ>
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	0800fe8c 	.word	0x0800fe8c

08003078 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d00d      	beq.n	80030a2 <HAL_SYSTICK_CLKSourceConfig+0x2a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d00a      	beq.n	80030a2 <HAL_SYSTICK_CLKSourceConfig+0x2a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b04      	cmp	r3, #4
 8003090:	d007      	beq.n	80030a2 <HAL_SYSTICK_CLKSourceConfig+0x2a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d004      	beq.n	80030a2 <HAL_SYSTICK_CLKSourceConfig+0x2a>
 8003098:	f240 11af 	movw	r1, #431	@ 0x1af
 800309c:	4828      	ldr	r0, [pc, #160]	@ (8003140 <HAL_SYSTICK_CLKSourceConfig+0xc8>)
 800309e:	f7fd ffa7 	bl	8000ff0 <assert_failed>
  switch (CLKSource)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d845      	bhi.n	8003134 <HAL_SYSTICK_CLKSourceConfig+0xbc>
 80030a8:	a201      	add	r2, pc, #4	@ (adr r2, 80030b0 <HAL_SYSTICK_CLKSourceConfig+0x38>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030d3 	.word	0x080030d3
 80030b4:	080030f1 	.word	0x080030f1
 80030b8:	08003113 	.word	0x08003113
 80030bc:	08003135 	.word	0x08003135
 80030c0:	080030c5 	.word	0x080030c5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80030c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003144 <HAL_SYSTICK_CLKSourceConfig+0xcc>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003144 <HAL_SYSTICK_CLKSourceConfig+0xcc>)
 80030ca:	f043 0304 	orr.w	r3, r3, #4
 80030ce:	6013      	str	r3, [r2, #0]
      break;
 80030d0:	e031      	b.n	8003136 <HAL_SYSTICK_CLKSourceConfig+0xbe>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80030d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003144 <HAL_SYSTICK_CLKSourceConfig+0xcc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003144 <HAL_SYSTICK_CLKSourceConfig+0xcc>)
 80030d8:	f023 0304 	bic.w	r3, r3, #4
 80030dc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80030de:	4b1a      	ldr	r3, [pc, #104]	@ (8003148 <HAL_SYSTICK_CLKSourceConfig+0xd0>)
 80030e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030e4:	4a18      	ldr	r2, [pc, #96]	@ (8003148 <HAL_SYSTICK_CLKSourceConfig+0xd0>)
 80030e6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80030ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80030ee:	e022      	b.n	8003136 <HAL_SYSTICK_CLKSourceConfig+0xbe>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80030f0:	4b14      	ldr	r3, [pc, #80]	@ (8003144 <HAL_SYSTICK_CLKSourceConfig+0xcc>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a13      	ldr	r2, [pc, #76]	@ (8003144 <HAL_SYSTICK_CLKSourceConfig+0xcc>)
 80030f6:	f023 0304 	bic.w	r3, r3, #4
 80030fa:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80030fc:	4b12      	ldr	r3, [pc, #72]	@ (8003148 <HAL_SYSTICK_CLKSourceConfig+0xd0>)
 80030fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003102:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003106:	4a10      	ldr	r2, [pc, #64]	@ (8003148 <HAL_SYSTICK_CLKSourceConfig+0xd0>)
 8003108:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800310c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003110:	e011      	b.n	8003136 <HAL_SYSTICK_CLKSourceConfig+0xbe>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003112:	4b0c      	ldr	r3, [pc, #48]	@ (8003144 <HAL_SYSTICK_CLKSourceConfig+0xcc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a0b      	ldr	r2, [pc, #44]	@ (8003144 <HAL_SYSTICK_CLKSourceConfig+0xcc>)
 8003118:	f023 0304 	bic.w	r3, r3, #4
 800311c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800311e:	4b0a      	ldr	r3, [pc, #40]	@ (8003148 <HAL_SYSTICK_CLKSourceConfig+0xd0>)
 8003120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003124:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003128:	4a07      	ldr	r2, [pc, #28]	@ (8003148 <HAL_SYSTICK_CLKSourceConfig+0xd0>)
 800312a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800312e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003132:	e000      	b.n	8003136 <HAL_SYSTICK_CLKSourceConfig+0xbe>
    default:
      /* Nothing to do */
      break;
 8003134:	bf00      	nop
  }
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	0800fe8c 	.word	0x0800fe8c
 8003144:	e000e010 	.word	0xe000e010
 8003148:	46020c00 	.word	0x46020c00

0800314c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0aa      	b.n	80032b4 <HAL_CRC_Init+0x168>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a56      	ldr	r2, [pc, #344]	@ (80032bc <HAL_CRC_Init+0x170>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d008      	beq.n	800317a <HAL_CRC_Init+0x2e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a54      	ldr	r2, [pc, #336]	@ (80032c0 <HAL_CRC_Init+0x174>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d003      	beq.n	800317a <HAL_CRC_Init+0x2e>
 8003172:	2170      	movs	r1, #112	@ 0x70
 8003174:	4853      	ldr	r0, [pc, #332]	@ (80032c4 <HAL_CRC_Init+0x178>)
 8003176:	f7fd ff3b 	bl	8000ff0 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	7f5b      	ldrb	r3, [r3, #29]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d105      	bne.n	8003190 <HAL_CRC_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fbd0 	bl	8000930 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	791b      	ldrb	r3, [r3, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d007      	beq.n	80031ae <HAL_CRC_Init+0x62>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	791b      	ldrb	r3, [r3, #4]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d003      	beq.n	80031ae <HAL_CRC_Init+0x62>
 80031a6:	217e      	movs	r1, #126	@ 0x7e
 80031a8:	4846      	ldr	r0, [pc, #280]	@ (80032c4 <HAL_CRC_Init+0x178>)
 80031aa:	f7fd ff21 	bl	8000ff0 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	791b      	ldrb	r3, [r3, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10c      	bne.n	80031d0 <HAL_CRC_Init+0x84>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a43      	ldr	r2, [pc, #268]	@ (80032c8 <HAL_CRC_Init+0x17c>)
 80031bc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0218 	bic.w	r2, r2, #24
 80031cc:	609a      	str	r2, [r3, #8]
 80031ce:	e00c      	b.n	80031ea <HAL_CRC_Init+0x9e>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6899      	ldr	r1, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	461a      	mov	r2, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f876 	bl	80032cc <HAL_CRCEx_Polynomial_Set>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_CRC_Init+0x9e>
    {
      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e064      	b.n	80032b4 <HAL_CRC_Init+0x168>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	795b      	ldrb	r3, [r3, #5]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <HAL_CRC_Init+0xb6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	795b      	ldrb	r3, [r3, #5]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d003      	beq.n	8003202 <HAL_CRC_Init+0xb6>
 80031fa:	2190      	movs	r1, #144	@ 0x90
 80031fc:	4831      	ldr	r0, [pc, #196]	@ (80032c4 <HAL_CRC_Init+0x178>)
 80031fe:	f7fd fef7 	bl	8000ff0 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	795b      	ldrb	r3, [r3, #5]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d105      	bne.n	8003216 <HAL_CRC_Init+0xca>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f04f 32ff 	mov.w	r2, #4294967295
 8003212:	611a      	str	r2, [r3, #16]
 8003214:	e004      	b.n	8003220 <HAL_CRC_Init+0xd4>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6912      	ldr	r2, [r2, #16]
 800321e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00f      	beq.n	8003248 <HAL_CRC_Init+0xfc>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	2b20      	cmp	r3, #32
 800322e:	d00b      	beq.n	8003248 <HAL_CRC_Init+0xfc>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	2b40      	cmp	r3, #64	@ 0x40
 8003236:	d007      	beq.n	8003248 <HAL_CRC_Init+0xfc>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	2b60      	cmp	r3, #96	@ 0x60
 800323e:	d003      	beq.n	8003248 <HAL_CRC_Init+0xfc>
 8003240:	219c      	movs	r1, #156	@ 0x9c
 8003242:	4820      	ldr	r0, [pc, #128]	@ (80032c4 <HAL_CRC_Init+0x178>)
 8003244:	f7fd fed4 	bl	8000ff0 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <HAL_CRC_Init+0x12a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b80      	cmp	r3, #128	@ 0x80
 800326c:	d003      	beq.n	8003276 <HAL_CRC_Init+0x12a>
 800326e:	21a0      	movs	r1, #160	@ 0xa0
 8003270:	4814      	ldr	r0, [pc, #80]	@ (80032c4 <HAL_CRC_Init+0x178>)
 8003272:	f7fd febd 	bl	8000ff0 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699a      	ldr	r2, [r3, #24]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d00b      	beq.n	80032ac <HAL_CRC_Init+0x160>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d007      	beq.n	80032ac <HAL_CRC_Init+0x160>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d003      	beq.n	80032ac <HAL_CRC_Init+0x160>
 80032a4:	21a5      	movs	r1, #165	@ 0xa5
 80032a6:	4807      	ldr	r0, [pc, #28]	@ (80032c4 <HAL_CRC_Init+0x178>)
 80032a8:	f7fd fea2 	bl	8000ff0 <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40023000 	.word	0x40023000
 80032c0:	50023000 	.word	0x50023000
 80032c4:	0800fec8 	.word	0x0800fec8
 80032c8:	04c11db7 	.word	0x04c11db7

080032cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80032dc:	231f      	movs	r3, #31
 80032de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00c      	beq.n	8003300 <HAL_CRCEx_Polynomial_Set+0x34>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d009      	beq.n	8003300 <HAL_CRCEx_Polynomial_Set+0x34>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d006      	beq.n	8003300 <HAL_CRCEx_Polynomial_Set+0x34>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b18      	cmp	r3, #24
 80032f6:	d003      	beq.n	8003300 <HAL_CRCEx_Polynomial_Set+0x34>
 80032f8:	215f      	movs	r1, #95	@ 0x5f
 80032fa:	4842      	ldr	r0, [pc, #264]	@ (8003404 <HAL_CRCEx_Polynomial_Set+0x138>)
 80032fc:	f7fd fe78 	bl	8000ff0 <assert_failed>

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <HAL_CRCEx_Polynomial_Set+0x44>
  {
    status =  HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	75fb      	strb	r3, [r7, #23]
 800330e:	e063      	b.n	80033d8 <HAL_CRCEx_Polynomial_Set+0x10c>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003310:	bf00      	nop
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1e5a      	subs	r2, r3, #1
 8003316:	613a      	str	r2, [r7, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d009      	beq.n	8003330 <HAL_CRCEx_Polynomial_Set+0x64>
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_CRCEx_Polynomial_Set+0x46>
    {
    }

    switch (PolyLength)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b18      	cmp	r3, #24
 8003334:	d846      	bhi.n	80033c4 <HAL_CRCEx_Polynomial_Set+0xf8>
 8003336:	a201      	add	r2, pc, #4	@ (adr r2, 800333c <HAL_CRCEx_Polynomial_Set+0x70>)
 8003338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333c:	080033cb 	.word	0x080033cb
 8003340:	080033c5 	.word	0x080033c5
 8003344:	080033c5 	.word	0x080033c5
 8003348:	080033c5 	.word	0x080033c5
 800334c:	080033c5 	.word	0x080033c5
 8003350:	080033c5 	.word	0x080033c5
 8003354:	080033c5 	.word	0x080033c5
 8003358:	080033c5 	.word	0x080033c5
 800335c:	080033b9 	.word	0x080033b9
 8003360:	080033c5 	.word	0x080033c5
 8003364:	080033c5 	.word	0x080033c5
 8003368:	080033c5 	.word	0x080033c5
 800336c:	080033c5 	.word	0x080033c5
 8003370:	080033c5 	.word	0x080033c5
 8003374:	080033c5 	.word	0x080033c5
 8003378:	080033c5 	.word	0x080033c5
 800337c:	080033ad 	.word	0x080033ad
 8003380:	080033c5 	.word	0x080033c5
 8003384:	080033c5 	.word	0x080033c5
 8003388:	080033c5 	.word	0x080033c5
 800338c:	080033c5 	.word	0x080033c5
 8003390:	080033c5 	.word	0x080033c5
 8003394:	080033c5 	.word	0x080033c5
 8003398:	080033c5 	.word	0x080033c5
 800339c:	080033a1 	.word	0x080033a1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d913      	bls.n	80033ce <HAL_CRCEx_Polynomial_Set+0x102>
        {
          status =   HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80033aa:	e010      	b.n	80033ce <HAL_CRCEx_Polynomial_Set+0x102>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b07      	cmp	r3, #7
 80033b0:	d90f      	bls.n	80033d2 <HAL_CRCEx_Polynomial_Set+0x106>
        {
          status =   HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80033b6:	e00c      	b.n	80033d2 <HAL_CRCEx_Polynomial_Set+0x106>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	2b0f      	cmp	r3, #15
 80033bc:	d90b      	bls.n	80033d6 <HAL_CRCEx_Polynomial_Set+0x10a>
        {
          status =   HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80033c2:	e008      	b.n	80033d6 <HAL_CRCEx_Polynomial_Set+0x10a>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	75fb      	strb	r3, [r7, #23]
        break;
 80033c8:	e006      	b.n	80033d8 <HAL_CRCEx_Polynomial_Set+0x10c>
        break;
 80033ca:	bf00      	nop
 80033cc:	e004      	b.n	80033d8 <HAL_CRCEx_Polynomial_Set+0x10c>
        break;
 80033ce:	bf00      	nop
 80033d0:	e002      	b.n	80033d8 <HAL_CRCEx_Polynomial_Set+0x10c>
        break;
 80033d2:	bf00      	nop
 80033d4:	e000      	b.n	80033d8 <HAL_CRCEx_Polynomial_Set+0x10c>
        break;
 80033d6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10d      	bne.n	80033fa <HAL_CRCEx_Polynomial_Set+0x12e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f023 0118 	bic.w	r1, r3, #24
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	0800ff00 	.word	0x0800ff00

08003408 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003410:	f7fe faf0 	bl	80019f4 <HAL_GetTick>
 8003414:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e322      	b.n	8003a66 <HAL_DMA_Init+0x65e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a8c      	ldr	r2, [pc, #560]	@ (8003658 <HAL_DMA_Init+0x250>)
 8003426:	4293      	cmp	r3, r2
 8003428:	f000 80d5 	beq.w	80035d6 <HAL_DMA_Init+0x1ce>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a8a      	ldr	r2, [pc, #552]	@ (800365c <HAL_DMA_Init+0x254>)
 8003432:	4293      	cmp	r3, r2
 8003434:	f000 80cf 	beq.w	80035d6 <HAL_DMA_Init+0x1ce>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a88      	ldr	r2, [pc, #544]	@ (8003660 <HAL_DMA_Init+0x258>)
 800343e:	4293      	cmp	r3, r2
 8003440:	f000 80c9 	beq.w	80035d6 <HAL_DMA_Init+0x1ce>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a86      	ldr	r2, [pc, #536]	@ (8003664 <HAL_DMA_Init+0x25c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	f000 80c3 	beq.w	80035d6 <HAL_DMA_Init+0x1ce>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a84      	ldr	r2, [pc, #528]	@ (8003668 <HAL_DMA_Init+0x260>)
 8003456:	4293      	cmp	r3, r2
 8003458:	f000 80bd 	beq.w	80035d6 <HAL_DMA_Init+0x1ce>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a82      	ldr	r2, [pc, #520]	@ (800366c <HAL_DMA_Init+0x264>)
 8003462:	4293      	cmp	r3, r2
 8003464:	f000 80b7 	beq.w	80035d6 <HAL_DMA_Init+0x1ce>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a80      	ldr	r2, [pc, #512]	@ (8003670 <HAL_DMA_Init+0x268>)
 800346e:	4293      	cmp	r3, r2
 8003470:	f000 80b1 	beq.w	80035d6 <HAL_DMA_Init+0x1ce>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a7e      	ldr	r2, [pc, #504]	@ (8003674 <HAL_DMA_Init+0x26c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	f000 80ab 	beq.w	80035d6 <HAL_DMA_Init+0x1ce>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a7c      	ldr	r2, [pc, #496]	@ (8003678 <HAL_DMA_Init+0x270>)
 8003486:	4293      	cmp	r3, r2
 8003488:	f000 80a5 	beq.w	80035d6 <HAL_DMA_Init+0x1ce>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a7a      	ldr	r2, [pc, #488]	@ (800367c <HAL_DMA_Init+0x274>)
 8003492:	4293      	cmp	r3, r2
 8003494:	f000 809f 	beq.w	80035d6 <HAL_DMA_Init+0x1ce>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a78      	ldr	r2, [pc, #480]	@ (8003680 <HAL_DMA_Init+0x278>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	f000 8099 	beq.w	80035d6 <HAL_DMA_Init+0x1ce>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a76      	ldr	r2, [pc, #472]	@ (8003684 <HAL_DMA_Init+0x27c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	f000 8093 	beq.w	80035d6 <HAL_DMA_Init+0x1ce>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a74      	ldr	r2, [pc, #464]	@ (8003688 <HAL_DMA_Init+0x280>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	f000 808d 	beq.w	80035d6 <HAL_DMA_Init+0x1ce>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a72      	ldr	r2, [pc, #456]	@ (800368c <HAL_DMA_Init+0x284>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	f000 8087 	beq.w	80035d6 <HAL_DMA_Init+0x1ce>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a70      	ldr	r2, [pc, #448]	@ (8003690 <HAL_DMA_Init+0x288>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	f000 8081 	beq.w	80035d6 <HAL_DMA_Init+0x1ce>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003694 <HAL_DMA_Init+0x28c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d07b      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a6d      	ldr	r2, [pc, #436]	@ (8003698 <HAL_DMA_Init+0x290>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d076      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a6b      	ldr	r2, [pc, #428]	@ (800369c <HAL_DMA_Init+0x294>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d071      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a6a      	ldr	r2, [pc, #424]	@ (80036a0 <HAL_DMA_Init+0x298>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d06c      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a68      	ldr	r2, [pc, #416]	@ (80036a4 <HAL_DMA_Init+0x29c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d067      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a67      	ldr	r2, [pc, #412]	@ (80036a8 <HAL_DMA_Init+0x2a0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d062      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a65      	ldr	r2, [pc, #404]	@ (80036ac <HAL_DMA_Init+0x2a4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d05d      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a64      	ldr	r2, [pc, #400]	@ (80036b0 <HAL_DMA_Init+0x2a8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d058      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a62      	ldr	r2, [pc, #392]	@ (80036b4 <HAL_DMA_Init+0x2ac>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d053      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a61      	ldr	r2, [pc, #388]	@ (80036b8 <HAL_DMA_Init+0x2b0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d04e      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a5f      	ldr	r2, [pc, #380]	@ (80036bc <HAL_DMA_Init+0x2b4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d049      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a5e      	ldr	r2, [pc, #376]	@ (80036c0 <HAL_DMA_Init+0x2b8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d044      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a5c      	ldr	r2, [pc, #368]	@ (80036c4 <HAL_DMA_Init+0x2bc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d03f      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a5b      	ldr	r2, [pc, #364]	@ (80036c8 <HAL_DMA_Init+0x2c0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d03a      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a59      	ldr	r2, [pc, #356]	@ (80036cc <HAL_DMA_Init+0x2c4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d035      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a58      	ldr	r2, [pc, #352]	@ (80036d0 <HAL_DMA_Init+0x2c8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d030      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a56      	ldr	r2, [pc, #344]	@ (80036d4 <HAL_DMA_Init+0x2cc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d02b      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a55      	ldr	r2, [pc, #340]	@ (80036d8 <HAL_DMA_Init+0x2d0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d026      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a53      	ldr	r2, [pc, #332]	@ (80036dc <HAL_DMA_Init+0x2d4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d021      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a52      	ldr	r2, [pc, #328]	@ (80036e0 <HAL_DMA_Init+0x2d8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d01c      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a50      	ldr	r2, [pc, #320]	@ (80036e4 <HAL_DMA_Init+0x2dc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d017      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a4f      	ldr	r2, [pc, #316]	@ (80036e8 <HAL_DMA_Init+0x2e0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d012      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a4d      	ldr	r2, [pc, #308]	@ (80036ec <HAL_DMA_Init+0x2e4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00d      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a4c      	ldr	r2, [pc, #304]	@ (80036f0 <HAL_DMA_Init+0x2e8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d008      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a4a      	ldr	r2, [pc, #296]	@ (80036f4 <HAL_DMA_Init+0x2ec>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d003      	beq.n	80035d6 <HAL_DMA_Init+0x1ce>
 80035ce:	21fb      	movs	r1, #251	@ 0xfb
 80035d0:	4849      	ldr	r0, [pc, #292]	@ (80036f8 <HAL_DMA_Init+0x2f0>)
 80035d2:	f7fd fd0d 	bl	8000ff0 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00d      	beq.n	80035fa <HAL_DMA_Init+0x1f2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035e6:	d008      	beq.n	80035fa <HAL_DMA_Init+0x1f2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035f0:	d003      	beq.n	80035fa <HAL_DMA_Init+0x1f2>
 80035f2:	21fc      	movs	r1, #252	@ 0xfc
 80035f4:	4840      	ldr	r0, [pc, #256]	@ (80036f8 <HAL_DMA_Init+0x2f0>)
 80035f6:	f7fd fcfb 	bl	8000ff0 <assert_failed>
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003602:	d00c      	beq.n	800361e <HAL_DMA_Init+0x216>
  {
    assert_param(IS_DMA_REQUEST(hdma->Init.Request));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800360c:	d007      	beq.n	800361e <HAL_DMA_Init+0x216>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b71      	cmp	r3, #113	@ 0x71
 8003614:	d903      	bls.n	800361e <HAL_DMA_Init+0x216>
 8003616:	21ff      	movs	r1, #255	@ 0xff
 8003618:	4837      	ldr	r0, [pc, #220]	@ (80036f8 <HAL_DMA_Init+0x2f0>)
 800361a:	f7fd fce9 	bl	8000ff0 <assert_failed>
  }
  assert_param(IS_DMA_BLOCK_HW_REQUEST(hdma->Init.BlkHWRequest));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <HAL_DMA_Init+0x232>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800362e:	d004      	beq.n	800363a <HAL_DMA_Init+0x232>
 8003630:	f240 1101 	movw	r1, #257	@ 0x101
 8003634:	4830      	ldr	r0, [pc, #192]	@ (80036f8 <HAL_DMA_Init+0x2f0>)
 8003636:	f7fd fcdb 	bl	8000ff0 <assert_failed>
  assert_param(IS_DMA_SOURCE_INC(hdma->Init.SrcInc));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d05c      	beq.n	80036fc <HAL_DMA_Init+0x2f4>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	2b08      	cmp	r3, #8
 8003648:	d058      	beq.n	80036fc <HAL_DMA_Init+0x2f4>
 800364a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800364e:	482a      	ldr	r0, [pc, #168]	@ (80036f8 <HAL_DMA_Init+0x2f0>)
 8003650:	f7fd fcce 	bl	8000ff0 <assert_failed>
 8003654:	e052      	b.n	80036fc <HAL_DMA_Init+0x2f4>
 8003656:	bf00      	nop
 8003658:	40020050 	.word	0x40020050
 800365c:	50020050 	.word	0x50020050
 8003660:	400200d0 	.word	0x400200d0
 8003664:	500200d0 	.word	0x500200d0
 8003668:	40020150 	.word	0x40020150
 800366c:	50020150 	.word	0x50020150
 8003670:	400201d0 	.word	0x400201d0
 8003674:	500201d0 	.word	0x500201d0
 8003678:	40020250 	.word	0x40020250
 800367c:	50020250 	.word	0x50020250
 8003680:	400202d0 	.word	0x400202d0
 8003684:	500202d0 	.word	0x500202d0
 8003688:	40020350 	.word	0x40020350
 800368c:	50020350 	.word	0x50020350
 8003690:	400203d0 	.word	0x400203d0
 8003694:	500203d0 	.word	0x500203d0
 8003698:	40020450 	.word	0x40020450
 800369c:	50020450 	.word	0x50020450
 80036a0:	400204d0 	.word	0x400204d0
 80036a4:	500204d0 	.word	0x500204d0
 80036a8:	40020550 	.word	0x40020550
 80036ac:	50020550 	.word	0x50020550
 80036b0:	400205d0 	.word	0x400205d0
 80036b4:	500205d0 	.word	0x500205d0
 80036b8:	40020650 	.word	0x40020650
 80036bc:	50020650 	.word	0x50020650
 80036c0:	400206d0 	.word	0x400206d0
 80036c4:	500206d0 	.word	0x500206d0
 80036c8:	40020750 	.word	0x40020750
 80036cc:	50020750 	.word	0x50020750
 80036d0:	400207d0 	.word	0x400207d0
 80036d4:	500207d0 	.word	0x500207d0
 80036d8:	46025050 	.word	0x46025050
 80036dc:	56025050 	.word	0x56025050
 80036e0:	460250d0 	.word	0x460250d0
 80036e4:	560250d0 	.word	0x560250d0
 80036e8:	46025150 	.word	0x46025150
 80036ec:	56025150 	.word	0x56025150
 80036f0:	460251d0 	.word	0x460251d0
 80036f4:	560251d0 	.word	0x560251d0
 80036f8:	0800ff3c 	.word	0x0800ff3c
  assert_param(IS_DMA_DESTINATION_INC(hdma->Init.DestInc));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d009      	beq.n	8003718 <HAL_DMA_Init+0x310>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800370c:	d004      	beq.n	8003718 <HAL_DMA_Init+0x310>
 800370e:	f240 1103 	movw	r1, #259	@ 0x103
 8003712:	4884      	ldr	r0, [pc, #528]	@ (8003924 <HAL_DMA_Init+0x51c>)
 8003714:	f7fd fc6c 	bl	8000ff0 <assert_failed>
  assert_param(IS_DMA_SOURCE_DATA_WIDTH(hdma->Init.SrcDataWidth));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00c      	beq.n	800373a <HAL_DMA_Init+0x332>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d008      	beq.n	800373a <HAL_DMA_Init+0x332>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d004      	beq.n	800373a <HAL_DMA_Init+0x332>
 8003730:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8003734:	487b      	ldr	r0, [pc, #492]	@ (8003924 <HAL_DMA_Init+0x51c>)
 8003736:	f7fd fc5b 	bl	8000ff0 <assert_failed>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00e      	beq.n	8003760 <HAL_DMA_Init+0x358>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800374a:	d009      	beq.n	8003760 <HAL_DMA_Init+0x358>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003754:	d004      	beq.n	8003760 <HAL_DMA_Init+0x358>
 8003756:	f240 1105 	movw	r1, #261	@ 0x105
 800375a:	4872      	ldr	r0, [pc, #456]	@ (8003924 <HAL_DMA_Init+0x51c>)
 800375c:	f7fd fc48 	bl	8000ff0 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d013      	beq.n	8003790 <HAL_DMA_Init+0x388>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003770:	d00e      	beq.n	8003790 <HAL_DMA_Init+0x388>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800377a:	d009      	beq.n	8003790 <HAL_DMA_Init+0x388>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003784:	d004      	beq.n	8003790 <HAL_DMA_Init+0x388>
 8003786:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800378a:	4866      	ldr	r0, [pc, #408]	@ (8003924 <HAL_DMA_Init+0x51c>)
 800378c:	f7fd fc30 	bl	8000ff0 <assert_failed>
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003794:	2b00      	cmp	r3, #0
 8003796:	d013      	beq.n	80037c0 <HAL_DMA_Init+0x3b8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a0:	d00e      	beq.n	80037c0 <HAL_DMA_Init+0x3b8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037aa:	d009      	beq.n	80037c0 <HAL_DMA_Init+0x3b8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80037b4:	d004      	beq.n	80037c0 <HAL_DMA_Init+0x3b8>
 80037b6:	f240 1107 	movw	r1, #263	@ 0x107
 80037ba:	485a      	ldr	r0, [pc, #360]	@ (8003924 <HAL_DMA_Init+0x51c>)
 80037bc:	f7fd fc18 	bl	8000ff0 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d004      	beq.n	80037d2 <HAL_DMA_Init+0x3ca>
 80037c8:	f44f 7184 	mov.w	r1, #264	@ 0x108
 80037cc:	4855      	ldr	r0, [pc, #340]	@ (8003924 <HAL_DMA_Init+0x51c>)
 80037ce:	f7fd fc0f 	bl	8000ff0 <assert_failed>
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a54      	ldr	r2, [pc, #336]	@ (8003928 <HAL_DMA_Init+0x520>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	f000 80a0 	beq.w	800391e <HAL_DMA_Init+0x516>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a52      	ldr	r2, [pc, #328]	@ (800392c <HAL_DMA_Init+0x524>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	f000 809a 	beq.w	800391e <HAL_DMA_Init+0x516>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a50      	ldr	r2, [pc, #320]	@ (8003930 <HAL_DMA_Init+0x528>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	f000 8094 	beq.w	800391e <HAL_DMA_Init+0x516>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a4e      	ldr	r2, [pc, #312]	@ (8003934 <HAL_DMA_Init+0x52c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	f000 808e 	beq.w	800391e <HAL_DMA_Init+0x516>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a4c      	ldr	r2, [pc, #304]	@ (8003938 <HAL_DMA_Init+0x530>)
 8003808:	4293      	cmp	r3, r2
 800380a:	f000 8088 	beq.w	800391e <HAL_DMA_Init+0x516>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a4a      	ldr	r2, [pc, #296]	@ (800393c <HAL_DMA_Init+0x534>)
 8003814:	4293      	cmp	r3, r2
 8003816:	f000 8082 	beq.w	800391e <HAL_DMA_Init+0x516>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a48      	ldr	r2, [pc, #288]	@ (8003940 <HAL_DMA_Init+0x538>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d07c      	beq.n	800391e <HAL_DMA_Init+0x516>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a46      	ldr	r2, [pc, #280]	@ (8003944 <HAL_DMA_Init+0x53c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d077      	beq.n	800391e <HAL_DMA_Init+0x516>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a45      	ldr	r2, [pc, #276]	@ (8003948 <HAL_DMA_Init+0x540>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d072      	beq.n	800391e <HAL_DMA_Init+0x516>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a43      	ldr	r2, [pc, #268]	@ (800394c <HAL_DMA_Init+0x544>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d06d      	beq.n	800391e <HAL_DMA_Init+0x516>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a42      	ldr	r2, [pc, #264]	@ (8003950 <HAL_DMA_Init+0x548>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d068      	beq.n	800391e <HAL_DMA_Init+0x516>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a40      	ldr	r2, [pc, #256]	@ (8003954 <HAL_DMA_Init+0x54c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d063      	beq.n	800391e <HAL_DMA_Init+0x516>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a3f      	ldr	r2, [pc, #252]	@ (8003958 <HAL_DMA_Init+0x550>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d05e      	beq.n	800391e <HAL_DMA_Init+0x516>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a3d      	ldr	r2, [pc, #244]	@ (800395c <HAL_DMA_Init+0x554>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d059      	beq.n	800391e <HAL_DMA_Init+0x516>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a3c      	ldr	r2, [pc, #240]	@ (8003960 <HAL_DMA_Init+0x558>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d054      	beq.n	800391e <HAL_DMA_Init+0x516>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a3a      	ldr	r2, [pc, #232]	@ (8003964 <HAL_DMA_Init+0x55c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d04f      	beq.n	800391e <HAL_DMA_Init+0x516>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a39      	ldr	r2, [pc, #228]	@ (8003968 <HAL_DMA_Init+0x560>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d04a      	beq.n	800391e <HAL_DMA_Init+0x516>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a37      	ldr	r2, [pc, #220]	@ (800396c <HAL_DMA_Init+0x564>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d045      	beq.n	800391e <HAL_DMA_Init+0x516>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a36      	ldr	r2, [pc, #216]	@ (8003970 <HAL_DMA_Init+0x568>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d040      	beq.n	800391e <HAL_DMA_Init+0x516>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a34      	ldr	r2, [pc, #208]	@ (8003974 <HAL_DMA_Init+0x56c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d03b      	beq.n	800391e <HAL_DMA_Init+0x516>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a33      	ldr	r2, [pc, #204]	@ (8003978 <HAL_DMA_Init+0x570>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d036      	beq.n	800391e <HAL_DMA_Init+0x516>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a31      	ldr	r2, [pc, #196]	@ (800397c <HAL_DMA_Init+0x574>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d031      	beq.n	800391e <HAL_DMA_Init+0x516>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a30      	ldr	r2, [pc, #192]	@ (8003980 <HAL_DMA_Init+0x578>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d02c      	beq.n	800391e <HAL_DMA_Init+0x516>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a2e      	ldr	r2, [pc, #184]	@ (8003984 <HAL_DMA_Init+0x57c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d027      	beq.n	800391e <HAL_DMA_Init+0x516>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003988 <HAL_DMA_Init+0x580>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d022      	beq.n	800391e <HAL_DMA_Init+0x516>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a2b      	ldr	r2, [pc, #172]	@ (800398c <HAL_DMA_Init+0x584>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01d      	beq.n	800391e <HAL_DMA_Init+0x516>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a2a      	ldr	r2, [pc, #168]	@ (8003990 <HAL_DMA_Init+0x588>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d018      	beq.n	800391e <HAL_DMA_Init+0x516>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a28      	ldr	r2, [pc, #160]	@ (8003994 <HAL_DMA_Init+0x58c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <HAL_DMA_Init+0x516>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a27      	ldr	r2, [pc, #156]	@ (8003998 <HAL_DMA_Init+0x590>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00e      	beq.n	800391e <HAL_DMA_Init+0x516>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a25      	ldr	r2, [pc, #148]	@ (800399c <HAL_DMA_Init+0x594>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d009      	beq.n	800391e <HAL_DMA_Init+0x516>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a24      	ldr	r2, [pc, #144]	@ (80039a0 <HAL_DMA_Init+0x598>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d004      	beq.n	800391e <HAL_DMA_Init+0x516>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a22      	ldr	r2, [pc, #136]	@ (80039a4 <HAL_DMA_Init+0x59c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d144      	bne.n	80039a8 <HAL_DMA_Init+0x5a0>
 800391e:	2301      	movs	r3, #1
 8003920:	e043      	b.n	80039aa <HAL_DMA_Init+0x5a2>
 8003922:	bf00      	nop
 8003924:	0800ff3c 	.word	0x0800ff3c
 8003928:	40020050 	.word	0x40020050
 800392c:	50020050 	.word	0x50020050
 8003930:	400200d0 	.word	0x400200d0
 8003934:	500200d0 	.word	0x500200d0
 8003938:	40020150 	.word	0x40020150
 800393c:	50020150 	.word	0x50020150
 8003940:	400201d0 	.word	0x400201d0
 8003944:	500201d0 	.word	0x500201d0
 8003948:	40020250 	.word	0x40020250
 800394c:	50020250 	.word	0x50020250
 8003950:	400202d0 	.word	0x400202d0
 8003954:	500202d0 	.word	0x500202d0
 8003958:	40020350 	.word	0x40020350
 800395c:	50020350 	.word	0x50020350
 8003960:	400203d0 	.word	0x400203d0
 8003964:	500203d0 	.word	0x500203d0
 8003968:	40020450 	.word	0x40020450
 800396c:	50020450 	.word	0x50020450
 8003970:	400204d0 	.word	0x400204d0
 8003974:	500204d0 	.word	0x500204d0
 8003978:	40020550 	.word	0x40020550
 800397c:	50020550 	.word	0x50020550
 8003980:	400205d0 	.word	0x400205d0
 8003984:	500205d0 	.word	0x500205d0
 8003988:	40020650 	.word	0x40020650
 800398c:	50020650 	.word	0x50020650
 8003990:	400206d0 	.word	0x400206d0
 8003994:	500206d0 	.word	0x500206d0
 8003998:	40020750 	.word	0x40020750
 800399c:	50020750 	.word	0x50020750
 80039a0:	400207d0 	.word	0x400207d0
 80039a4:	500207d0 	.word	0x500207d0
 80039a8:	2300      	movs	r3, #0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d024      	beq.n	80039f8 <HAL_DMA_Init+0x5f0>
  {
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.SrcBurstLength));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_DMA_Init+0x5b6>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ba:	2b40      	cmp	r3, #64	@ 0x40
 80039bc:	d904      	bls.n	80039c8 <HAL_DMA_Init+0x5c0>
 80039be:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80039c2:	482b      	ldr	r0, [pc, #172]	@ (8003a70 <HAL_DMA_Init+0x668>)
 80039c4:	f7fd fb14 	bl	8000ff0 <assert_failed>
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_DMA_Init+0x5d0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d4:	2b40      	cmp	r3, #64	@ 0x40
 80039d6:	d904      	bls.n	80039e2 <HAL_DMA_Init+0x5da>
 80039d8:	f240 110d 	movw	r1, #269	@ 0x10d
 80039dc:	4824      	ldr	r0, [pc, #144]	@ (8003a70 <HAL_DMA_Init+0x668>)
 80039de:	f7fd fb07 	bl	8000ff0 <assert_failed>
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e6:	f023 2340 	bic.w	r3, r3, #1073758208	@ 0x40004000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d004      	beq.n	80039f8 <HAL_DMA_Init+0x5f0>
 80039ee:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80039f2:	481f      	ldr	r0, [pc, #124]	@ (8003a70 <HAL_DMA_Init+0x668>)
 80039f4:	f7fd fafc 	bl	8000ff0 <assert_failed>
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0206 	orr.w	r2, r2, #6
 8003a16:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003a18:	e00f      	b.n	8003a3a <HAL_DMA_Init+0x632>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003a1a:	f7fd ffeb 	bl	80019f4 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b05      	cmp	r3, #5
 8003a26:	d908      	bls.n	8003a3a <HAL_DMA_Init+0x632>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2210      	movs	r2, #16
 8003a2c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2203      	movs	r2, #3
 8003a32:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e015      	b.n	8003a66 <HAL_DMA_Init+0x65e>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e8      	bne.n	8003a1a <HAL_DMA_Init+0x612>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f90f 	bl	8003c6c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	0800ff3c 	.word	0x0800ff3c

08003a74 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003a7c:	f7fd ffba 	bl	80019f4 <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e06b      	b.n	8003b64 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d008      	beq.n	8003aaa <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e05c      	b.n	8003b64 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695a      	ldr	r2, [r3, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0204 	orr.w	r2, r2, #4
 8003ab8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2205      	movs	r2, #5
 8003abe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003ac2:	e020      	b.n	8003b06 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003ac4:	f7fd ff96 	bl	80019f4 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b05      	cmp	r3, #5
 8003ad0:	d919      	bls.n	8003b06 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad6:	f043 0210 	orr.w	r2, r3, #16
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af6:	2201      	movs	r2, #1
 8003af8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e02e      	b.n	8003b64 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0d7      	beq.n	8003ac4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0202 	orr.w	r2, r2, #2
 8003b22:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2204      	movs	r2, #4
 8003b28:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003b34:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b4e:	2201      	movs	r2, #1
 8003b50:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2200      	movs	r2, #0
 8003b58:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e019      	b.n	8003bb2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d004      	beq.n	8003b94 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e00e      	b.n	8003bb2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2204      	movs	r2, #4
 8003b98:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003baa:	f043 0304 	orr.w	r3, r3, #4
 8003bae:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003bcc:	b2db      	uxtb	r3, r3
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e036      	b.n	8003c5e <HAL_DMA_ConfigChannelAttributes+0x82>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2b11      	cmp	r3, #17
 8003bf4:	d007      	beq.n	8003c06 <HAL_DMA_ConfigChannelAttributes+0x2a>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d004      	beq.n	8003c06 <HAL_DMA_ConfigChannelAttributes+0x2a>
 8003bfc:	f240 5161 	movw	r1, #1377	@ 0x561
 8003c00:	4819      	ldr	r0, [pc, #100]	@ (8003c68 <HAL_DMA_ConfigChannelAttributes+0x8c>)
 8003c02:	f7fd f9f5 	bl	8000ff0 <assert_failed>

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003c0e:	f023 030f 	bic.w	r3, r3, #15
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1c:	3b50      	subs	r3, #80	@ 0x50
 8003c1e:	09db      	lsrs	r3, r3, #7
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	2201      	movs	r2, #1
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d012      	beq.n	8003c5c <HAL_DMA_ConfigChannelAttributes+0x80>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	f003 0311 	and.w	r3, r3, #17
 8003c3c:	2b11      	cmp	r3, #17
 8003c3e:	d106      	bne.n	8003c4e <HAL_DMA_ConfigChannelAttributes+0x72>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	e006      	b.n	8003c5c <HAL_DMA_ConfigChannelAttributes+0x80>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	401a      	ands	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	0800ff3c 	.word	0x0800ff3c

08003c6c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a53      	ldr	r2, [pc, #332]	@ (8003df8 <DMA_Init+0x18c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	f000 80a0 	beq.w	8003df2 <DMA_Init+0x186>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a51      	ldr	r2, [pc, #324]	@ (8003dfc <DMA_Init+0x190>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	f000 809a 	beq.w	8003df2 <DMA_Init+0x186>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a4f      	ldr	r2, [pc, #316]	@ (8003e00 <DMA_Init+0x194>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	f000 8094 	beq.w	8003df2 <DMA_Init+0x186>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a4d      	ldr	r2, [pc, #308]	@ (8003e04 <DMA_Init+0x198>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	f000 808e 	beq.w	8003df2 <DMA_Init+0x186>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a4b      	ldr	r2, [pc, #300]	@ (8003e08 <DMA_Init+0x19c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	f000 8088 	beq.w	8003df2 <DMA_Init+0x186>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a49      	ldr	r2, [pc, #292]	@ (8003e0c <DMA_Init+0x1a0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	f000 8082 	beq.w	8003df2 <DMA_Init+0x186>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a47      	ldr	r2, [pc, #284]	@ (8003e10 <DMA_Init+0x1a4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d07c      	beq.n	8003df2 <DMA_Init+0x186>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a45      	ldr	r2, [pc, #276]	@ (8003e14 <DMA_Init+0x1a8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d077      	beq.n	8003df2 <DMA_Init+0x186>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a44      	ldr	r2, [pc, #272]	@ (8003e18 <DMA_Init+0x1ac>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d072      	beq.n	8003df2 <DMA_Init+0x186>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a42      	ldr	r2, [pc, #264]	@ (8003e1c <DMA_Init+0x1b0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d06d      	beq.n	8003df2 <DMA_Init+0x186>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a41      	ldr	r2, [pc, #260]	@ (8003e20 <DMA_Init+0x1b4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d068      	beq.n	8003df2 <DMA_Init+0x186>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a3f      	ldr	r2, [pc, #252]	@ (8003e24 <DMA_Init+0x1b8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d063      	beq.n	8003df2 <DMA_Init+0x186>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a3e      	ldr	r2, [pc, #248]	@ (8003e28 <DMA_Init+0x1bc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d05e      	beq.n	8003df2 <DMA_Init+0x186>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a3c      	ldr	r2, [pc, #240]	@ (8003e2c <DMA_Init+0x1c0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d059      	beq.n	8003df2 <DMA_Init+0x186>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a3b      	ldr	r2, [pc, #236]	@ (8003e30 <DMA_Init+0x1c4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d054      	beq.n	8003df2 <DMA_Init+0x186>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a39      	ldr	r2, [pc, #228]	@ (8003e34 <DMA_Init+0x1c8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d04f      	beq.n	8003df2 <DMA_Init+0x186>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a38      	ldr	r2, [pc, #224]	@ (8003e38 <DMA_Init+0x1cc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d04a      	beq.n	8003df2 <DMA_Init+0x186>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a36      	ldr	r2, [pc, #216]	@ (8003e3c <DMA_Init+0x1d0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d045      	beq.n	8003df2 <DMA_Init+0x186>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a35      	ldr	r2, [pc, #212]	@ (8003e40 <DMA_Init+0x1d4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d040      	beq.n	8003df2 <DMA_Init+0x186>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a33      	ldr	r2, [pc, #204]	@ (8003e44 <DMA_Init+0x1d8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d03b      	beq.n	8003df2 <DMA_Init+0x186>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a32      	ldr	r2, [pc, #200]	@ (8003e48 <DMA_Init+0x1dc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d036      	beq.n	8003df2 <DMA_Init+0x186>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a30      	ldr	r2, [pc, #192]	@ (8003e4c <DMA_Init+0x1e0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d031      	beq.n	8003df2 <DMA_Init+0x186>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a2f      	ldr	r2, [pc, #188]	@ (8003e50 <DMA_Init+0x1e4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d02c      	beq.n	8003df2 <DMA_Init+0x186>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a2d      	ldr	r2, [pc, #180]	@ (8003e54 <DMA_Init+0x1e8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d027      	beq.n	8003df2 <DMA_Init+0x186>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a2c      	ldr	r2, [pc, #176]	@ (8003e58 <DMA_Init+0x1ec>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d022      	beq.n	8003df2 <DMA_Init+0x186>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a2a      	ldr	r2, [pc, #168]	@ (8003e5c <DMA_Init+0x1f0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01d      	beq.n	8003df2 <DMA_Init+0x186>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a29      	ldr	r2, [pc, #164]	@ (8003e60 <DMA_Init+0x1f4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d018      	beq.n	8003df2 <DMA_Init+0x186>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a27      	ldr	r2, [pc, #156]	@ (8003e64 <DMA_Init+0x1f8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <DMA_Init+0x186>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a26      	ldr	r2, [pc, #152]	@ (8003e68 <DMA_Init+0x1fc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00e      	beq.n	8003df2 <DMA_Init+0x186>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a24      	ldr	r2, [pc, #144]	@ (8003e6c <DMA_Init+0x200>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d009      	beq.n	8003df2 <DMA_Init+0x186>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a23      	ldr	r2, [pc, #140]	@ (8003e70 <DMA_Init+0x204>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d004      	beq.n	8003df2 <DMA_Init+0x186>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a21      	ldr	r2, [pc, #132]	@ (8003e74 <DMA_Init+0x208>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d142      	bne.n	8003e78 <DMA_Init+0x20c>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e041      	b.n	8003e7a <DMA_Init+0x20e>
 8003df6:	bf00      	nop
 8003df8:	40020050 	.word	0x40020050
 8003dfc:	50020050 	.word	0x50020050
 8003e00:	400200d0 	.word	0x400200d0
 8003e04:	500200d0 	.word	0x500200d0
 8003e08:	40020150 	.word	0x40020150
 8003e0c:	50020150 	.word	0x50020150
 8003e10:	400201d0 	.word	0x400201d0
 8003e14:	500201d0 	.word	0x500201d0
 8003e18:	40020250 	.word	0x40020250
 8003e1c:	50020250 	.word	0x50020250
 8003e20:	400202d0 	.word	0x400202d0
 8003e24:	500202d0 	.word	0x500202d0
 8003e28:	40020350 	.word	0x40020350
 8003e2c:	50020350 	.word	0x50020350
 8003e30:	400203d0 	.word	0x400203d0
 8003e34:	500203d0 	.word	0x500203d0
 8003e38:	40020450 	.word	0x40020450
 8003e3c:	50020450 	.word	0x50020450
 8003e40:	400204d0 	.word	0x400204d0
 8003e44:	500204d0 	.word	0x500204d0
 8003e48:	40020550 	.word	0x40020550
 8003e4c:	50020550 	.word	0x50020550
 8003e50:	400205d0 	.word	0x400205d0
 8003e54:	500205d0 	.word	0x500205d0
 8003e58:	40020650 	.word	0x40020650
 8003e5c:	50020650 	.word	0x50020650
 8003e60:	400206d0 	.word	0x400206d0
 8003e64:	500206d0 	.word	0x500206d0
 8003e68:	40020750 	.word	0x40020750
 8003e6c:	50020750 	.word	0x50020750
 8003e70:	400207d0 	.word	0x400207d0
 8003e74:	500207d0 	.word	0x500207d0
 8003e78:	2300      	movs	r3, #0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d012      	beq.n	8003ea4 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e86:	3b01      	subs	r3, #1
 8003e88:	051b      	lsls	r3, r3, #20
 8003e8a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003e8e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	3b01      	subs	r3, #1
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003e9c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eaa:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed6:	f040 80b0 	bne.w	800403a <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a82      	ldr	r2, [pc, #520]	@ (80040e8 <DMA_Init+0x47c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	f000 80a0 	beq.w	8004026 <DMA_Init+0x3ba>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a80      	ldr	r2, [pc, #512]	@ (80040ec <DMA_Init+0x480>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	f000 809a 	beq.w	8004026 <DMA_Init+0x3ba>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a7e      	ldr	r2, [pc, #504]	@ (80040f0 <DMA_Init+0x484>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	f000 8094 	beq.w	8004026 <DMA_Init+0x3ba>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a7c      	ldr	r2, [pc, #496]	@ (80040f4 <DMA_Init+0x488>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	f000 808e 	beq.w	8004026 <DMA_Init+0x3ba>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a7a      	ldr	r2, [pc, #488]	@ (80040f8 <DMA_Init+0x48c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	f000 8088 	beq.w	8004026 <DMA_Init+0x3ba>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a78      	ldr	r2, [pc, #480]	@ (80040fc <DMA_Init+0x490>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	f000 8082 	beq.w	8004026 <DMA_Init+0x3ba>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a76      	ldr	r2, [pc, #472]	@ (8004100 <DMA_Init+0x494>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d07c      	beq.n	8004026 <DMA_Init+0x3ba>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a74      	ldr	r2, [pc, #464]	@ (8004104 <DMA_Init+0x498>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d077      	beq.n	8004026 <DMA_Init+0x3ba>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a73      	ldr	r2, [pc, #460]	@ (8004108 <DMA_Init+0x49c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d072      	beq.n	8004026 <DMA_Init+0x3ba>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a71      	ldr	r2, [pc, #452]	@ (800410c <DMA_Init+0x4a0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d06d      	beq.n	8004026 <DMA_Init+0x3ba>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a70      	ldr	r2, [pc, #448]	@ (8004110 <DMA_Init+0x4a4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d068      	beq.n	8004026 <DMA_Init+0x3ba>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a6e      	ldr	r2, [pc, #440]	@ (8004114 <DMA_Init+0x4a8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d063      	beq.n	8004026 <DMA_Init+0x3ba>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a6d      	ldr	r2, [pc, #436]	@ (8004118 <DMA_Init+0x4ac>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d05e      	beq.n	8004026 <DMA_Init+0x3ba>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800411c <DMA_Init+0x4b0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d059      	beq.n	8004026 <DMA_Init+0x3ba>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a6a      	ldr	r2, [pc, #424]	@ (8004120 <DMA_Init+0x4b4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d054      	beq.n	8004026 <DMA_Init+0x3ba>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a68      	ldr	r2, [pc, #416]	@ (8004124 <DMA_Init+0x4b8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d04f      	beq.n	8004026 <DMA_Init+0x3ba>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a67      	ldr	r2, [pc, #412]	@ (8004128 <DMA_Init+0x4bc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d04a      	beq.n	8004026 <DMA_Init+0x3ba>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a65      	ldr	r2, [pc, #404]	@ (800412c <DMA_Init+0x4c0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d045      	beq.n	8004026 <DMA_Init+0x3ba>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a64      	ldr	r2, [pc, #400]	@ (8004130 <DMA_Init+0x4c4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d040      	beq.n	8004026 <DMA_Init+0x3ba>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a62      	ldr	r2, [pc, #392]	@ (8004134 <DMA_Init+0x4c8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d03b      	beq.n	8004026 <DMA_Init+0x3ba>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a61      	ldr	r2, [pc, #388]	@ (8004138 <DMA_Init+0x4cc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d036      	beq.n	8004026 <DMA_Init+0x3ba>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a5f      	ldr	r2, [pc, #380]	@ (800413c <DMA_Init+0x4d0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d031      	beq.n	8004026 <DMA_Init+0x3ba>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a5e      	ldr	r2, [pc, #376]	@ (8004140 <DMA_Init+0x4d4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d02c      	beq.n	8004026 <DMA_Init+0x3ba>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a5c      	ldr	r2, [pc, #368]	@ (8004144 <DMA_Init+0x4d8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d027      	beq.n	8004026 <DMA_Init+0x3ba>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a5b      	ldr	r2, [pc, #364]	@ (8004148 <DMA_Init+0x4dc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d022      	beq.n	8004026 <DMA_Init+0x3ba>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a59      	ldr	r2, [pc, #356]	@ (800414c <DMA_Init+0x4e0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d01d      	beq.n	8004026 <DMA_Init+0x3ba>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a58      	ldr	r2, [pc, #352]	@ (8004150 <DMA_Init+0x4e4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d018      	beq.n	8004026 <DMA_Init+0x3ba>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a56      	ldr	r2, [pc, #344]	@ (8004154 <DMA_Init+0x4e8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <DMA_Init+0x3ba>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a55      	ldr	r2, [pc, #340]	@ (8004158 <DMA_Init+0x4ec>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00e      	beq.n	8004026 <DMA_Init+0x3ba>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a53      	ldr	r2, [pc, #332]	@ (800415c <DMA_Init+0x4f0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d009      	beq.n	8004026 <DMA_Init+0x3ba>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a52      	ldr	r2, [pc, #328]	@ (8004160 <DMA_Init+0x4f4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d004      	beq.n	8004026 <DMA_Init+0x3ba>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a50      	ldr	r2, [pc, #320]	@ (8004164 <DMA_Init+0x4f8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d101      	bne.n	800402a <DMA_Init+0x3be>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <DMA_Init+0x3c0>
 800402a:	2300      	movs	r3, #0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00d      	beq.n	800404c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	e008      	b.n	800404c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004042:	d103      	bne.n	800404c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800404a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004052:	4b45      	ldr	r3, [pc, #276]	@ (8004168 <DMA_Init+0x4fc>)
 8004054:	4013      	ands	r3, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	68f9      	ldr	r1, [r7, #12]
 800405c:	430b      	orrs	r3, r1
 800405e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2200      	movs	r2, #0
 8004066:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a36      	ldr	r2, [pc, #216]	@ (8004148 <DMA_Init+0x4dc>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d022      	beq.n	80040b8 <DMA_Init+0x44c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a35      	ldr	r2, [pc, #212]	@ (800414c <DMA_Init+0x4e0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d01d      	beq.n	80040b8 <DMA_Init+0x44c>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a33      	ldr	r2, [pc, #204]	@ (8004150 <DMA_Init+0x4e4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d018      	beq.n	80040b8 <DMA_Init+0x44c>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a32      	ldr	r2, [pc, #200]	@ (8004154 <DMA_Init+0x4e8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d013      	beq.n	80040b8 <DMA_Init+0x44c>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a30      	ldr	r2, [pc, #192]	@ (8004158 <DMA_Init+0x4ec>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00e      	beq.n	80040b8 <DMA_Init+0x44c>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a2f      	ldr	r2, [pc, #188]	@ (800415c <DMA_Init+0x4f0>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d009      	beq.n	80040b8 <DMA_Init+0x44c>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004160 <DMA_Init+0x4f4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d004      	beq.n	80040b8 <DMA_Init+0x44c>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004164 <DMA_Init+0x4f8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d101      	bne.n	80040bc <DMA_Init+0x450>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <DMA_Init+0x452>
 80040bc:	2300      	movs	r3, #0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2200      	movs	r2, #0
 80040c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2200      	movs	r2, #0
 80040d0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2200      	movs	r2, #0
 80040d8:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80040da:	bf00      	nop
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40020050 	.word	0x40020050
 80040ec:	50020050 	.word	0x50020050
 80040f0:	400200d0 	.word	0x400200d0
 80040f4:	500200d0 	.word	0x500200d0
 80040f8:	40020150 	.word	0x40020150
 80040fc:	50020150 	.word	0x50020150
 8004100:	400201d0 	.word	0x400201d0
 8004104:	500201d0 	.word	0x500201d0
 8004108:	40020250 	.word	0x40020250
 800410c:	50020250 	.word	0x50020250
 8004110:	400202d0 	.word	0x400202d0
 8004114:	500202d0 	.word	0x500202d0
 8004118:	40020350 	.word	0x40020350
 800411c:	50020350 	.word	0x50020350
 8004120:	400203d0 	.word	0x400203d0
 8004124:	500203d0 	.word	0x500203d0
 8004128:	40020450 	.word	0x40020450
 800412c:	50020450 	.word	0x50020450
 8004130:	400204d0 	.word	0x400204d0
 8004134:	500204d0 	.word	0x500204d0
 8004138:	40020550 	.word	0x40020550
 800413c:	50020550 	.word	0x50020550
 8004140:	400205d0 	.word	0x400205d0
 8004144:	500205d0 	.word	0x500205d0
 8004148:	40020650 	.word	0x40020650
 800414c:	50020650 	.word	0x50020650
 8004150:	400206d0 	.word	0x400206d0
 8004154:	500206d0 	.word	0x500206d0
 8004158:	40020750 	.word	0x40020750
 800415c:	50020750 	.word	0x50020750
 8004160:	400207d0 	.word	0x400207d0
 8004164:	500207d0 	.word	0x500207d0
 8004168:	3cc03180 	.word	0x3cc03180

0800416c <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	0c1b      	lsrs	r3, r3, #16
 800417c:	b2db      	uxtb	r3, r3
}
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
	...

0800418c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]
  GPIO_TypeDef  *p_gpio;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a87      	ldr	r2, [pc, #540]	@ (80043bc <HAL_GPIO_Init+0x230>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d04f      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a86      	ldr	r2, [pc, #536]	@ (80043c0 <HAL_GPIO_Init+0x234>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d04b      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a85      	ldr	r2, [pc, #532]	@ (80043c4 <HAL_GPIO_Init+0x238>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d047      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a84      	ldr	r2, [pc, #528]	@ (80043c8 <HAL_GPIO_Init+0x23c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d043      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a83      	ldr	r2, [pc, #524]	@ (80043cc <HAL_GPIO_Init+0x240>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d03f      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a82      	ldr	r2, [pc, #520]	@ (80043d0 <HAL_GPIO_Init+0x244>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d03b      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a81      	ldr	r2, [pc, #516]	@ (80043d4 <HAL_GPIO_Init+0x248>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d037      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a80      	ldr	r2, [pc, #512]	@ (80043d8 <HAL_GPIO_Init+0x24c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d033      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a7f      	ldr	r2, [pc, #508]	@ (80043dc <HAL_GPIO_Init+0x250>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d02f      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a7e      	ldr	r2, [pc, #504]	@ (80043e0 <HAL_GPIO_Init+0x254>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d02b      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a7d      	ldr	r2, [pc, #500]	@ (80043e4 <HAL_GPIO_Init+0x258>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d027      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a7c      	ldr	r2, [pc, #496]	@ (80043e8 <HAL_GPIO_Init+0x25c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d023      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a7b      	ldr	r2, [pc, #492]	@ (80043ec <HAL_GPIO_Init+0x260>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01f      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a7a      	ldr	r2, [pc, #488]	@ (80043f0 <HAL_GPIO_Init+0x264>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d01b      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a79      	ldr	r2, [pc, #484]	@ (80043f4 <HAL_GPIO_Init+0x268>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d017      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a78      	ldr	r2, [pc, #480]	@ (80043f8 <HAL_GPIO_Init+0x26c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d013      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a77      	ldr	r2, [pc, #476]	@ (80043fc <HAL_GPIO_Init+0x270>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00f      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a76      	ldr	r2, [pc, #472]	@ (8004400 <HAL_GPIO_Init+0x274>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d00b      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a75      	ldr	r2, [pc, #468]	@ (8004404 <HAL_GPIO_Init+0x278>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d007      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a74      	ldr	r2, [pc, #464]	@ (8004408 <HAL_GPIO_Init+0x27c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d003      	beq.n	8004242 <HAL_GPIO_Init+0xb6>
 800423a:	21d1      	movs	r1, #209	@ 0xd1
 800423c:	4873      	ldr	r0, [pc, #460]	@ (800440c <HAL_GPIO_Init+0x280>)
 800423e:	f7fc fed7 	bl	8000ff0 <assert_failed>
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d004      	beq.n	8004256 <HAL_GPIO_Init+0xca>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004254:	d303      	bcc.n	800425e <HAL_GPIO_Init+0xd2>
 8004256:	21d2      	movs	r1, #210	@ 0xd2
 8004258:	486c      	ldr	r0, [pc, #432]	@ (800440c <HAL_GPIO_Init+0x280>)
 800425a:	f7fc fec9 	bl	8000ff0 <assert_failed>
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d035      	beq.n	80042d2 <HAL_GPIO_Init+0x146>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d031      	beq.n	80042d2 <HAL_GPIO_Init+0x146>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b11      	cmp	r3, #17
 8004274:	d02d      	beq.n	80042d2 <HAL_GPIO_Init+0x146>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d029      	beq.n	80042d2 <HAL_GPIO_Init+0x146>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b12      	cmp	r3, #18
 8004284:	d025      	beq.n	80042d2 <HAL_GPIO_Init+0x146>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	4a61      	ldr	r2, [pc, #388]	@ (8004410 <HAL_GPIO_Init+0x284>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d020      	beq.n	80042d2 <HAL_GPIO_Init+0x146>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	4a5f      	ldr	r2, [pc, #380]	@ (8004414 <HAL_GPIO_Init+0x288>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01b      	beq.n	80042d2 <HAL_GPIO_Init+0x146>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	4a5e      	ldr	r2, [pc, #376]	@ (8004418 <HAL_GPIO_Init+0x28c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d016      	beq.n	80042d2 <HAL_GPIO_Init+0x146>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4a5c      	ldr	r2, [pc, #368]	@ (800441c <HAL_GPIO_Init+0x290>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d011      	beq.n	80042d2 <HAL_GPIO_Init+0x146>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004420 <HAL_GPIO_Init+0x294>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00c      	beq.n	80042d2 <HAL_GPIO_Init+0x146>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	4a59      	ldr	r2, [pc, #356]	@ (8004424 <HAL_GPIO_Init+0x298>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d007      	beq.n	80042d2 <HAL_GPIO_Init+0x146>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d003      	beq.n	80042d2 <HAL_GPIO_Init+0x146>
 80042ca:	21d3      	movs	r1, #211	@ 0xd3
 80042cc:	484f      	ldr	r0, [pc, #316]	@ (800440c <HAL_GPIO_Init+0x280>)
 80042ce:	f7fc fe8f 	bl	8000ff0 <assert_failed>

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80042d6:	e37a      	b.n	80049ce <HAL_GPIO_Init+0x842>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	2101      	movs	r1, #1
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	fa01 f303 	lsl.w	r3, r1, r3
 80042e4:	4013      	ands	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 836a 	beq.w	80049c8 <HAL_GPIO_Init+0x83c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a43      	ldr	r2, [pc, #268]	@ (8004404 <HAL_GPIO_Init+0x278>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	f040 8097 	bne.w	800442c <HAL_GPIO_Init+0x2a0>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004304:	2201      	movs	r2, #1
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	4013      	ands	r3, r2
 8004312:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 0201 	and.w	r2, r3, #1
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	69fa      	ldr	r2, [r7, #28]
 8004324:	4313      	orrs	r3, r2
 8004326:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69fa      	ldr	r2, [r7, #28]
 800432c:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800432e:	4a3e      	ldr	r2, [pc, #248]	@ (8004428 <HAL_GPIO_Init+0x29c>)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004336:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004338:	4a3b      	ldr	r2, [pc, #236]	@ (8004428 <HAL_GPIO_Init+0x29c>)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4413      	add	r3, r2
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	08da      	lsrs	r2, r3, #3
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	3208      	adds	r2, #8
 800434c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004350:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	220f      	movs	r2, #15
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	4013      	ands	r3, r2
 8004366:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	220b      	movs	r2, #11
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	4313      	orrs	r3, r2
 800437a:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	08da      	lsrs	r2, r3, #3
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	3208      	adds	r2, #8
 8004384:	69f9      	ldr	r1, [r7, #28]
 8004386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	2203      	movs	r2, #3
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43db      	mvns	r3, r3
 800439c:	69fa      	ldr	r2, [r7, #28]
 800439e:	4013      	ands	r3, r2
 80043a0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	2202      	movs	r2, #2
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	69fa      	ldr	r2, [r7, #28]
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e1cf      	b.n	800475a <HAL_GPIO_Init+0x5ce>
 80043ba:	bf00      	nop
 80043bc:	42020000 	.word	0x42020000
 80043c0:	52020000 	.word	0x52020000
 80043c4:	42020400 	.word	0x42020400
 80043c8:	52020400 	.word	0x52020400
 80043cc:	42020800 	.word	0x42020800
 80043d0:	52020800 	.word	0x52020800
 80043d4:	42020c00 	.word	0x42020c00
 80043d8:	52020c00 	.word	0x52020c00
 80043dc:	42021000 	.word	0x42021000
 80043e0:	52021000 	.word	0x52021000
 80043e4:	42021400 	.word	0x42021400
 80043e8:	52021400 	.word	0x52021400
 80043ec:	42021800 	.word	0x42021800
 80043f0:	52021800 	.word	0x52021800
 80043f4:	42021c00 	.word	0x42021c00
 80043f8:	52021c00 	.word	0x52021c00
 80043fc:	42022000 	.word	0x42022000
 8004400:	52022000 	.word	0x52022000
 8004404:	46020000 	.word	0x46020000
 8004408:	56020000 	.word	0x56020000
 800440c:	0800ff74 	.word	0x0800ff74
 8004410:	10110000 	.word	0x10110000
 8004414:	10210000 	.word	0x10210000
 8004418:	10310000 	.word	0x10310000
 800441c:	10120000 	.word	0x10120000
 8004420:	10220000 	.word	0x10220000
 8004424:	10320000 	.word	0x10320000
 8004428:	08010254 	.word	0x08010254
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d004      	beq.n	800443e <HAL_GPIO_Init+0x2b2>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b12      	cmp	r3, #18
 800443a:	f040 811f 	bne.w	800467c <HAL_GPIO_Init+0x4f0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a79      	ldr	r2, [pc, #484]	@ (8004628 <HAL_GPIO_Init+0x49c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d050      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a78      	ldr	r2, [pc, #480]	@ (800462c <HAL_GPIO_Init+0x4a0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d04c      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a77      	ldr	r2, [pc, #476]	@ (8004630 <HAL_GPIO_Init+0x4a4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d048      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a76      	ldr	r2, [pc, #472]	@ (8004634 <HAL_GPIO_Init+0x4a8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d044      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a75      	ldr	r2, [pc, #468]	@ (8004638 <HAL_GPIO_Init+0x4ac>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d040      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a74      	ldr	r2, [pc, #464]	@ (800463c <HAL_GPIO_Init+0x4b0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d03c      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a73      	ldr	r2, [pc, #460]	@ (8004640 <HAL_GPIO_Init+0x4b4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d038      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a72      	ldr	r2, [pc, #456]	@ (8004644 <HAL_GPIO_Init+0x4b8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d034      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a71      	ldr	r2, [pc, #452]	@ (8004648 <HAL_GPIO_Init+0x4bc>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d030      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a70      	ldr	r2, [pc, #448]	@ (800464c <HAL_GPIO_Init+0x4c0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d02c      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a6f      	ldr	r2, [pc, #444]	@ (8004650 <HAL_GPIO_Init+0x4c4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d028      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a6e      	ldr	r2, [pc, #440]	@ (8004654 <HAL_GPIO_Init+0x4c8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d024      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a6d      	ldr	r2, [pc, #436]	@ (8004658 <HAL_GPIO_Init+0x4cc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d020      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a6c      	ldr	r2, [pc, #432]	@ (800465c <HAL_GPIO_Init+0x4d0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d01c      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a6b      	ldr	r2, [pc, #428]	@ (8004660 <HAL_GPIO_Init+0x4d4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d018      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a6a      	ldr	r2, [pc, #424]	@ (8004664 <HAL_GPIO_Init+0x4d8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d014      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a69      	ldr	r2, [pc, #420]	@ (8004668 <HAL_GPIO_Init+0x4dc>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d010      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a68      	ldr	r2, [pc, #416]	@ (800466c <HAL_GPIO_Init+0x4e0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00c      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a67      	ldr	r2, [pc, #412]	@ (8004670 <HAL_GPIO_Init+0x4e4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d008      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a66      	ldr	r2, [pc, #408]	@ (8004674 <HAL_GPIO_Init+0x4e8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_GPIO_Init+0x35c>
 80044de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80044e2:	4865      	ldr	r0, [pc, #404]	@ (8004678 <HAL_GPIO_Init+0x4ec>)
 80044e4:	f7fc fd84 	bl	8000ff0 <assert_failed>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a4f      	ldr	r2, [pc, #316]	@ (8004628 <HAL_GPIO_Init+0x49c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d050      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a4e      	ldr	r2, [pc, #312]	@ (800462c <HAL_GPIO_Init+0x4a0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d04c      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a4d      	ldr	r2, [pc, #308]	@ (8004630 <HAL_GPIO_Init+0x4a4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d048      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a4c      	ldr	r2, [pc, #304]	@ (8004634 <HAL_GPIO_Init+0x4a8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d044      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a4b      	ldr	r2, [pc, #300]	@ (8004638 <HAL_GPIO_Init+0x4ac>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d040      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a4a      	ldr	r2, [pc, #296]	@ (800463c <HAL_GPIO_Init+0x4b0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d03c      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a49      	ldr	r2, [pc, #292]	@ (8004640 <HAL_GPIO_Init+0x4b4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d038      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a48      	ldr	r2, [pc, #288]	@ (8004644 <HAL_GPIO_Init+0x4b8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d034      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a47      	ldr	r2, [pc, #284]	@ (8004648 <HAL_GPIO_Init+0x4bc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d030      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a46      	ldr	r2, [pc, #280]	@ (800464c <HAL_GPIO_Init+0x4c0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d02c      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a45      	ldr	r2, [pc, #276]	@ (8004650 <HAL_GPIO_Init+0x4c4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d028      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a44      	ldr	r2, [pc, #272]	@ (8004654 <HAL_GPIO_Init+0x4c8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d024      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a43      	ldr	r2, [pc, #268]	@ (8004658 <HAL_GPIO_Init+0x4cc>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d020      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a42      	ldr	r2, [pc, #264]	@ (800465c <HAL_GPIO_Init+0x4d0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d01c      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a41      	ldr	r2, [pc, #260]	@ (8004660 <HAL_GPIO_Init+0x4d4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d018      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a40      	ldr	r2, [pc, #256]	@ (8004664 <HAL_GPIO_Init+0x4d8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d014      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a3f      	ldr	r2, [pc, #252]	@ (8004668 <HAL_GPIO_Init+0x4dc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d010      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a3e      	ldr	r2, [pc, #248]	@ (800466c <HAL_GPIO_Init+0x4e0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00c      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a3d      	ldr	r2, [pc, #244]	@ (8004670 <HAL_GPIO_Init+0x4e4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d008      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a3c      	ldr	r2, [pc, #240]	@ (8004674 <HAL_GPIO_Init+0x4e8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d004      	beq.n	8004592 <HAL_GPIO_Init+0x406>
 8004588:	f240 1101 	movw	r1, #257	@ 0x101
 800458c:	483a      	ldr	r0, [pc, #232]	@ (8004678 <HAL_GPIO_Init+0x4ec>)
 800458e:	f7fc fd2f 	bl	8000ff0 <assert_failed>
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b0f      	cmp	r3, #15
 8004598:	d904      	bls.n	80045a4 <HAL_GPIO_Init+0x418>
 800459a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800459e:	4836      	ldr	r0, [pc, #216]	@ (8004678 <HAL_GPIO_Init+0x4ec>)
 80045a0:	f7fc fd26 	bl	8000ff0 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	08da      	lsrs	r2, r3, #3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3208      	adds	r2, #8
 80045ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	220f      	movs	r2, #15
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 020f 	and.w	r2, r3, #15
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	4313      	orrs	r3, r2
 80045e0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	08da      	lsrs	r2, r3, #3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3208      	adds	r2, #8
 80045ea:	69f9      	ldr	r1, [r7, #28]
 80045ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	2203      	movs	r2, #3
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	43db      	mvns	r3, r3
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	4013      	ands	r3, r2
 8004606:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 0203 	and.w	r2, r3, #3
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	4313      	orrs	r3, r2
 800461c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	e099      	b.n	800475a <HAL_GPIO_Init+0x5ce>
 8004626:	bf00      	nop
 8004628:	42020000 	.word	0x42020000
 800462c:	52020000 	.word	0x52020000
 8004630:	42020400 	.word	0x42020400
 8004634:	52020400 	.word	0x52020400
 8004638:	42020800 	.word	0x42020800
 800463c:	52020800 	.word	0x52020800
 8004640:	42020c00 	.word	0x42020c00
 8004644:	52020c00 	.word	0x52020c00
 8004648:	42021000 	.word	0x42021000
 800464c:	52021000 	.word	0x52021000
 8004650:	42021400 	.word	0x42021400
 8004654:	52021400 	.word	0x52021400
 8004658:	42021800 	.word	0x42021800
 800465c:	52021800 	.word	0x52021800
 8004660:	42021c00 	.word	0x42021c00
 8004664:	52021c00 	.word	0x52021c00
 8004668:	42022000 	.word	0x42022000
 800466c:	52022000 	.word	0x52022000
 8004670:	46020000 	.word	0x46020000
 8004674:	56020000 	.word	0x56020000
 8004678:	0800ff74 	.word	0x0800ff74
      }
      else
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a95      	ldr	r2, [pc, #596]	@ (80048d4 <HAL_GPIO_Init+0x748>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d050      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a94      	ldr	r2, [pc, #592]	@ (80048d8 <HAL_GPIO_Init+0x74c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d04c      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a93      	ldr	r2, [pc, #588]	@ (80048dc <HAL_GPIO_Init+0x750>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d048      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a92      	ldr	r2, [pc, #584]	@ (80048e0 <HAL_GPIO_Init+0x754>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d044      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a91      	ldr	r2, [pc, #580]	@ (80048e4 <HAL_GPIO_Init+0x758>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d040      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a90      	ldr	r2, [pc, #576]	@ (80048e8 <HAL_GPIO_Init+0x75c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d03c      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a8f      	ldr	r2, [pc, #572]	@ (80048ec <HAL_GPIO_Init+0x760>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d038      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a8e      	ldr	r2, [pc, #568]	@ (80048f0 <HAL_GPIO_Init+0x764>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d034      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a8d      	ldr	r2, [pc, #564]	@ (80048f4 <HAL_GPIO_Init+0x768>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d030      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a8c      	ldr	r2, [pc, #560]	@ (80048f8 <HAL_GPIO_Init+0x76c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d02c      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a8b      	ldr	r2, [pc, #556]	@ (80048fc <HAL_GPIO_Init+0x770>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d028      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a8a      	ldr	r2, [pc, #552]	@ (8004900 <HAL_GPIO_Init+0x774>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d024      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a89      	ldr	r2, [pc, #548]	@ (8004904 <HAL_GPIO_Init+0x778>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d020      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a88      	ldr	r2, [pc, #544]	@ (8004908 <HAL_GPIO_Init+0x77c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d01c      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a87      	ldr	r2, [pc, #540]	@ (800490c <HAL_GPIO_Init+0x780>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d018      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a86      	ldr	r2, [pc, #536]	@ (8004910 <HAL_GPIO_Init+0x784>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d014      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a85      	ldr	r2, [pc, #532]	@ (8004914 <HAL_GPIO_Init+0x788>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d010      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a84      	ldr	r2, [pc, #528]	@ (8004918 <HAL_GPIO_Init+0x78c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00c      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a83      	ldr	r2, [pc, #524]	@ (800491c <HAL_GPIO_Init+0x790>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d008      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a82      	ldr	r2, [pc, #520]	@ (8004920 <HAL_GPIO_Init+0x794>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_GPIO_Init+0x59a>
 800471c:	f240 1113 	movw	r1, #275	@ 0x113
 8004720:	4880      	ldr	r0, [pc, #512]	@ (8004924 <HAL_GPIO_Init+0x798>)
 8004722:	f7fc fc65 	bl	8000ff0 <assert_failed>

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	2203      	movs	r2, #3
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	43db      	mvns	r3, r3
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	4013      	ands	r3, r2
 800473c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f003 0203 	and.w	r2, r3, #3
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	4313      	orrs	r3, r2
 8004752:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d00b      	beq.n	800477a <HAL_GPIO_Init+0x5ee>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d007      	beq.n	800477a <HAL_GPIO_Init+0x5ee>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800476e:	2b11      	cmp	r3, #17
 8004770:	d003      	beq.n	800477a <HAL_GPIO_Init+0x5ee>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b12      	cmp	r3, #18
 8004778:	d145      	bne.n	8004806 <HAL_GPIO_Init+0x67a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d010      	beq.n	80047a4 <HAL_GPIO_Init+0x618>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d00c      	beq.n	80047a4 <HAL_GPIO_Init+0x618>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d008      	beq.n	80047a4 <HAL_GPIO_Init+0x618>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b03      	cmp	r3, #3
 8004798:	d004      	beq.n	80047a4 <HAL_GPIO_Init+0x618>
 800479a:	f240 1121 	movw	r1, #289	@ 0x121
 800479e:	4861      	ldr	r0, [pc, #388]	@ (8004924 <HAL_GPIO_Init+0x798>)
 80047a0:	f7fc fc26 	bl	8000ff0 <assert_failed>

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	2203      	movs	r2, #3
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	4013      	ands	r3, r2
 80047ba:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80047da:	2201      	movs	r2, #1
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	4013      	ands	r3, r2
 80047e8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	091b      	lsrs	r3, r3, #4
 80047f0:	f003 0201 	and.w	r2, r3, #1
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d028      	beq.n	8004860 <HAL_GPIO_Init+0x6d4>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00c      	beq.n	8004830 <HAL_GPIO_Init+0x6a4>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d008      	beq.n	8004830 <HAL_GPIO_Init+0x6a4>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d004      	beq.n	8004830 <HAL_GPIO_Init+0x6a4>
 8004826:	f240 1133 	movw	r1, #307	@ 0x133
 800482a:	483e      	ldr	r0, [pc, #248]	@ (8004924 <HAL_GPIO_Init+0x798>)
 800482c:	f7fc fbe0 	bl	8000ff0 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	2203      	movs	r2, #3
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	43db      	mvns	r3, r3
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	4013      	ands	r3, r2
 8004846:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	4313      	orrs	r3, r2
 8004858:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 80ad 	beq.w	80049c8 <HAL_GPIO_Init+0x83c>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800486e:	4a2e      	ldr	r2, [pc, #184]	@ (8004928 <HAL_GPIO_Init+0x79c>)
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	089b      	lsrs	r3, r3, #2
 8004874:	3318      	adds	r3, #24
 8004876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800487a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	220f      	movs	r2, #15
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	43db      	mvns	r3, r3
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	4013      	ands	r3, r2
 8004890:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0a9a      	lsrs	r2, r3, #10
 8004896:	4b25      	ldr	r3, [pc, #148]	@ (800492c <HAL_GPIO_Init+0x7a0>)
 8004898:	4013      	ands	r3, r2
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	f002 0203 	and.w	r2, r2, #3
 80048a0:	00d2      	lsls	r2, r2, #3
 80048a2:	4093      	lsls	r3, r2
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80048aa:	491f      	ldr	r1, [pc, #124]	@ (8004928 <HAL_GPIO_Init+0x79c>)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	089b      	lsrs	r3, r3, #2
 80048b0:	3318      	adds	r3, #24
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80048b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004928 <HAL_GPIO_Init+0x79c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	4013      	ands	r3, r2
 80048c6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048d0:	e02e      	b.n	8004930 <HAL_GPIO_Init+0x7a4>
 80048d2:	bf00      	nop
 80048d4:	42020000 	.word	0x42020000
 80048d8:	52020000 	.word	0x52020000
 80048dc:	42020400 	.word	0x42020400
 80048e0:	52020400 	.word	0x52020400
 80048e4:	42020800 	.word	0x42020800
 80048e8:	52020800 	.word	0x52020800
 80048ec:	42020c00 	.word	0x42020c00
 80048f0:	52020c00 	.word	0x52020c00
 80048f4:	42021000 	.word	0x42021000
 80048f8:	52021000 	.word	0x52021000
 80048fc:	42021400 	.word	0x42021400
 8004900:	52021400 	.word	0x52021400
 8004904:	42021800 	.word	0x42021800
 8004908:	52021800 	.word	0x52021800
 800490c:	42021c00 	.word	0x42021c00
 8004910:	52021c00 	.word	0x52021c00
 8004914:	42022000 	.word	0x42022000
 8004918:	52022000 	.word	0x52022000
 800491c:	46020000 	.word	0x46020000
 8004920:	56020000 	.word	0x56020000
 8004924:	0800ff74 	.word	0x0800ff74
 8004928:	46022000 	.word	0x46022000
 800492c:	002f7f7f 	.word	0x002f7f7f
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_GPIO_Init+0x7b0>
        {
          tmp |= iocurrent;
 8004934:	69fa      	ldr	r2, [r7, #28]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4313      	orrs	r3, r2
 800493a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800493c:	4a2a      	ldr	r2, [pc, #168]	@ (80049e8 <HAL_GPIO_Init+0x85c>)
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004942:	4b29      	ldr	r3, [pc, #164]	@ (80049e8 <HAL_GPIO_Init+0x85c>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	43db      	mvns	r3, r3
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	4013      	ands	r3, r2
 8004950:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_GPIO_Init+0x7da>
        {
          tmp |= iocurrent;
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004966:	4a20      	ldr	r2, [pc, #128]	@ (80049e8 <HAL_GPIO_Init+0x85c>)
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800496c:	4b1e      	ldr	r3, [pc, #120]	@ (80049e8 <HAL_GPIO_Init+0x85c>)
 800496e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004972:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	43db      	mvns	r3, r3
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	4013      	ands	r3, r2
 800497c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_GPIO_Init+0x806>
        {
          tmp |= iocurrent;
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004992:	4a15      	ldr	r2, [pc, #84]	@ (80049e8 <HAL_GPIO_Init+0x85c>)
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800499a:	4b13      	ldr	r3, [pc, #76]	@ (80049e8 <HAL_GPIO_Init+0x85c>)
 800499c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	43db      	mvns	r3, r3
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	4013      	ands	r3, r2
 80049aa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_GPIO_Init+0x834>
        {
          tmp |= iocurrent;
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4313      	orrs	r3, r2
 80049be:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80049c0:	4a09      	ldr	r2, [pc, #36]	@ (80049e8 <HAL_GPIO_Init+0x85c>)
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	3301      	adds	r3, #1
 80049cc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f47f ac7d 	bne.w	80042d8 <HAL_GPIO_Init+0x14c>
  }
}
 80049de:	bf00      	nop
 80049e0:	bf00      	nop
 80049e2:	3720      	adds	r7, #32
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	46022000 	.word	0x46022000

080049ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	807b      	strh	r3, [r7, #2]
 80049f8:	4613      	mov	r3, r2
 80049fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80049fc:	887b      	ldrh	r3, [r7, #2]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d104      	bne.n	8004a0c <HAL_GPIO_WritePin+0x20>
 8004a02:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8004a06:	480e      	ldr	r0, [pc, #56]	@ (8004a40 <HAL_GPIO_WritePin+0x54>)
 8004a08:	f7fc faf2 	bl	8000ff0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004a0c:	787b      	ldrb	r3, [r7, #1]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <HAL_GPIO_WritePin+0x36>
 8004a12:	787b      	ldrb	r3, [r7, #1]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d004      	beq.n	8004a22 <HAL_GPIO_WritePin+0x36>
 8004a18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004a1c:	4808      	ldr	r0, [pc, #32]	@ (8004a40 <HAL_GPIO_WritePin+0x54>)
 8004a1e:	f7fc fae7 	bl	8000ff0 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8004a22:	787b      	ldrb	r3, [r7, #1]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a28:	887a      	ldrh	r2, [r7, #2]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004a2e:	e002      	b.n	8004a36 <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004a30:	887a      	ldrh	r2, [r7, #2]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004a36:	bf00      	nop
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	0800ff74 	.word	0x0800ff74

08004a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e13c      	b.n	8004cd0 <HAL_I2C_Init+0x28c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a71      	ldr	r2, [pc, #452]	@ (8004c20 <HAL_I2C_Init+0x1dc>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d027      	beq.n	8004ab0 <HAL_I2C_Init+0x6c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a6f      	ldr	r2, [pc, #444]	@ (8004c24 <HAL_I2C_Init+0x1e0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d022      	beq.n	8004ab0 <HAL_I2C_Init+0x6c>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a6e      	ldr	r2, [pc, #440]	@ (8004c28 <HAL_I2C_Init+0x1e4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d01d      	beq.n	8004ab0 <HAL_I2C_Init+0x6c>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a6c      	ldr	r2, [pc, #432]	@ (8004c2c <HAL_I2C_Init+0x1e8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d018      	beq.n	8004ab0 <HAL_I2C_Init+0x6c>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a6b      	ldr	r2, [pc, #428]	@ (8004c30 <HAL_I2C_Init+0x1ec>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d013      	beq.n	8004ab0 <HAL_I2C_Init+0x6c>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a69      	ldr	r2, [pc, #420]	@ (8004c34 <HAL_I2C_Init+0x1f0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00e      	beq.n	8004ab0 <HAL_I2C_Init+0x6c>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a68      	ldr	r2, [pc, #416]	@ (8004c38 <HAL_I2C_Init+0x1f4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d009      	beq.n	8004ab0 <HAL_I2C_Init+0x6c>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a66      	ldr	r2, [pc, #408]	@ (8004c3c <HAL_I2C_Init+0x1f8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <HAL_I2C_Init+0x6c>
 8004aa6:	f240 2126 	movw	r1, #550	@ 0x226
 8004aaa:	4865      	ldr	r0, [pc, #404]	@ (8004c40 <HAL_I2C_Init+0x1fc>)
 8004aac:	f7fc faa0 	bl	8000ff0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab8:	d304      	bcc.n	8004ac4 <HAL_I2C_Init+0x80>
 8004aba:	f240 2127 	movw	r1, #551	@ 0x227
 8004abe:	4860      	ldr	r0, [pc, #384]	@ (8004c40 <HAL_I2C_Init+0x1fc>)
 8004ac0:	f7fc fa96 	bl	8000ff0 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d008      	beq.n	8004ade <HAL_I2C_Init+0x9a>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d004      	beq.n	8004ade <HAL_I2C_Init+0x9a>
 8004ad4:	f44f 710a 	mov.w	r1, #552	@ 0x228
 8004ad8:	4859      	ldr	r0, [pc, #356]	@ (8004c40 <HAL_I2C_Init+0x1fc>)
 8004ada:	f7fc fa89 	bl	8000ff0 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_I2C_Init+0xb6>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aee:	d004      	beq.n	8004afa <HAL_I2C_Init+0xb6>
 8004af0:	f240 2129 	movw	r1, #553	@ 0x229
 8004af4:	4852      	ldr	r0, [pc, #328]	@ (8004c40 <HAL_I2C_Init+0x1fc>)
 8004af6:	f7fc fa7b 	bl	8000ff0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	2bff      	cmp	r3, #255	@ 0xff
 8004b00:	d904      	bls.n	8004b0c <HAL_I2C_Init+0xc8>
 8004b02:	f240 212a 	movw	r1, #554	@ 0x22a
 8004b06:	484e      	ldr	r0, [pc, #312]	@ (8004c40 <HAL_I2C_Init+0x1fc>)
 8004b08:	f7fc fa72 	bl	8000ff0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d020      	beq.n	8004b56 <HAL_I2C_Init+0x112>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d01c      	beq.n	8004b56 <HAL_I2C_Init+0x112>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d018      	beq.n	8004b56 <HAL_I2C_Init+0x112>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d014      	beq.n	8004b56 <HAL_I2C_Init+0x112>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d010      	beq.n	8004b56 <HAL_I2C_Init+0x112>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	2b05      	cmp	r3, #5
 8004b3a:	d00c      	beq.n	8004b56 <HAL_I2C_Init+0x112>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2b06      	cmp	r3, #6
 8004b42:	d008      	beq.n	8004b56 <HAL_I2C_Init+0x112>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	2b07      	cmp	r3, #7
 8004b4a:	d004      	beq.n	8004b56 <HAL_I2C_Init+0x112>
 8004b4c:	f240 212b 	movw	r1, #555	@ 0x22b
 8004b50:	483b      	ldr	r0, [pc, #236]	@ (8004c40 <HAL_I2C_Init+0x1fc>)
 8004b52:	f7fc fa4d 	bl	8000ff0 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <HAL_I2C_Init+0x12e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b66:	d004      	beq.n	8004b72 <HAL_I2C_Init+0x12e>
 8004b68:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 8004b6c:	4834      	ldr	r0, [pc, #208]	@ (8004c40 <HAL_I2C_Init+0x1fc>)
 8004b6e:	f7fc fa3f 	bl	8000ff0 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d009      	beq.n	8004b8e <HAL_I2C_Init+0x14a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b82:	d004      	beq.n	8004b8e <HAL_I2C_Init+0x14a>
 8004b84:	f240 212d 	movw	r1, #557	@ 0x22d
 8004b88:	482d      	ldr	r0, [pc, #180]	@ (8004c40 <HAL_I2C_Init+0x1fc>)
 8004b8a:	f7fc fa31 	bl	8000ff0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <HAL_I2C_Init+0x164>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fc f88a 	bl	8000cbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2224      	movs	r2, #36	@ 0x24
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0201 	bic.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004bcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d107      	bne.n	8004bf6 <HAL_I2C_Init+0x1b2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	e006      	b.n	8004c04 <HAL_I2C_Init+0x1c0>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004c02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d11b      	bne.n	8004c44 <HAL_I2C_Init+0x200>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c1a:	605a      	str	r2, [r3, #4]
 8004c1c:	e01a      	b.n	8004c54 <HAL_I2C_Init+0x210>
 8004c1e:	bf00      	nop
 8004c20:	40005400 	.word	0x40005400
 8004c24:	50005400 	.word	0x50005400
 8004c28:	40005800 	.word	0x40005800
 8004c2c:	50005800 	.word	0x50005800
 8004c30:	46002800 	.word	0x46002800
 8004c34:	56002800 	.word	0x56002800
 8004c38:	40008400 	.word	0x40008400
 8004c3c:	50008400 	.word	0x50008400
 8004c40:	0800ffb0 	.word	0x0800ffb0
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c52:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6812      	ldr	r2, [r2, #0]
 8004c5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c66:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c76:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69d9      	ldr	r1, [r3, #28]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1a      	ldr	r2, [r3, #32]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0201 	orr.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	68f9      	ldr	r1, [r7, #12]
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
  }
}
 8004d04:	bf00      	nop
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00f      	beq.n	8004d4e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3c:	f043 0201 	orr.w	r2, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d4c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00f      	beq.n	8004d78 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d66:	f043 0208 	orr.w	r2, r3, #8
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d76:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00f      	beq.n	8004da2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d90:	f043 0202 	orr.w	r2, r3, #2
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004da0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 030b 	and.w	r3, r3, #11
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004db2:	68f9      	ldr	r1, [r7, #12]
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 fbe7 	bl	8005588 <I2C_ITError>
  }
}
 8004dba:	bf00      	nop
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	460b      	mov	r3, r1
 8004df4:	70fb      	strb	r3, [r7, #3]
 8004df6:	4613      	mov	r3, r2
 8004df8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b086      	sub	sp, #24
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e52:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <I2C_Slave_ISR_IT+0x24>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e0e2      	b.n	800502c <I2C_Slave_ISR_IT+0x1ea>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d009      	beq.n	8004e8c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d004      	beq.n	8004e8c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004e82:	6939      	ldr	r1, [r7, #16]
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f9b5 	bl	80051f4 <I2C_ITSlaveCplt>
 8004e8a:	e0ca      	b.n	8005022 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d04b      	beq.n	8004f2e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d046      	beq.n	8004f2e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d128      	bne.n	8004efc <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b28      	cmp	r3, #40	@ 0x28
 8004eb4:	d108      	bne.n	8004ec8 <I2C_Slave_ISR_IT+0x86>
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ebc:	d104      	bne.n	8004ec8 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ebe:	6939      	ldr	r1, [r7, #16]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 fb0d 	bl	80054e0 <I2C_ITListenCplt>
 8004ec6:	e031      	b.n	8004f2c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b29      	cmp	r3, #41	@ 0x29
 8004ed2:	d10e      	bne.n	8004ef2 <I2C_Slave_ISR_IT+0xb0>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004eda:	d00a      	beq.n	8004ef2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2210      	movs	r2, #16
 8004ee2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fc66 	bl	80057b6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 f926 	bl	800513c <I2C_ITSlaveSeqCplt>
 8004ef0:	e01c      	b.n	8004f2c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2210      	movs	r2, #16
 8004ef8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004efa:	e08f      	b.n	800501c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2210      	movs	r2, #16
 8004f02:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f08:	f043 0204 	orr.w	r2, r3, #4
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <I2C_Slave_ISR_IT+0xdc>
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f1c:	d17e      	bne.n	800501c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f22:	4619      	mov	r1, r3
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 fb2f 	bl	8005588 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004f2a:	e077      	b.n	800501c <I2C_Slave_ISR_IT+0x1da>
 8004f2c:	e076      	b.n	800501c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d02f      	beq.n	8004f98 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d02a      	beq.n	8004f98 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d018      	beq.n	8004f7e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d14b      	bne.n	8005020 <I2C_Slave_ISR_IT+0x1de>
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f8e:	d047      	beq.n	8005020 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f8d3 	bl	800513c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004f96:	e043      	b.n	8005020 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d004      	beq.n	8004fb6 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004fac:	6939      	ldr	r1, [r7, #16]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f840 	bl	8005034 <I2C_ITAddrCplt>
 8004fb4:	e035      	b.n	8005022 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d030      	beq.n	8005022 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d02b      	beq.n	8005022 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d018      	beq.n	8005006 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd8:	781a      	ldrb	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005004:	e00d      	b.n	8005022 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800500c:	d002      	beq.n	8005014 <I2C_Slave_ISR_IT+0x1d2>
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f891 	bl	800513c <I2C_ITSlaveSeqCplt>
 800501a:	e002      	b.n	8005022 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800501c:	bf00      	nop
 800501e:	e000      	b.n	8005022 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005020:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005044:	b2db      	uxtb	r3, r3
 8005046:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800504a:	2b28      	cmp	r3, #40	@ 0x28
 800504c:	d16a      	bne.n	8005124 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	0c1b      	lsrs	r3, r3, #16
 8005056:	b2db      	uxtb	r3, r3
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	0c1b      	lsrs	r3, r3, #16
 8005066:	b29b      	uxth	r3, r3
 8005068:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800506c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800507a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005088:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d138      	bne.n	8005104 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005092:	897b      	ldrh	r3, [r7, #10]
 8005094:	09db      	lsrs	r3, r3, #7
 8005096:	b29a      	uxth	r2, r3
 8005098:	89bb      	ldrh	r3, [r7, #12]
 800509a:	4053      	eors	r3, r2
 800509c:	b29b      	uxth	r3, r3
 800509e:	f003 0306 	and.w	r3, r3, #6
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d11c      	bne.n	80050e0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80050a6:	897b      	ldrh	r3, [r7, #10]
 80050a8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d13b      	bne.n	8005134 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2208      	movs	r2, #8
 80050c8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80050d2:	89ba      	ldrh	r2, [r7, #12]
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	4619      	mov	r1, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff fe86 	bl	8004dea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80050de:	e029      	b.n	8005134 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80050e0:	893b      	ldrh	r3, [r7, #8]
 80050e2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80050e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fba6 	bl	800583a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80050f6:	89ba      	ldrh	r2, [r7, #12]
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	4619      	mov	r1, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff fe74 	bl	8004dea <HAL_I2C_AddrCallback>
}
 8005102:	e017      	b.n	8005134 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005104:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 fb96 	bl	800583a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005116:	89ba      	ldrh	r2, [r7, #12]
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	4619      	mov	r1, r3
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff fe64 	bl	8004dea <HAL_I2C_AddrCallback>
}
 8005122:	e007      	b.n	8005134 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2208      	movs	r2, #8
 800512a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005134:	bf00      	nop
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d008      	beq.n	8005170 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e00c      	b.n	800518a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d007      	beq.n	800518a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005188:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b29      	cmp	r3, #41	@ 0x29
 8005194:	d112      	bne.n	80051bc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2228      	movs	r2, #40	@ 0x28
 800519a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2221      	movs	r2, #33	@ 0x21
 80051a2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80051a4:	2101      	movs	r1, #1
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fb47 	bl	800583a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff fe04 	bl	8004dc2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80051ba:	e017      	b.n	80051ec <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80051c6:	d111      	bne.n	80051ec <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2228      	movs	r2, #40	@ 0x28
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2222      	movs	r2, #34	@ 0x22
 80051d4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80051d6:	2102      	movs	r1, #2
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fb2e 	bl	800583a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff fdf5 	bl	8004dd6 <HAL_I2C_SlaveRxCpltCallback>
}
 80051ec:	bf00      	nop
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80051f4:	b590      	push	{r4, r7, lr}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005216:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2220      	movs	r2, #32
 800521e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005220:	7afb      	ldrb	r3, [r7, #11]
 8005222:	2b21      	cmp	r3, #33	@ 0x21
 8005224:	d002      	beq.n	800522c <I2C_ITSlaveCplt+0x38>
 8005226:	7afb      	ldrb	r3, [r7, #11]
 8005228:	2b29      	cmp	r3, #41	@ 0x29
 800522a:	d108      	bne.n	800523e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800522c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fb02 	bl	800583a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2221      	movs	r2, #33	@ 0x21
 800523a:	631a      	str	r2, [r3, #48]	@ 0x30
 800523c:	e019      	b.n	8005272 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800523e:	7afb      	ldrb	r3, [r7, #11]
 8005240:	2b22      	cmp	r3, #34	@ 0x22
 8005242:	d002      	beq.n	800524a <I2C_ITSlaveCplt+0x56>
 8005244:	7afb      	ldrb	r3, [r7, #11]
 8005246:	2b2a      	cmp	r3, #42	@ 0x2a
 8005248:	d108      	bne.n	800525c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800524a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 faf3 	bl	800583a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2222      	movs	r2, #34	@ 0x22
 8005258:	631a      	str	r2, [r3, #48]	@ 0x30
 800525a:	e00a      	b.n	8005272 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800525c:	7afb      	ldrb	r3, [r7, #11]
 800525e:	2b28      	cmp	r3, #40	@ 0x28
 8005260:	d107      	bne.n	8005272 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005262:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fae7 	bl	800583a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005280:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6859      	ldr	r1, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4b92      	ldr	r3, [pc, #584]	@ (80054d8 <I2C_ITSlaveCplt+0x2e4>)
 800528e:	400b      	ands	r3, r1
 8005290:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fa8f 	bl	80057b6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01c      	beq.n	80052dc <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80052b0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d031      	beq.n	800531e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c2:	b29c      	uxth	r4, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fe ff4f 	bl	800416c <HAL_DMAEx_GetFifoLevel>
 80052ce:	4603      	mov	r3, r0
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	4423      	add	r3, r4
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052da:	e020      	b.n	800531e <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01b      	beq.n	800531e <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052f4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00f      	beq.n	800531e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005306:	b29c      	uxth	r4, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530c:	4618      	mov	r0, r3
 800530e:	f7fe ff2d 	bl	800416c <HAL_DMAEx_GetFifoLevel>
 8005312:	4603      	mov	r3, r0
 8005314:	b29b      	uxth	r3, r3
 8005316:	4423      	add	r3, r4
 8005318:	b29a      	uxth	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d020      	beq.n	800536a <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f023 0304 	bic.w	r3, r3, #4
 800532e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00c      	beq.n	800536a <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005378:	f043 0204 	orr.w	r2, r3, #4
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f003 0310 	and.w	r3, r3, #16
 8005386:	2b00      	cmp	r3, #0
 8005388:	d049      	beq.n	800541e <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005390:	2b00      	cmp	r3, #0
 8005392:	d044      	beq.n	800541e <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d128      	bne.n	80053f0 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b28      	cmp	r3, #40	@ 0x28
 80053a8:	d108      	bne.n	80053bc <I2C_ITSlaveCplt+0x1c8>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053b0:	d104      	bne.n	80053bc <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80053b2:	6979      	ldr	r1, [r7, #20]
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f893 	bl	80054e0 <I2C_ITListenCplt>
 80053ba:	e030      	b.n	800541e <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b29      	cmp	r3, #41	@ 0x29
 80053c6:	d10e      	bne.n	80053e6 <I2C_ITSlaveCplt+0x1f2>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053ce:	d00a      	beq.n	80053e6 <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2210      	movs	r2, #16
 80053d6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f9ec 	bl	80057b6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff feac 	bl	800513c <I2C_ITSlaveSeqCplt>
 80053e4:	e01b      	b.n	800541e <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2210      	movs	r2, #16
 80053ec:	61da      	str	r2, [r3, #28]
 80053ee:	e016      	b.n	800541e <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2210      	movs	r2, #16
 80053f6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fc:	f043 0204 	orr.w	r2, r3, #4
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <I2C_ITSlaveCplt+0x21e>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005410:	d105      	bne.n	800541e <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005416:	4619      	mov	r1, r3
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f8b5 	bl	8005588 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005430:	2b00      	cmp	r3, #0
 8005432:	d010      	beq.n	8005456 <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005438:	4619      	mov	r1, r3
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f8a4 	bl	8005588 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b28      	cmp	r3, #40	@ 0x28
 800544a:	d141      	bne.n	80054d0 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800544c:	6979      	ldr	r1, [r7, #20]
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f846 	bl	80054e0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005454:	e03c      	b.n	80054d0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800545e:	d014      	beq.n	800548a <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff fe6b 	bl	800513c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a1c      	ldr	r2, [pc, #112]	@ (80054dc <I2C_ITSlaveCplt+0x2e8>)
 800546a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff fcbf 	bl	8004e06 <HAL_I2C_ListenCpltCallback>
}
 8005488:	e022      	b.n	80054d0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b22      	cmp	r3, #34	@ 0x22
 8005494:	d10e      	bne.n	80054b4 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2220      	movs	r2, #32
 800549a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff fc92 	bl	8004dd6 <HAL_I2C_SlaveRxCpltCallback>
}
 80054b2:	e00d      	b.n	80054d0 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff fc79 	bl	8004dc2 <HAL_I2C_SlaveTxCpltCallback>
}
 80054d0:	bf00      	nop
 80054d2:	371c      	adds	r7, #28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd90      	pop	{r4, r7, pc}
 80054d8:	fe00e800 	.word	0xfe00e800
 80054dc:	ffff0000 	.word	0xffff0000

080054e0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a25      	ldr	r2, [pc, #148]	@ (8005584 <I2C_ITListenCplt+0xa4>)
 80054ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	d022      	beq.n	800555c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005532:	2b00      	cmp	r3, #0
 8005534:	d012      	beq.n	800555c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005554:	f043 0204 	orr.w	r2, r3, #4
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800555c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f96a 	bl	800583a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2210      	movs	r2, #16
 800556c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7ff fc45 	bl	8004e06 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800557c:	bf00      	nop
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	ffff0000 	.word	0xffff0000

08005588 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005598:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a6d      	ldr	r2, [pc, #436]	@ (800575c <I2C_ITError+0x1d4>)
 80055a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	2b28      	cmp	r3, #40	@ 0x28
 80055be:	d005      	beq.n	80055cc <I2C_ITError+0x44>
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	2b29      	cmp	r3, #41	@ 0x29
 80055c4:	d002      	beq.n	80055cc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80055ca:	d10b      	bne.n	80055e4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80055cc:	2103      	movs	r1, #3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f933 	bl	800583a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2228      	movs	r2, #40	@ 0x28
 80055d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a60      	ldr	r2, [pc, #384]	@ (8005760 <I2C_ITError+0x1d8>)
 80055e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80055e2:	e030      	b.n	8005646 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80055e4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f926 	bl	800583a <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f8e1 	bl	80057b6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b60      	cmp	r3, #96	@ 0x60
 80055fe:	d01f      	beq.n	8005640 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b20      	cmp	r3, #32
 8005614:	d114      	bne.n	8005640 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	f003 0310 	and.w	r3, r3, #16
 8005620:	2b10      	cmp	r3, #16
 8005622:	d109      	bne.n	8005638 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2210      	movs	r2, #16
 800562a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005630:	f043 0204 	orr.w	r2, r3, #4
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2220      	movs	r2, #32
 800563e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005650:	2b00      	cmp	r3, #0
 8005652:	d039      	beq.n	80056c8 <I2C_ITError+0x140>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b11      	cmp	r3, #17
 8005658:	d002      	beq.n	8005660 <I2C_ITError+0xd8>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b21      	cmp	r3, #33	@ 0x21
 800565e:	d133      	bne.n	80056c8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800566a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800566e:	d107      	bne.n	8005680 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800567e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005684:	4618      	mov	r0, r3
 8005686:	f7fe fa9a 	bl	8003bbe <HAL_DMA_GetState>
 800568a:	4603      	mov	r3, r0
 800568c:	2b01      	cmp	r3, #1
 800568e:	d017      	beq.n	80056c0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005694:	4a33      	ldr	r2, [pc, #204]	@ (8005764 <I2C_ITError+0x1dc>)
 8005696:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fe fa61 	bl	8003b6c <HAL_DMA_Abort_IT>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d04d      	beq.n	800574c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80056ba:	4610      	mov	r0, r2
 80056bc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80056be:	e045      	b.n	800574c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f851 	bl	8005768 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80056c6:	e041      	b.n	800574c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d039      	beq.n	8005744 <I2C_ITError+0x1bc>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b12      	cmp	r3, #18
 80056d4:	d002      	beq.n	80056dc <I2C_ITError+0x154>
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b22      	cmp	r3, #34	@ 0x22
 80056da:	d133      	bne.n	8005744 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ea:	d107      	bne.n	80056fc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe fa5c 	bl	8003bbe <HAL_DMA_GetState>
 8005706:	4603      	mov	r3, r0
 8005708:	2b01      	cmp	r3, #1
 800570a:	d017      	beq.n	800573c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005710:	4a14      	ldr	r2, [pc, #80]	@ (8005764 <I2C_ITError+0x1dc>)
 8005712:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe fa23 	bl	8003b6c <HAL_DMA_Abort_IT>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d011      	beq.n	8005750 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005736:	4610      	mov	r0, r2
 8005738:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800573a:	e009      	b.n	8005750 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f813 	bl	8005768 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005742:	e005      	b.n	8005750 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f80f 	bl	8005768 <I2C_TreatErrorCallback>
  }
}
 800574a:	e002      	b.n	8005752 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800574c:	bf00      	nop
 800574e:	e000      	b.n	8005752 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005750:	bf00      	nop
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	ffff0000 	.word	0xffff0000
 8005760:	08004e43 	.word	0x08004e43
 8005764:	080057ff 	.word	0x080057ff

08005768 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b60      	cmp	r3, #96	@ 0x60
 800577a:	d10e      	bne.n	800579a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff fb4b 	bl	8004e2e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005798:	e009      	b.n	80057ae <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff fb36 	bl	8004e1a <HAL_I2C_ErrorCallback>
}
 80057ae:	bf00      	nop
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d103      	bne.n	80057d4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2200      	movs	r2, #0
 80057d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d007      	beq.n	80057f2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f042 0201 	orr.w	r2, r2, #1
 80057f0:	619a      	str	r2, [r3, #24]
  }
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800580a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005818:	2200      	movs	r2, #0
 800581a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005828:	2200      	movs	r2, #0
 800582a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f7ff ff9b 	bl	8005768 <I2C_TreatErrorCallback>
}
 8005832:	bf00      	nop
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800583a:	b480      	push	{r7}
 800583c:	b085      	sub	sp, #20
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	460b      	mov	r3, r1
 8005844:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800584a:	887b      	ldrh	r3, [r7, #2]
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00f      	beq.n	8005874 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800585a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005862:	b2db      	uxtb	r3, r3
 8005864:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005868:	2b28      	cmp	r3, #40	@ 0x28
 800586a:	d003      	beq.n	8005874 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005872:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005874:	887b      	ldrh	r3, [r7, #2]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00f      	beq.n	800589e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005884:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800588c:	b2db      	uxtb	r3, r3
 800588e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005892:	2b28      	cmp	r3, #40	@ 0x28
 8005894:	d003      	beq.n	800589e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800589c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800589e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	da03      	bge.n	80058ae <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80058ac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80058ae:	887b      	ldrh	r3, [r7, #2]
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d103      	bne.n	80058bc <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80058ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80058bc:	887b      	ldrh	r3, [r7, #2]
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d103      	bne.n	80058ca <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f043 0320 	orr.w	r3, r3, #32
 80058c8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80058ca:	887b      	ldrh	r3, [r7, #2]
 80058cc:	2b40      	cmp	r3, #64	@ 0x40
 80058ce:	d103      	bne.n	80058d8 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058d6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6819      	ldr	r1, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	43da      	mvns	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	400a      	ands	r2, r1
 80058e8:	601a      	str	r2, [r3, #0]
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
	...

080058f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a3c      	ldr	r2, [pc, #240]	@ (80059f8 <HAL_I2CEx_ConfigAnalogFilter+0x100>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d026      	beq.n	800595a <HAL_I2CEx_ConfigAnalogFilter+0x62>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a3a      	ldr	r2, [pc, #232]	@ (80059fc <HAL_I2CEx_ConfigAnalogFilter+0x104>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d021      	beq.n	800595a <HAL_I2CEx_ConfigAnalogFilter+0x62>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a39      	ldr	r2, [pc, #228]	@ (8005a00 <HAL_I2CEx_ConfigAnalogFilter+0x108>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d01c      	beq.n	800595a <HAL_I2CEx_ConfigAnalogFilter+0x62>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a37      	ldr	r2, [pc, #220]	@ (8005a04 <HAL_I2CEx_ConfigAnalogFilter+0x10c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d017      	beq.n	800595a <HAL_I2CEx_ConfigAnalogFilter+0x62>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a36      	ldr	r2, [pc, #216]	@ (8005a08 <HAL_I2CEx_ConfigAnalogFilter+0x110>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d012      	beq.n	800595a <HAL_I2CEx_ConfigAnalogFilter+0x62>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a34      	ldr	r2, [pc, #208]	@ (8005a0c <HAL_I2CEx_ConfigAnalogFilter+0x114>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00d      	beq.n	800595a <HAL_I2CEx_ConfigAnalogFilter+0x62>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a33      	ldr	r2, [pc, #204]	@ (8005a10 <HAL_I2CEx_ConfigAnalogFilter+0x118>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d008      	beq.n	800595a <HAL_I2CEx_ConfigAnalogFilter+0x62>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a31      	ldr	r2, [pc, #196]	@ (8005a14 <HAL_I2CEx_ConfigAnalogFilter+0x11c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d003      	beq.n	800595a <HAL_I2CEx_ConfigAnalogFilter+0x62>
 8005952:	2168      	movs	r1, #104	@ 0x68
 8005954:	4830      	ldr	r0, [pc, #192]	@ (8005a18 <HAL_I2CEx_ConfigAnalogFilter+0x120>)
 8005956:	f7fb fb4b 	bl	8000ff0 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d007      	beq.n	8005970 <HAL_I2CEx_ConfigAnalogFilter+0x78>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005966:	d003      	beq.n	8005970 <HAL_I2CEx_ConfigAnalogFilter+0x78>
 8005968:	2169      	movs	r1, #105	@ 0x69
 800596a:	482b      	ldr	r0, [pc, #172]	@ (8005a18 <HAL_I2CEx_ConfigAnalogFilter+0x120>)
 800596c:	f7fb fb40 	bl	8000ff0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b20      	cmp	r3, #32
 800597a:	d138      	bne.n	80059ee <HAL_I2CEx_ConfigAnalogFilter+0xf6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005982:	2b01      	cmp	r3, #1
 8005984:	d101      	bne.n	800598a <HAL_I2CEx_ConfigAnalogFilter+0x92>
 8005986:	2302      	movs	r3, #2
 8005988:	e032      	b.n	80059f0 <HAL_I2CEx_ConfigAnalogFilter+0xf8>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2224      	movs	r2, #36	@ 0x24
 8005996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0201 	bic.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80059b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6819      	ldr	r1, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0201 	orr.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e000      	b.n	80059f0 <HAL_I2CEx_ConfigAnalogFilter+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80059ee:	2302      	movs	r3, #2
  }
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	40005400 	.word	0x40005400
 80059fc:	50005400 	.word	0x50005400
 8005a00:	40005800 	.word	0x40005800
 8005a04:	50005800 	.word	0x50005800
 8005a08:	46002800 	.word	0x46002800
 8005a0c:	56002800 	.word	0x56002800
 8005a10:	40008400 	.word	0x40008400
 8005a14:	50008400 	.word	0x50008400
 8005a18:	0800ffe8 	.word	0x0800ffe8

08005a1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a3b      	ldr	r2, [pc, #236]	@ (8005b18 <HAL_I2CEx_ConfigDigitalFilter+0xfc>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d026      	beq.n	8005a7e <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a39      	ldr	r2, [pc, #228]	@ (8005b1c <HAL_I2CEx_ConfigDigitalFilter+0x100>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d021      	beq.n	8005a7e <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a38      	ldr	r2, [pc, #224]	@ (8005b20 <HAL_I2CEx_ConfigDigitalFilter+0x104>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d01c      	beq.n	8005a7e <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a36      	ldr	r2, [pc, #216]	@ (8005b24 <HAL_I2CEx_ConfigDigitalFilter+0x108>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d017      	beq.n	8005a7e <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a35      	ldr	r2, [pc, #212]	@ (8005b28 <HAL_I2CEx_ConfigDigitalFilter+0x10c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d012      	beq.n	8005a7e <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a33      	ldr	r2, [pc, #204]	@ (8005b2c <HAL_I2CEx_ConfigDigitalFilter+0x110>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00d      	beq.n	8005a7e <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a32      	ldr	r2, [pc, #200]	@ (8005b30 <HAL_I2CEx_ConfigDigitalFilter+0x114>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d008      	beq.n	8005a7e <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a30      	ldr	r2, [pc, #192]	@ (8005b34 <HAL_I2CEx_ConfigDigitalFilter+0x118>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d003      	beq.n	8005a7e <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8005a76:	2196      	movs	r1, #150	@ 0x96
 8005a78:	482f      	ldr	r0, [pc, #188]	@ (8005b38 <HAL_I2CEx_ConfigDigitalFilter+0x11c>)
 8005a7a:	f7fb fab9 	bl	8000ff0 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b0f      	cmp	r3, #15
 8005a82:	d903      	bls.n	8005a8c <HAL_I2CEx_ConfigDigitalFilter+0x70>
 8005a84:	2197      	movs	r1, #151	@ 0x97
 8005a86:	482c      	ldr	r0, [pc, #176]	@ (8005b38 <HAL_I2CEx_ConfigDigitalFilter+0x11c>)
 8005a88:	f7fb fab2 	bl	8000ff0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d139      	bne.n	8005b0c <HAL_I2CEx_ConfigDigitalFilter+0xf0>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e033      	b.n	8005b0e <HAL_I2CEx_ConfigDigitalFilter+0xf2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2224      	movs	r2, #36	@ 0x24
 8005ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0201 	bic.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ad4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	021b      	lsls	r3, r3, #8
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	e000      	b.n	8005b0e <HAL_I2CEx_ConfigDigitalFilter+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8005b0c:	2302      	movs	r3, #2
  }
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40005400 	.word	0x40005400
 8005b1c:	50005400 	.word	0x50005400
 8005b20:	40005800 	.word	0x40005800
 8005b24:	50005800 	.word	0x50005800
 8005b28:	46002800 	.word	0x46002800
 8005b2c:	56002800 	.word	0x56002800
 8005b30:	40008400 	.word	0x40008400
 8005b34:	50008400 	.word	0x50008400
 8005b38:	0800ffe8 	.word	0x0800ffe8

08005b3c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d006      	beq.n	8005b5c <HAL_ICACHE_ConfigAssociativityMode+0x20>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d003      	beq.n	8005b5c <HAL_ICACHE_ConfigAssociativityMode+0x20>
 8005b54:	21ae      	movs	r1, #174	@ 0xae
 8005b56:	480c      	ldr	r0, [pc, #48]	@ (8005b88 <HAL_ICACHE_ConfigAssociativityMode+0x4c>)
 8005b58:	f7fb fa4a 	bl	8000ff0 <assert_failed>

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b8c <HAL_ICACHE_ConfigAssociativityMode+0x50>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <HAL_ICACHE_ConfigAssociativityMode+0x32>
  {
    status = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	73fb      	strb	r3, [r7, #15]
 8005b6c:	e007      	b.n	8005b7e <HAL_ICACHE_ConfigAssociativityMode+0x42>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005b6e:	4b07      	ldr	r3, [pc, #28]	@ (8005b8c <HAL_ICACHE_ConfigAssociativityMode+0x50>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f023 0204 	bic.w	r2, r3, #4
 8005b76:	4905      	ldr	r1, [pc, #20]	@ (8005b8c <HAL_ICACHE_ConfigAssociativityMode+0x50>)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	08010024 	.word	0x08010024
 8005b8c:	40030400 	.word	0x40030400

08005b90 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005b94:	4b05      	ldr	r3, [pc, #20]	@ (8005bac <HAL_ICACHE_Enable+0x1c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a04      	ldr	r2, [pc, #16]	@ (8005bac <HAL_ICACHE_Enable+0x1c>)
 8005b9a:	f043 0301 	orr.w	r3, r3, #1
 8005b9e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	40030400 	.word	0x40030400

08005bb0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t timeout;
  uint32_t vos_old;

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bbe:	d00f      	beq.n	8005be0 <HAL_PWREx_ControlVoltageScaling+0x30>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bc6:	d00b      	beq.n	8005be0 <HAL_PWREx_ControlVoltageScaling+0x30>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bce:	d007      	beq.n	8005be0 <HAL_PWREx_ControlVoltageScaling+0x30>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d004      	beq.n	8005be0 <HAL_PWREx_ControlVoltageScaling+0x30>
 8005bd6:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 8005bda:	483a      	ldr	r0, [pc, #232]	@ (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x114>)
 8005bdc:	f7fb fa08 	bl	8000ff0 <assert_failed>

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005be0:	4b39      	ldr	r3, [pc, #228]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x118>)
 8005be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005be8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d10b      	bne.n	8005c0a <HAL_PWREx_ControlVoltageScaling+0x5a>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bf8:	d905      	bls.n	8005c06 <HAL_PWREx_ControlVoltageScaling+0x56>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005bfa:	4b33      	ldr	r3, [pc, #204]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x118>)
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	4a32      	ldr	r2, [pc, #200]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x118>)
 8005c00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c04:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	e057      	b.n	8005cba <HAL_PWREx_ControlVoltageScaling+0x10a>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c10:	d90a      	bls.n	8005c28 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005c12:	4b2d      	ldr	r3, [pc, #180]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x118>)
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x118>)
 8005c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c24:	60d3      	str	r3, [r2, #12]
 8005c26:	e007      	b.n	8005c38 <HAL_PWREx_ControlVoltageScaling+0x88>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005c28:	4b27      	ldr	r3, [pc, #156]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x118>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005c30:	4925      	ldr	r1, [pc, #148]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x118>)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005c38:	4b24      	ldr	r3, [pc, #144]	@ (8005ccc <HAL_PWREx_ControlVoltageScaling+0x11c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a24      	ldr	r2, [pc, #144]	@ (8005cd0 <HAL_PWREx_ControlVoltageScaling+0x120>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	099b      	lsrs	r3, r3, #6
 8005c44:	2232      	movs	r2, #50	@ 0x32
 8005c46:	fb02 f303 	mul.w	r3, r2, r3
 8005c4a:	4a21      	ldr	r2, [pc, #132]	@ (8005cd0 <HAL_PWREx_ControlVoltageScaling+0x120>)
 8005c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c50:	099b      	lsrs	r3, r3, #6
 8005c52:	3301      	adds	r3, #1
 8005c54:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005c56:	e002      	b.n	8005c5e <HAL_PWREx_ControlVoltageScaling+0xae>
  {
    timeout--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x118>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d102      	bne.n	8005c70 <HAL_PWREx_ControlVoltageScaling+0xc0>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1f3      	bne.n	8005c58 <HAL_PWREx_ControlVoltageScaling+0xa8>
  }

  /* Check time out */
  if (timeout != 0U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d01b      	beq.n	8005cae <HAL_PWREx_ControlVoltageScaling+0xfe>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005c76:	4b15      	ldr	r3, [pc, #84]	@ (8005ccc <HAL_PWREx_ControlVoltageScaling+0x11c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a15      	ldr	r2, [pc, #84]	@ (8005cd0 <HAL_PWREx_ControlVoltageScaling+0x120>)
 8005c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c80:	099b      	lsrs	r3, r3, #6
 8005c82:	2232      	movs	r2, #50	@ 0x32
 8005c84:	fb02 f303 	mul.w	r3, r2, r3
 8005c88:	4a11      	ldr	r2, [pc, #68]	@ (8005cd0 <HAL_PWREx_ControlVoltageScaling+0x120>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	099b      	lsrs	r3, r3, #6
 8005c90:	3301      	adds	r3, #1
 8005c92:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005c94:	e002      	b.n	8005c9c <HAL_PWREx_ControlVoltageScaling+0xec>
    {
      timeout--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x118>)
 8005c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d102      	bne.n	8005cae <HAL_PWREx_ControlVoltageScaling+0xfe>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1f3      	bne.n	8005c96 <HAL_PWREx_ControlVoltageScaling+0xe6>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <HAL_PWREx_ControlVoltageScaling+0x108>
  {
    return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e000      	b.n	8005cba <HAL_PWREx_ControlVoltageScaling+0x10a>
  }

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	08010060 	.word	0x08010060
 8005cc8:	46020800 	.word	0x46020800
 8005ccc:	20000000 	.word	0x20000000
 8005cd0:	10624dd3 	.word	0x10624dd3

08005cd4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8005cd8:	4b04      	ldr	r3, [pc, #16]	@ (8005cec <HAL_PWREx_GetVoltageRange+0x18>)
 8005cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	46020800 	.word	0x46020800

08005cf0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t timeout;

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d007      	beq.n	8005d0e <HAL_PWREx_ConfigSupply+0x1e>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d004      	beq.n	8005d0e <HAL_PWREx_ConfigSupply+0x1e>
 8005d04:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8005d08:	4822      	ldr	r0, [pc, #136]	@ (8005d94 <HAL_PWREx_ConfigSupply+0xa4>)
 8005d0a:	f7fb f971 	bl	8000ff0 <assert_failed>

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005d0e:	4b22      	ldr	r3, [pc, #136]	@ (8005d98 <HAL_PWREx_ConfigSupply+0xa8>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a22      	ldr	r2, [pc, #136]	@ (8005d9c <HAL_PWREx_ConfigSupply+0xac>)
 8005d14:	fba2 2303 	umull	r2, r3, r2, r3
 8005d18:	099b      	lsrs	r3, r3, #6
 8005d1a:	2232      	movs	r2, #50	@ 0x32
 8005d1c:	fb02 f303 	mul.w	r3, r2, r3
 8005d20:	4a1e      	ldr	r2, [pc, #120]	@ (8005d9c <HAL_PWREx_ConfigSupply+0xac>)
 8005d22:	fba2 2303 	umull	r2, r3, r2, r3
 8005d26:	099b      	lsrs	r3, r3, #6
 8005d28:	3301      	adds	r3, #1
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d113      	bne.n	8005d5a <HAL_PWREx_ConfigSupply+0x6a>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005d32:	4b1b      	ldr	r3, [pc, #108]	@ (8005da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	4a1a      	ldr	r2, [pc, #104]	@ (8005da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d38:	f023 0302 	bic.w	r3, r3, #2
 8005d3c:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005d3e:	e002      	b.n	8005d46 <HAL_PWREx_ConfigSupply+0x56>
    {
      timeout--;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005d46:	4b16      	ldr	r3, [pc, #88]	@ (8005da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d116      	bne.n	8005d80 <HAL_PWREx_ConfigSupply+0x90>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1f3      	bne.n	8005d40 <HAL_PWREx_ConfigSupply+0x50>
 8005d58:	e012      	b.n	8005d80 <HAL_PWREx_ConfigSupply+0x90>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005d5a:	4b11      	ldr	r3, [pc, #68]	@ (8005da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	4a10      	ldr	r2, [pc, #64]	@ (8005da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d60:	f043 0302 	orr.w	r3, r3, #2
 8005d64:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005d66:	e002      	b.n	8005d6e <HAL_PWREx_ConfigSupply+0x7e>
    {
      timeout--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d102      	bne.n	8005d80 <HAL_PWREx_ConfigSupply+0x90>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1f3      	bne.n	8005d68 <HAL_PWREx_ConfigSupply+0x78>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_PWREx_ConfigSupply+0x9a>
  {
    return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e000      	b.n	8005d8c <HAL_PWREx_ConfigSupply+0x9c>
  }

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	08010060 	.word	0x08010060
 8005d98:	20000000 	.word	0x20000000
 8005d9c:	10624dd3 	.word	0x10624dd3
 8005da0:	46020800 	.word	0x46020800

08005da4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8005da8:	4b05      	ldr	r3, [pc, #20]	@ (8005dc0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	4a04      	ldr	r2, [pc, #16]	@ (8005dc0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005dae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005db2:	6113      	str	r3, [r2, #16]
}
 8005db4:	bf00      	nop
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	46020800 	.word	0x46020800

08005dc4 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8005dc8:	4b05      	ldr	r3, [pc, #20]	@ (8005de0 <HAL_PWREx_EnableVddA+0x1c>)
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	4a04      	ldr	r2, [pc, #16]	@ (8005de0 <HAL_PWREx_EnableVddA+0x1c>)
 8005dce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dd2:	6113      	str	r3, [r2, #16]
}
 8005dd4:	bf00      	nop
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	46020800 	.word	0x46020800

08005de4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08e      	sub	sp, #56	@ 0x38
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005dec:	2300      	movs	r3, #0
 8005dee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d102      	bne.n	8005dfe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f001 b906 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d008      	beq.n	8005e18 <HAL_RCC_OscConfig+0x34>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2bff      	cmp	r3, #255	@ 0xff
 8005e0c:	d904      	bls.n	8005e18 <HAL_RCC_OscConfig+0x34>
 8005e0e:	f240 211e 	movw	r1, #542	@ 0x21e
 8005e12:	4894      	ldr	r0, [pc, #592]	@ (8006064 <HAL_RCC_OscConfig+0x280>)
 8005e14:	f7fb f8ec 	bl	8000ff0 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e18:	4b93      	ldr	r3, [pc, #588]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	f003 030c 	and.w	r3, r3, #12
 8005e20:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e22:	4b91      	ldr	r3, [pc, #580]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8005e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0310 	and.w	r3, r3, #16
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 81d6 	beq.w	80061e6 <HAL_RCC_OscConfig+0x402>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d008      	beq.n	8005e54 <HAL_RCC_OscConfig+0x70>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d004      	beq.n	8005e54 <HAL_RCC_OscConfig+0x70>
 8005e4a:	f240 2127 	movw	r1, #551	@ 0x227
 8005e4e:	4885      	ldr	r0, [pc, #532]	@ (8006064 <HAL_RCC_OscConfig+0x280>)
 8005e50:	f7fb f8ce 	bl	8000ff0 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	2bff      	cmp	r3, #255	@ 0xff
 8005e5a:	d904      	bls.n	8005e66 <HAL_RCC_OscConfig+0x82>
 8005e5c:	f44f 710a 	mov.w	r1, #552	@ 0x228
 8005e60:	4880      	ldr	r0, [pc, #512]	@ (8006064 <HAL_RCC_OscConfig+0x280>)
 8005e62:	f7fb f8c5 	bl	8000ff0 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d04f      	beq.n	8005f0e <HAL_RCC_OscConfig+0x12a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e76:	d04a      	beq.n	8005f0e <HAL_RCC_OscConfig+0x12a>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e80:	d045      	beq.n	8005f0e <HAL_RCC_OscConfig+0x12a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e8a:	d040      	beq.n	8005f0e <HAL_RCC_OscConfig+0x12a>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e94:	d03b      	beq.n	8005f0e <HAL_RCC_OscConfig+0x12a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e9e:	d036      	beq.n	8005f0e <HAL_RCC_OscConfig+0x12a>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005ea8:	d031      	beq.n	8005f0e <HAL_RCC_OscConfig+0x12a>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eae:	f1b3 4fe0 	cmp.w	r3, #1879048192	@ 0x70000000
 8005eb2:	d02c      	beq.n	8005f0e <HAL_RCC_OscConfig+0x12a>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ebc:	d027      	beq.n	8005f0e <HAL_RCC_OscConfig+0x12a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec2:	f1b3 4f10 	cmp.w	r3, #2415919104	@ 0x90000000
 8005ec6:	d022      	beq.n	8005f0e <HAL_RCC_OscConfig+0x12a>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ecc:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 8005ed0:	d01d      	beq.n	8005f0e <HAL_RCC_OscConfig+0x12a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed6:	f1b3 4f30 	cmp.w	r3, #2952790016	@ 0xb0000000
 8005eda:	d018      	beq.n	8005f0e <HAL_RCC_OscConfig+0x12a>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005ee4:	d013      	beq.n	8005f0e <HAL_RCC_OscConfig+0x12a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eea:	f1b3 4f50 	cmp.w	r3, #3489660928	@ 0xd0000000
 8005eee:	d00e      	beq.n	8005f0e <HAL_RCC_OscConfig+0x12a>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef4:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8005ef8:	d009      	beq.n	8005f0e <HAL_RCC_OscConfig+0x12a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efe:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 8005f02:	d004      	beq.n	8005f0e <HAL_RCC_OscConfig+0x12a>
 8005f04:	f240 2129 	movw	r1, #553	@ 0x229
 8005f08:	4856      	ldr	r0, [pc, #344]	@ (8006064 <HAL_RCC_OscConfig+0x280>)
 8005f0a:	f7fb f871 	bl	8000ff0 <assert_failed>

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d007      	beq.n	8005f24 <HAL_RCC_OscConfig+0x140>
 8005f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f16:	2b0c      	cmp	r3, #12
 8005f18:	f040 80e3 	bne.w	80060e2 <HAL_RCC_OscConfig+0x2fe>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	f040 80df 	bne.w	80060e2 <HAL_RCC_OscConfig+0x2fe>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d102      	bne.n	8005f32 <HAL_RCC_OscConfig+0x14e>
      {
        return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f001 b86c 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f36:	4b4c      	ldr	r3, [pc, #304]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d004      	beq.n	8005f4c <HAL_RCC_OscConfig+0x168>
 8005f42:	4b49      	ldr	r3, [pc, #292]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005f4a:	e005      	b.n	8005f58 <HAL_RCC_OscConfig+0x174>
 8005f4c:	4b46      	ldr	r3, [pc, #280]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8005f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f52:	041b      	lsls	r3, r3, #16
 8005f54:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d255      	bcs.n	8006008 <HAL_RCC_OscConfig+0x224>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <HAL_RCC_OscConfig+0x194>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f66:	4618      	mov	r0, r3
 8005f68:	f001 fd38 	bl	80079dc <RCC_SetFlashLatencyFromMSIRange>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <HAL_RCC_OscConfig+0x194>
            {
              return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f001 b849 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005f78:	4b3b      	ldr	r3, [pc, #236]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	4a3a      	ldr	r2, [pc, #232]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8005f7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f82:	6093      	str	r3, [r2, #8]
 8005f84:	4b38      	ldr	r3, [pc, #224]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f90:	4935      	ldr	r1, [pc, #212]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005f9e:	d309      	bcc.n	8005fb4 <HAL_RCC_OscConfig+0x1d0>
 8005fa0:	4b31      	ldr	r3, [pc, #196]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f023 021f 	bic.w	r2, r3, #31
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	492e      	ldr	r1, [pc, #184]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60cb      	str	r3, [r1, #12]
 8005fb2:	e083      	b.n	80060bc <HAL_RCC_OscConfig+0x2d8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	da0a      	bge.n	8005fd2 <HAL_RCC_OscConfig+0x1ee>
 8005fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	015b      	lsls	r3, r3, #5
 8005fca:	4927      	ldr	r1, [pc, #156]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60cb      	str	r3, [r1, #12]
 8005fd0:	e074      	b.n	80060bc <HAL_RCC_OscConfig+0x2d8>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fda:	d30a      	bcc.n	8005ff2 <HAL_RCC_OscConfig+0x20e>
 8005fdc:	4b22      	ldr	r3, [pc, #136]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	029b      	lsls	r3, r3, #10
 8005fea:	491f      	ldr	r1, [pc, #124]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60cb      	str	r3, [r1, #12]
 8005ff0:	e064      	b.n	80060bc <HAL_RCC_OscConfig+0x2d8>
 8005ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	03db      	lsls	r3, r3, #15
 8006000:	4919      	ldr	r1, [pc, #100]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8006002:	4313      	orrs	r3, r2
 8006004:	60cb      	str	r3, [r1, #12]
 8006006:	e059      	b.n	80060bc <HAL_RCC_OscConfig+0x2d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006008:	4b17      	ldr	r3, [pc, #92]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	4a16      	ldr	r2, [pc, #88]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 800600e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006012:	6093      	str	r3, [r2, #8]
 8006014:	4b14      	ldr	r3, [pc, #80]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006020:	4911      	ldr	r1, [pc, #68]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8006022:	4313      	orrs	r3, r2
 8006024:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800602e:	d309      	bcc.n	8006044 <HAL_RCC_OscConfig+0x260>
 8006030:	4b0d      	ldr	r3, [pc, #52]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f023 021f 	bic.w	r2, r3, #31
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	490a      	ldr	r1, [pc, #40]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 800603e:	4313      	orrs	r3, r2
 8006040:	60cb      	str	r3, [r1, #12]
 8006042:	e02d      	b.n	80060a0 <HAL_RCC_OscConfig+0x2bc>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006048:	2b00      	cmp	r3, #0
 800604a:	da0f      	bge.n	800606c <HAL_RCC_OscConfig+0x288>
 800604c:	4b06      	ldr	r3, [pc, #24]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	015b      	lsls	r3, r3, #5
 800605a:	4903      	ldr	r1, [pc, #12]	@ (8006068 <HAL_RCC_OscConfig+0x284>)
 800605c:	4313      	orrs	r3, r2
 800605e:	60cb      	str	r3, [r1, #12]
 8006060:	e01e      	b.n	80060a0 <HAL_RCC_OscConfig+0x2bc>
 8006062:	bf00      	nop
 8006064:	0801009c 	.word	0x0801009c
 8006068:	46020c00 	.word	0x46020c00
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006074:	d30a      	bcc.n	800608c <HAL_RCC_OscConfig+0x2a8>
 8006076:	4b92      	ldr	r3, [pc, #584]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	029b      	lsls	r3, r3, #10
 8006084:	498e      	ldr	r1, [pc, #568]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 8006086:	4313      	orrs	r3, r2
 8006088:	60cb      	str	r3, [r1, #12]
 800608a:	e009      	b.n	80060a0 <HAL_RCC_OscConfig+0x2bc>
 800608c:	4b8c      	ldr	r3, [pc, #560]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	03db      	lsls	r3, r3, #15
 800609a:	4989      	ldr	r1, [pc, #548]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 800609c:	4313      	orrs	r3, r2
 800609e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80060a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10a      	bne.n	80060bc <HAL_RCC_OscConfig+0x2d8>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 fc96 	bl	80079dc <RCC_SetFlashLatencyFromMSIRange>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <HAL_RCC_OscConfig+0x2d8>
            {
              return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f000 bfa7 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80060bc:	f001 fbf0 	bl	80078a0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80060c0:	4b80      	ldr	r3, [pc, #512]	@ (80062c4 <HAL_RCC_OscConfig+0x4e0>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fa ffbb 	bl	8001040 <HAL_InitTick>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80060d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 8085 	beq.w	80061e4 <HAL_RCC_OscConfig+0x400>
        {
          return status;
 80060da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060de:	f000 bf94 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d061      	beq.n	80061ae <HAL_RCC_OscConfig+0x3ca>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80060ea:	4b75      	ldr	r3, [pc, #468]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a74      	ldr	r2, [pc, #464]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80060f6:	f7fb fc7d 	bl	80019f4 <HAL_GetTick>
 80060fa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80060fc:	e009      	b.n	8006112 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060fe:	f7fb fc79 	bl	80019f4 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d902      	bls.n	8006112 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	f000 bf7c 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006112:	4b6b      	ldr	r3, [pc, #428]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0ef      	beq.n	80060fe <HAL_RCC_OscConfig+0x31a>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800611e:	4b68      	ldr	r3, [pc, #416]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	4a67      	ldr	r2, [pc, #412]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 8006124:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006128:	6093      	str	r3, [r2, #8]
 800612a:	4b65      	ldr	r3, [pc, #404]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006136:	4962      	ldr	r1, [pc, #392]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 8006138:	4313      	orrs	r3, r2
 800613a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006140:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006144:	d309      	bcc.n	800615a <HAL_RCC_OscConfig+0x376>
 8006146:	4b5e      	ldr	r3, [pc, #376]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f023 021f 	bic.w	r2, r3, #31
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	495b      	ldr	r1, [pc, #364]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 8006154:	4313      	orrs	r3, r2
 8006156:	60cb      	str	r3, [r1, #12]
 8006158:	e045      	b.n	80061e6 <HAL_RCC_OscConfig+0x402>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615e:	2b00      	cmp	r3, #0
 8006160:	da0a      	bge.n	8006178 <HAL_RCC_OscConfig+0x394>
 8006162:	4b57      	ldr	r3, [pc, #348]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	015b      	lsls	r3, r3, #5
 8006170:	4953      	ldr	r1, [pc, #332]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 8006172:	4313      	orrs	r3, r2
 8006174:	60cb      	str	r3, [r1, #12]
 8006176:	e036      	b.n	80061e6 <HAL_RCC_OscConfig+0x402>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006180:	d30a      	bcc.n	8006198 <HAL_RCC_OscConfig+0x3b4>
 8006182:	4b4f      	ldr	r3, [pc, #316]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	029b      	lsls	r3, r3, #10
 8006190:	494b      	ldr	r1, [pc, #300]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 8006192:	4313      	orrs	r3, r2
 8006194:	60cb      	str	r3, [r1, #12]
 8006196:	e026      	b.n	80061e6 <HAL_RCC_OscConfig+0x402>
 8006198:	4b49      	ldr	r3, [pc, #292]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	03db      	lsls	r3, r3, #15
 80061a6:	4946      	ldr	r1, [pc, #280]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60cb      	str	r3, [r1, #12]
 80061ac:	e01b      	b.n	80061e6 <HAL_RCC_OscConfig+0x402>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80061ae:	4b44      	ldr	r3, [pc, #272]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a43      	ldr	r2, [pc, #268]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 80061b4:	f023 0301 	bic.w	r3, r3, #1
 80061b8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80061ba:	f7fb fc1b 	bl	80019f4 <HAL_GetTick>
 80061be:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80061c0:	e009      	b.n	80061d6 <HAL_RCC_OscConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061c2:	f7fb fc17 	bl	80019f4 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d902      	bls.n	80061d6 <HAL_RCC_OscConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	f000 bf1a 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80061d6:	4b3a      	ldr	r3, [pc, #232]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1ef      	bne.n	80061c2 <HAL_RCC_OscConfig+0x3de>
 80061e2:	e000      	b.n	80061e6 <HAL_RCC_OscConfig+0x402>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80061e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 80ab 	beq.w	800634a <HAL_RCC_OscConfig+0x566>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d013      	beq.n	8006224 <HAL_RCC_OscConfig+0x440>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006204:	d00e      	beq.n	8006224 <HAL_RCC_OscConfig+0x440>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800620e:	d009      	beq.n	8006224 <HAL_RCC_OscConfig+0x440>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006218:	d004      	beq.n	8006224 <HAL_RCC_OscConfig+0x440>
 800621a:	f44f 7126 	mov.w	r1, #664	@ 0x298
 800621e:	482a      	ldr	r0, [pc, #168]	@ (80062c8 <HAL_RCC_OscConfig+0x4e4>)
 8006220:	f7fa fee6 	bl	8000ff0 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006226:	2b08      	cmp	r3, #8
 8006228:	d005      	beq.n	8006236 <HAL_RCC_OscConfig+0x452>
 800622a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622c:	2b0c      	cmp	r3, #12
 800622e:	d10a      	bne.n	8006246 <HAL_RCC_OscConfig+0x462>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006232:	2b03      	cmp	r3, #3
 8006234:	d107      	bne.n	8006246 <HAL_RCC_OscConfig+0x462>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f040 8085 	bne.w	800634a <HAL_RCC_OscConfig+0x566>
      {
        return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	f000 bee2 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800624e:	d106      	bne.n	800625e <HAL_RCC_OscConfig+0x47a>
 8006250:	4b1b      	ldr	r3, [pc, #108]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a1a      	ldr	r2, [pc, #104]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 8006256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	e048      	b.n	80062f0 <HAL_RCC_OscConfig+0x50c>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006266:	d112      	bne.n	800628e <HAL_RCC_OscConfig+0x4aa>
 8006268:	4b15      	ldr	r3, [pc, #84]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a14      	ldr	r2, [pc, #80]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 800626e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006272:	6013      	str	r3, [r2, #0]
 8006274:	4b12      	ldr	r3, [pc, #72]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a11      	ldr	r2, [pc, #68]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 800627a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	4b0f      	ldr	r3, [pc, #60]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a0e      	ldr	r2, [pc, #56]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 8006286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	e030      	b.n	80062f0 <HAL_RCC_OscConfig+0x50c>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006296:	d119      	bne.n	80062cc <HAL_RCC_OscConfig+0x4e8>
 8006298:	4b09      	ldr	r3, [pc, #36]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a08      	ldr	r2, [pc, #32]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 800629e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	4b06      	ldr	r3, [pc, #24]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a05      	ldr	r2, [pc, #20]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 80062aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	4b03      	ldr	r3, [pc, #12]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a02      	ldr	r2, [pc, #8]	@ (80062c0 <HAL_RCC_OscConfig+0x4dc>)
 80062b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	e018      	b.n	80062f0 <HAL_RCC_OscConfig+0x50c>
 80062be:	bf00      	nop
 80062c0:	46020c00 	.word	0x46020c00
 80062c4:	20000004 	.word	0x20000004
 80062c8:	0801009c 	.word	0x0801009c
 80062cc:	4ba2      	ldr	r3, [pc, #648]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4aa1      	ldr	r2, [pc, #644]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 80062d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	4b9f      	ldr	r3, [pc, #636]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a9e      	ldr	r2, [pc, #632]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 80062de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	4b9c      	ldr	r3, [pc, #624]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a9b      	ldr	r2, [pc, #620]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 80062ea:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80062ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d014      	beq.n	8006322 <HAL_RCC_OscConfig+0x53e>
      {
        tickstart = HAL_GetTick();
 80062f8:	f7fb fb7c 	bl	80019f4 <HAL_GetTick>
 80062fc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062fe:	e009      	b.n	8006314 <HAL_RCC_OscConfig+0x530>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006300:	f7fb fb78 	bl	80019f4 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b64      	cmp	r3, #100	@ 0x64
 800630c:	d902      	bls.n	8006314 <HAL_RCC_OscConfig+0x530>
          {
            return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	f000 be7b 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006314:	4b90      	ldr	r3, [pc, #576]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0ef      	beq.n	8006300 <HAL_RCC_OscConfig+0x51c>
 8006320:	e013      	b.n	800634a <HAL_RCC_OscConfig+0x566>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006322:	f7fb fb67 	bl	80019f4 <HAL_GetTick>
 8006326:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006328:	e009      	b.n	800633e <HAL_RCC_OscConfig+0x55a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800632a:	f7fb fb63 	bl	80019f4 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b64      	cmp	r3, #100	@ 0x64
 8006336:	d902      	bls.n	800633e <HAL_RCC_OscConfig+0x55a>
          {
            return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	f000 be66 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800633e:	4b86      	ldr	r3, [pc, #536]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1ef      	bne.n	800632a <HAL_RCC_OscConfig+0x546>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d074      	beq.n	8006440 <HAL_RCC_OscConfig+0x65c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d009      	beq.n	8006372 <HAL_RCC_OscConfig+0x58e>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006366:	d004      	beq.n	8006372 <HAL_RCC_OscConfig+0x58e>
 8006368:	f240 21c9 	movw	r1, #713	@ 0x2c9
 800636c:	487b      	ldr	r0, [pc, #492]	@ (800655c <HAL_RCC_OscConfig+0x778>)
 800636e:	f7fa fe3f 	bl	8000ff0 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b1f      	cmp	r3, #31
 8006378:	d904      	bls.n	8006384 <HAL_RCC_OscConfig+0x5a0>
 800637a:	f240 21ca 	movw	r1, #714	@ 0x2ca
 800637e:	4877      	ldr	r0, [pc, #476]	@ (800655c <HAL_RCC_OscConfig+0x778>)
 8006380:	f7fa fe36 	bl	8000ff0 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006386:	2b04      	cmp	r3, #4
 8006388:	d005      	beq.n	8006396 <HAL_RCC_OscConfig+0x5b2>
 800638a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638c:	2b0c      	cmp	r3, #12
 800638e:	d114      	bne.n	80063ba <HAL_RCC_OscConfig+0x5d6>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006392:	2b02      	cmp	r3, #2
 8006394:	d111      	bne.n	80063ba <HAL_RCC_OscConfig+0x5d6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d102      	bne.n	80063a4 <HAL_RCC_OscConfig+0x5c0>
      {
        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	f000 be33 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80063a4:	4b6c      	ldr	r3, [pc, #432]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	041b      	lsls	r3, r3, #16
 80063b2:	4969      	ldr	r1, [pc, #420]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80063b8:	e042      	b.n	8006440 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d024      	beq.n	800640c <HAL_RCC_OscConfig+0x628>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80063c2:	4b65      	ldr	r3, [pc, #404]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a64      	ldr	r2, [pc, #400]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 80063c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80063ce:	f7fb fb11 	bl	80019f4 <HAL_GetTick>
 80063d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063d4:	e009      	b.n	80063ea <HAL_RCC_OscConfig+0x606>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063d6:	f7fb fb0d 	bl	80019f4 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d902      	bls.n	80063ea <HAL_RCC_OscConfig+0x606>
          {
            return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	f000 be10 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063ea:	4b5b      	ldr	r3, [pc, #364]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0ef      	beq.n	80063d6 <HAL_RCC_OscConfig+0x5f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80063f6:	4b58      	ldr	r3, [pc, #352]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	041b      	lsls	r3, r3, #16
 8006404:	4954      	ldr	r1, [pc, #336]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 8006406:	4313      	orrs	r3, r2
 8006408:	610b      	str	r3, [r1, #16]
 800640a:	e019      	b.n	8006440 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800640c:	4b52      	ldr	r3, [pc, #328]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a51      	ldr	r2, [pc, #324]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 8006412:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006416:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006418:	f7fb faec 	bl	80019f4 <HAL_GetTick>
 800641c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800641e:	e009      	b.n	8006434 <HAL_RCC_OscConfig+0x650>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006420:	f7fb fae8 	bl	80019f4 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d902      	bls.n	8006434 <HAL_RCC_OscConfig+0x650>
          {
            return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	f000 bdeb 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006434:	4b48      	ldr	r3, [pc, #288]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1ef      	bne.n	8006420 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 80ee 	beq.w	800662a <HAL_RCC_OscConfig+0x846>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d009      	beq.n	800646a <HAL_RCC_OscConfig+0x686>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800645e:	d004      	beq.n	800646a <HAL_RCC_OscConfig+0x686>
 8006460:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8006464:	483d      	ldr	r0, [pc, #244]	@ (800655c <HAL_RCC_OscConfig+0x778>)
 8006466:	f7fa fdc3 	bl	8000ff0 <assert_failed>

    FlagStatus  pwrclkchanged = RESET;
 800646a:	2300      	movs	r3, #0
 800646c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006470:	4b39      	ldr	r3, [pc, #228]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 8006472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b00      	cmp	r3, #0
 800647c:	d111      	bne.n	80064a2 <HAL_RCC_OscConfig+0x6be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800647e:	4b36      	ldr	r3, [pc, #216]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 8006480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006484:	4a34      	ldr	r2, [pc, #208]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 8006486:	f043 0304 	orr.w	r3, r3, #4
 800648a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800648e:	4b32      	ldr	r3, [pc, #200]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 8006490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064a2:	4b2f      	ldr	r3, [pc, #188]	@ (8006560 <HAL_RCC_OscConfig+0x77c>)
 80064a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d119      	bne.n	80064e2 <HAL_RCC_OscConfig+0x6fe>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80064ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006560 <HAL_RCC_OscConfig+0x77c>)
 80064b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006560 <HAL_RCC_OscConfig+0x77c>)
 80064b4:	f043 0301 	orr.w	r3, r3, #1
 80064b8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ba:	f7fb fa9b 	bl	80019f4 <HAL_GetTick>
 80064be:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064c0:	e009      	b.n	80064d6 <HAL_RCC_OscConfig+0x6f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064c2:	f7fb fa97 	bl	80019f4 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d902      	bls.n	80064d6 <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	f000 bd9a 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064d6:	4b22      	ldr	r3, [pc, #136]	@ (8006560 <HAL_RCC_OscConfig+0x77c>)
 80064d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0ef      	beq.n	80064c2 <HAL_RCC_OscConfig+0x6de>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d076      	beq.n	80065d8 <HAL_RCC_OscConfig+0x7f4>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80064ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 80064ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064f0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d009      	beq.n	800650e <HAL_RCC_OscConfig+0x72a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006502:	d004      	beq.n	800650e <HAL_RCC_OscConfig+0x72a>
 8006504:	f240 312a 	movw	r1, #810	@ 0x32a
 8006508:	4814      	ldr	r0, [pc, #80]	@ (800655c <HAL_RCC_OscConfig+0x778>)
 800650a:	f7fa fd71 	bl	8000ff0 <assert_failed>

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699a      	ldr	r2, [r3, #24]
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006518:	429a      	cmp	r2, r3
 800651a:	d03f      	beq.n	800659c <HAL_RCC_OscConfig+0x7b8>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d007      	beq.n	8006536 <HAL_RCC_OscConfig+0x752>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800652c:	2b00      	cmp	r3, #0
 800652e:	d102      	bne.n	8006536 <HAL_RCC_OscConfig+0x752>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	f000 bd6a 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d022      	beq.n	8006586 <HAL_RCC_OscConfig+0x7a2>
        {
          __HAL_RCC_LSI_DISABLE();
 8006540:	4b05      	ldr	r3, [pc, #20]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 8006542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006546:	4a04      	ldr	r2, [pc, #16]	@ (8006558 <HAL_RCC_OscConfig+0x774>)
 8006548:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800654c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8006550:	f7fb fa50 	bl	80019f4 <HAL_GetTick>
 8006554:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006556:	e00f      	b.n	8006578 <HAL_RCC_OscConfig+0x794>
 8006558:	46020c00 	.word	0x46020c00
 800655c:	0801009c 	.word	0x0801009c
 8006560:	46020800 	.word	0x46020800
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006564:	f7fb fa46 	bl	80019f4 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	2b05      	cmp	r3, #5
 8006570:	d902      	bls.n	8006578 <HAL_RCC_OscConfig+0x794>
            {
              return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	f000 bd49 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006578:	4baa      	ldr	r3, [pc, #680]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 800657a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800657e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1ee      	bne.n	8006564 <HAL_RCC_OscConfig+0x780>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006586:	4ba7      	ldr	r3, [pc, #668]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800658c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	49a3      	ldr	r1, [pc, #652]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006596:	4313      	orrs	r3, r2
 8006598:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800659c:	4ba1      	ldr	r3, [pc, #644]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 800659e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065a2:	4aa0      	ldr	r2, [pc, #640]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 80065a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80065ac:	f7fb fa22 	bl	80019f4 <HAL_GetTick>
 80065b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80065b2:	e009      	b.n	80065c8 <HAL_RCC_OscConfig+0x7e4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065b4:	f7fb fa1e 	bl	80019f4 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b05      	cmp	r3, #5
 80065c0:	d902      	bls.n	80065c8 <HAL_RCC_OscConfig+0x7e4>
        {
          return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	f000 bd21 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80065c8:	4b96      	ldr	r3, [pc, #600]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 80065ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d0ee      	beq.n	80065b4 <HAL_RCC_OscConfig+0x7d0>
 80065d6:	e01c      	b.n	8006612 <HAL_RCC_OscConfig+0x82e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80065d8:	4b92      	ldr	r3, [pc, #584]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 80065da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065de:	4a91      	ldr	r2, [pc, #580]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 80065e0:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80065e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80065e8:	f7fb fa04 	bl	80019f4 <HAL_GetTick>
 80065ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80065ee:	e009      	b.n	8006604 <HAL_RCC_OscConfig+0x820>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065f0:	f7fb fa00 	bl	80019f4 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b05      	cmp	r3, #5
 80065fc:	d902      	bls.n	8006604 <HAL_RCC_OscConfig+0x820>
        {
          return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	f000 bd03 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006604:	4b87      	ldr	r3, [pc, #540]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800660a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1ee      	bne.n	80065f0 <HAL_RCC_OscConfig+0x80c>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006612:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006616:	2b01      	cmp	r3, #1
 8006618:	d107      	bne.n	800662a <HAL_RCC_OscConfig+0x846>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800661a:	4b82      	ldr	r3, [pc, #520]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 800661c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006620:	4a80      	ldr	r2, [pc, #512]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006622:	f023 0304 	bic.w	r3, r3, #4
 8006626:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 8131 	beq.w	800689a <HAL_RCC_OscConfig+0xab6>
  {
    FlagStatus pwrclkchanged = RESET;
 8006638:	2300      	movs	r3, #0
 800663a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d014      	beq.n	8006670 <HAL_RCC_OscConfig+0x88c>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b81      	cmp	r3, #129	@ 0x81
 800664c:	d010      	beq.n	8006670 <HAL_RCC_OscConfig+0x88c>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d00c      	beq.n	8006670 <HAL_RCC_OscConfig+0x88c>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	2b05      	cmp	r3, #5
 800665c:	d008      	beq.n	8006670 <HAL_RCC_OscConfig+0x88c>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2b85      	cmp	r3, #133	@ 0x85
 8006664:	d004      	beq.n	8006670 <HAL_RCC_OscConfig+0x88c>
 8006666:	f240 3175 	movw	r1, #885	@ 0x375
 800666a:	486f      	ldr	r0, [pc, #444]	@ (8006828 <HAL_RCC_OscConfig+0xa44>)
 800666c:	f7fa fcc0 	bl	8000ff0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006670:	4b6c      	ldr	r3, [pc, #432]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b00      	cmp	r3, #0
 800667c:	d111      	bne.n	80066a2 <HAL_RCC_OscConfig+0x8be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800667e:	4b69      	ldr	r3, [pc, #420]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006680:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006684:	4a67      	ldr	r2, [pc, #412]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006686:	f043 0304 	orr.w	r3, r3, #4
 800668a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800668e:	4b65      	ldr	r3, [pc, #404]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006690:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	613b      	str	r3, [r7, #16]
 800669a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800669c:	2301      	movs	r3, #1
 800669e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80066a2:	4b62      	ldr	r3, [pc, #392]	@ (800682c <HAL_RCC_OscConfig+0xa48>)
 80066a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d119      	bne.n	80066e2 <HAL_RCC_OscConfig+0x8fe>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80066ae:	4b5f      	ldr	r3, [pc, #380]	@ (800682c <HAL_RCC_OscConfig+0xa48>)
 80066b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b2:	4a5e      	ldr	r2, [pc, #376]	@ (800682c <HAL_RCC_OscConfig+0xa48>)
 80066b4:	f043 0301 	orr.w	r3, r3, #1
 80066b8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066ba:	f7fb f99b 	bl	80019f4 <HAL_GetTick>
 80066be:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80066c0:	e009      	b.n	80066d6 <HAL_RCC_OscConfig+0x8f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066c2:	f7fb f997 	bl	80019f4 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d902      	bls.n	80066d6 <HAL_RCC_OscConfig+0x8f2>
        {
          return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	f000 bc9a 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80066d6:	4b55      	ldr	r3, [pc, #340]	@ (800682c <HAL_RCC_OscConfig+0xa48>)
 80066d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0ef      	beq.n	80066c2 <HAL_RCC_OscConfig+0x8de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d01f      	beq.n	800672e <HAL_RCC_OscConfig+0x94a>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d010      	beq.n	800671c <HAL_RCC_OscConfig+0x938>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80066fa:	4b4a      	ldr	r3, [pc, #296]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 80066fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006700:	4a48      	ldr	r2, [pc, #288]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006702:	f043 0304 	orr.w	r3, r3, #4
 8006706:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800670a:	4b46      	ldr	r3, [pc, #280]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 800670c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006710:	4a44      	ldr	r2, [pc, #272]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006712:	f043 0301 	orr.w	r3, r3, #1
 8006716:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800671a:	e018      	b.n	800674e <HAL_RCC_OscConfig+0x96a>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800671c:	4b41      	ldr	r3, [pc, #260]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 800671e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006722:	4a40      	ldr	r2, [pc, #256]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006724:	f043 0301 	orr.w	r3, r3, #1
 8006728:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800672c:	e00f      	b.n	800674e <HAL_RCC_OscConfig+0x96a>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800672e:	4b3d      	ldr	r3, [pc, #244]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006734:	4a3b      	ldr	r2, [pc, #236]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006736:	f023 0301 	bic.w	r3, r3, #1
 800673a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800673e:	4b39      	ldr	r3, [pc, #228]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006744:	4a37      	ldr	r2, [pc, #220]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006746:	f023 0304 	bic.w	r3, r3, #4
 800674a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d056      	beq.n	8006804 <HAL_RCC_OscConfig+0xa20>
    {
      tickstart = HAL_GetTick();
 8006756:	f7fb f94d 	bl	80019f4 <HAL_GetTick>
 800675a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800675c:	e00b      	b.n	8006776 <HAL_RCC_OscConfig+0x992>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800675e:	f7fb f949 	bl	80019f4 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800676c:	4293      	cmp	r3, r2
 800676e:	d902      	bls.n	8006776 <HAL_RCC_OscConfig+0x992>
        {
          return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	f000 bc4a 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006776:	4b2b      	ldr	r3, [pc, #172]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0ec      	beq.n	800675e <HAL_RCC_OscConfig+0x97a>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800678c:	2b00      	cmp	r3, #0
 800678e:	d01c      	beq.n	80067ca <HAL_RCC_OscConfig+0x9e6>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006790:	4b24      	ldr	r3, [pc, #144]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006796:	4a23      	ldr	r2, [pc, #140]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 8006798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800679c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80067a0:	e00b      	b.n	80067ba <HAL_RCC_OscConfig+0x9d6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a2:	f7fb f927 	bl	80019f4 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d902      	bls.n	80067ba <HAL_RCC_OscConfig+0x9d6>
          {
            return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	f000 bc28 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80067ba:	4b1a      	ldr	r3, [pc, #104]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 80067bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0ec      	beq.n	80067a2 <HAL_RCC_OscConfig+0x9be>
 80067c8:	e05b      	b.n	8006882 <HAL_RCC_OscConfig+0xa9e>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80067ca:	4b16      	ldr	r3, [pc, #88]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 80067cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067d0:	4a14      	ldr	r2, [pc, #80]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 80067d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80067da:	e00b      	b.n	80067f4 <HAL_RCC_OscConfig+0xa10>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067dc:	f7fb f90a 	bl	80019f4 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d902      	bls.n	80067f4 <HAL_RCC_OscConfig+0xa10>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	f000 bc0b 	b.w	800700a <HAL_RCC_OscConfig+0x1226>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80067f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006824 <HAL_RCC_OscConfig+0xa40>)
 80067f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1ec      	bne.n	80067dc <HAL_RCC_OscConfig+0x9f8>
 8006802:	e03e      	b.n	8006882 <HAL_RCC_OscConfig+0xa9e>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006804:	f7fb f8f6 	bl	80019f4 <HAL_GetTick>
 8006808:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800680a:	e011      	b.n	8006830 <HAL_RCC_OscConfig+0xa4c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800680c:	f7fb f8f2 	bl	80019f4 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800681a:	4293      	cmp	r3, r2
 800681c:	d908      	bls.n	8006830 <HAL_RCC_OscConfig+0xa4c>
        {
          return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e3f3      	b.n	800700a <HAL_RCC_OscConfig+0x1226>
 8006822:	bf00      	nop
 8006824:	46020c00 	.word	0x46020c00
 8006828:	0801009c 	.word	0x0801009c
 800682c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006830:	4b62      	ldr	r3, [pc, #392]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 8006832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e6      	bne.n	800680c <HAL_RCC_OscConfig+0xa28>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800683e:	4b5f      	ldr	r3, [pc, #380]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 8006840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01a      	beq.n	8006882 <HAL_RCC_OscConfig+0xa9e>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800684c:	4b5b      	ldr	r3, [pc, #364]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 800684e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006852:	4a5a      	ldr	r2, [pc, #360]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 8006854:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006858:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800685c:	e00a      	b.n	8006874 <HAL_RCC_OscConfig+0xa90>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800685e:	f7fb f8c9 	bl	80019f4 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800686c:	4293      	cmp	r3, r2
 800686e:	d901      	bls.n	8006874 <HAL_RCC_OscConfig+0xa90>
          {
            return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e3ca      	b.n	800700a <HAL_RCC_OscConfig+0x1226>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006874:	4b51      	ldr	r3, [pc, #324]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 8006876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800687a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1ed      	bne.n	800685e <HAL_RCC_OscConfig+0xa7a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006882:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006886:	2b01      	cmp	r3, #1
 8006888:	d107      	bne.n	800689a <HAL_RCC_OscConfig+0xab6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800688a:	4b4c      	ldr	r3, [pc, #304]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 800688c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006890:	4a4a      	ldr	r2, [pc, #296]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 8006892:	f023 0304 	bic.w	r3, r3, #4
 8006896:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0320 	and.w	r3, r3, #32
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d044      	beq.n	8006930 <HAL_RCC_OscConfig+0xb4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d009      	beq.n	80068c2 <HAL_RCC_OscConfig+0xade>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068b6:	d004      	beq.n	80068c2 <HAL_RCC_OscConfig+0xade>
 80068b8:	f240 31f7 	movw	r1, #1015	@ 0x3f7
 80068bc:	4840      	ldr	r0, [pc, #256]	@ (80069c0 <HAL_RCC_OscConfig+0xbdc>)
 80068be:	f7fa fb97 	bl	8000ff0 <assert_failed>

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d019      	beq.n	80068fe <HAL_RCC_OscConfig+0xb1a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80068ca:	4b3c      	ldr	r3, [pc, #240]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a3b      	ldr	r2, [pc, #236]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 80068d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80068d4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80068d6:	f7fb f88d 	bl	80019f4 <HAL_GetTick>
 80068da:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80068dc:	e008      	b.n	80068f0 <HAL_RCC_OscConfig+0xb0c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068de:	f7fb f889 	bl	80019f4 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCC_OscConfig+0xb0c>
        {
          return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e38c      	b.n	800700a <HAL_RCC_OscConfig+0x1226>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80068f0:	4b32      	ldr	r3, [pc, #200]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0f0      	beq.n	80068de <HAL_RCC_OscConfig+0xafa>
 80068fc:	e018      	b.n	8006930 <HAL_RCC_OscConfig+0xb4c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80068fe:	4b2f      	ldr	r3, [pc, #188]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a2e      	ldr	r2, [pc, #184]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 8006904:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006908:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800690a:	f7fb f873 	bl	80019f4 <HAL_GetTick>
 800690e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006910:	e008      	b.n	8006924 <HAL_RCC_OscConfig+0xb40>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006912:	f7fb f86f 	bl	80019f4 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b02      	cmp	r3, #2
 800691e:	d901      	bls.n	8006924 <HAL_RCC_OscConfig+0xb40>
        {
          return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e372      	b.n	800700a <HAL_RCC_OscConfig+0x1226>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006924:	4b25      	ldr	r3, [pc, #148]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1f0      	bne.n	8006912 <HAL_RCC_OscConfig+0xb2e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006938:	2b00      	cmp	r3, #0
 800693a:	d049      	beq.n	80069d0 <HAL_RCC_OscConfig+0xbec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006940:	2b00      	cmp	r3, #0
 8006942:	d009      	beq.n	8006958 <HAL_RCC_OscConfig+0xb74>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006948:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800694c:	d004      	beq.n	8006958 <HAL_RCC_OscConfig+0xb74>
 800694e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8006952:	481b      	ldr	r0, [pc, #108]	@ (80069c0 <HAL_RCC_OscConfig+0xbdc>)
 8006954:	f7fa fb4c 	bl	8000ff0 <assert_failed>

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695c:	2b00      	cmp	r3, #0
 800695e:	d019      	beq.n	8006994 <HAL_RCC_OscConfig+0xbb0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006960:	4b16      	ldr	r3, [pc, #88]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a15      	ldr	r2, [pc, #84]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 8006966:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800696a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800696c:	f7fb f842 	bl	80019f4 <HAL_GetTick>
 8006970:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0xba2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006974:	f7fb f83e 	bl	80019f4 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0xba2>
        {
          return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e341      	b.n	800700a <HAL_RCC_OscConfig+0x1226>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006986:	4b0d      	ldr	r3, [pc, #52]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0f0      	beq.n	8006974 <HAL_RCC_OscConfig+0xb90>
 8006992:	e01d      	b.n	80069d0 <HAL_RCC_OscConfig+0xbec>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006994:	4b09      	ldr	r3, [pc, #36]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a08      	ldr	r2, [pc, #32]	@ (80069bc <HAL_RCC_OscConfig+0xbd8>)
 800699a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800699e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80069a0:	f7fb f828 	bl	80019f4 <HAL_GetTick>
 80069a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80069a6:	e00d      	b.n	80069c4 <HAL_RCC_OscConfig+0xbe0>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80069a8:	f7fb f824 	bl	80019f4 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d906      	bls.n	80069c4 <HAL_RCC_OscConfig+0xbe0>
        {
          return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e327      	b.n	800700a <HAL_RCC_OscConfig+0x1226>
 80069ba:	bf00      	nop
 80069bc:	46020c00 	.word	0x46020c00
 80069c0:	0801009c 	.word	0x0801009c
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80069c4:	4b77      	ldr	r3, [pc, #476]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1eb      	bne.n	80069a8 <HAL_RCC_OscConfig+0xbc4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 80ed 	beq.w	8006bb8 <HAL_RCC_OscConfig+0xdd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d008      	beq.n	80069f8 <HAL_RCC_OscConfig+0xc14>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ea:	2b10      	cmp	r3, #16
 80069ec:	d004      	beq.n	80069f8 <HAL_RCC_OscConfig+0xc14>
 80069ee:	f44f 6189 	mov.w	r1, #1096	@ 0x448
 80069f2:	486d      	ldr	r0, [pc, #436]	@ (8006ba8 <HAL_RCC_OscConfig+0xdc4>)
 80069f4:	f7fa fafc 	bl	8000ff0 <assert_failed>
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d04f      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xcbc>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a08:	d04a      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xcbc>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a12:	d045      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xcbc>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a18:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a1c:	d040      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xcbc>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a26:	d03b      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xcbc>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006a30:	d036      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xcbc>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a36:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8006a3a:	d031      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xcbc>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a40:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 8006a44:	d02c      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xcbc>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a4e:	d027      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xcbc>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a54:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8006a58:	d022      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xcbc>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a5e:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8006a62:	d01d      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xcbc>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a68:	f1b3 6f30 	cmp.w	r3, #184549376	@ 0xb000000
 8006a6c:	d018      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xcbc>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a72:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006a76:	d013      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xcbc>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7c:	f1b3 6f50 	cmp.w	r3, #218103808	@ 0xd000000
 8006a80:	d00e      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xcbc>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a86:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 8006a8a:	d009      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xcbc>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a94:	d004      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xcbc>
 8006a96:	f240 4149 	movw	r1, #1097	@ 0x449
 8006a9a:	4843      	ldr	r0, [pc, #268]	@ (8006ba8 <HAL_RCC_OscConfig+0xdc4>)
 8006a9c:	f7fa faa8 	bl	8000ff0 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	2bff      	cmp	r3, #255	@ 0xff
 8006aa6:	d904      	bls.n	8006ab2 <HAL_RCC_OscConfig+0xcce>
 8006aa8:	f240 414a 	movw	r1, #1098	@ 0x44a
 8006aac:	483e      	ldr	r0, [pc, #248]	@ (8006ba8 <HAL_RCC_OscConfig+0xdc4>)
 8006aae:	f7fa fa9f 	bl	8000ff0 <assert_failed>

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d060      	beq.n	8006b7c <HAL_RCC_OscConfig+0xd98>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006aba:	4b3a      	ldr	r3, [pc, #232]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	4a39      	ldr	r2, [pc, #228]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 8006ac0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ac4:	6093      	str	r3, [r2, #8]
 8006ac6:	4b37      	ldr	r3, [pc, #220]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad2:	4934      	ldr	r1, [pc, #208]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006adc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006ae0:	d309      	bcc.n	8006af6 <HAL_RCC_OscConfig+0xd12>
 8006ae2:	4b30      	ldr	r3, [pc, #192]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f023 021f 	bic.w	r2, r3, #31
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	492d      	ldr	r1, [pc, #180]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60cb      	str	r3, [r1, #12]
 8006af4:	e028      	b.n	8006b48 <HAL_RCC_OscConfig+0xd64>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	da0a      	bge.n	8006b14 <HAL_RCC_OscConfig+0xd30>
 8006afe:	4b29      	ldr	r3, [pc, #164]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	015b      	lsls	r3, r3, #5
 8006b0c:	4925      	ldr	r1, [pc, #148]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60cb      	str	r3, [r1, #12]
 8006b12:	e019      	b.n	8006b48 <HAL_RCC_OscConfig+0xd64>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b1c:	d30a      	bcc.n	8006b34 <HAL_RCC_OscConfig+0xd50>
 8006b1e:	4b21      	ldr	r3, [pc, #132]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	029b      	lsls	r3, r3, #10
 8006b2c:	491d      	ldr	r1, [pc, #116]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	60cb      	str	r3, [r1, #12]
 8006b32:	e009      	b.n	8006b48 <HAL_RCC_OscConfig+0xd64>
 8006b34:	4b1b      	ldr	r3, [pc, #108]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	03db      	lsls	r3, r3, #15
 8006b42:	4918      	ldr	r1, [pc, #96]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006b48:	4b16      	ldr	r3, [pc, #88]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a15      	ldr	r2, [pc, #84]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 8006b4e:	f043 0310 	orr.w	r3, r3, #16
 8006b52:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006b54:	f7fa ff4e 	bl	80019f4 <HAL_GetTick>
 8006b58:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006b5a:	e008      	b.n	8006b6e <HAL_RCC_OscConfig+0xd8a>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006b5c:	f7fa ff4a 	bl	80019f4 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0xd8a>
        {
          return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e24d      	b.n	800700a <HAL_RCC_OscConfig+0x1226>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0320 	and.w	r3, r3, #32
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0f0      	beq.n	8006b5c <HAL_RCC_OscConfig+0xd78>
 8006b7a:	e01d      	b.n	8006bb8 <HAL_RCC_OscConfig+0xdd4>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006b7c:	4b09      	ldr	r3, [pc, #36]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a08      	ldr	r2, [pc, #32]	@ (8006ba4 <HAL_RCC_OscConfig+0xdc0>)
 8006b82:	f023 0310 	bic.w	r3, r3, #16
 8006b86:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006b88:	f7fa ff34 	bl	80019f4 <HAL_GetTick>
 8006b8c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006b8e:	e00d      	b.n	8006bac <HAL_RCC_OscConfig+0xdc8>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006b90:	f7fa ff30 	bl	80019f4 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d906      	bls.n	8006bac <HAL_RCC_OscConfig+0xdc8>
        {
          return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e233      	b.n	800700a <HAL_RCC_OscConfig+0x1226>
 8006ba2:	bf00      	nop
 8006ba4:	46020c00 	.word	0x46020c00
 8006ba8:	0801009c 	.word	0x0801009c
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006bac:	4b60      	ldr	r3, [pc, #384]	@ (8006d30 <HAL_RCC_OscConfig+0xf4c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1eb      	bne.n	8006b90 <HAL_RCC_OscConfig+0xdac>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00c      	beq.n	8006bda <HAL_RCC_OscConfig+0xdf6>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d008      	beq.n	8006bda <HAL_RCC_OscConfig+0xdf6>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d004      	beq.n	8006bda <HAL_RCC_OscConfig+0xdf6>
 8006bd0:	f240 4177 	movw	r1, #1143	@ 0x477
 8006bd4:	4857      	ldr	r0, [pc, #348]	@ (8006d34 <HAL_RCC_OscConfig+0xf50>)
 8006bd6:	f7fa fa0b 	bl	8000ff0 <assert_failed>

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 8212 	beq.w	8007008 <HAL_RCC_OscConfig+0x1224>
  {
    FlagStatus  pwrclkchanged = RESET;
 8006be4:	2300      	movs	r3, #0
 8006be6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bea:	4b51      	ldr	r3, [pc, #324]	@ (8006d30 <HAL_RCC_OscConfig+0xf4c>)
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f003 030c 	and.w	r3, r3, #12
 8006bf2:	2b0c      	cmp	r3, #12
 8006bf4:	f000 818b 	beq.w	8006f0e <HAL_RCC_OscConfig+0x112a>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	f040 8164 	bne.w	8006eca <HAL_RCC_OscConfig+0x10e6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLMBOOST_VALUE(pRCC_OscInitStruct->PLL.PLLMBOOST));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d02c      	beq.n	8006c64 <HAL_RCC_OscConfig+0xe80>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c12:	d027      	beq.n	8006c64 <HAL_RCC_OscConfig+0xe80>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c1c:	d022      	beq.n	8006c64 <HAL_RCC_OscConfig+0xe80>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c26:	d01d      	beq.n	8006c64 <HAL_RCC_OscConfig+0xe80>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c30:	d018      	beq.n	8006c64 <HAL_RCC_OscConfig+0xe80>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c36:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006c3a:	d013      	beq.n	8006c64 <HAL_RCC_OscConfig+0xe80>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c40:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006c44:	d00e      	beq.n	8006c64 <HAL_RCC_OscConfig+0xe80>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c4a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8006c4e:	d009      	beq.n	8006c64 <HAL_RCC_OscConfig+0xe80>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c58:	d004      	beq.n	8006c64 <HAL_RCC_OscConfig+0xe80>
 8006c5a:	f240 4183 	movw	r1, #1155	@ 0x483
 8006c5e:	4835      	ldr	r0, [pc, #212]	@ (8006d34 <HAL_RCC_OscConfig+0xf50>)
 8006c60:	f7fa f9c6 	bl	8000ff0 <assert_failed>
        assert_param(IS_RCC_PLLSOURCE(pRCC_OscInitStruct->PLL.PLLSource));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d00c      	beq.n	8006c86 <HAL_RCC_OscConfig+0xea2>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d008      	beq.n	8006c86 <HAL_RCC_OscConfig+0xea2>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d004      	beq.n	8006c86 <HAL_RCC_OscConfig+0xea2>
 8006c7c:	f240 4184 	movw	r1, #1156	@ 0x484
 8006c80:	482c      	ldr	r0, [pc, #176]	@ (8006d34 <HAL_RCC_OscConfig+0xf50>)
 8006c82:	f7fa f9b5 	bl	8000ff0 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(pRCC_OscInitStruct->PLL.PLLM));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <HAL_RCC_OscConfig+0xeb2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c92:	2b10      	cmp	r3, #16
 8006c94:	d904      	bls.n	8006ca0 <HAL_RCC_OscConfig+0xebc>
 8006c96:	f240 4185 	movw	r1, #1157	@ 0x485
 8006c9a:	4826      	ldr	r0, [pc, #152]	@ (8006d34 <HAL_RCC_OscConfig+0xf50>)
 8006c9c:	f7fa f9a8 	bl	8000ff0 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(pRCC_OscInitStruct->PLL.PLLN));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d904      	bls.n	8006cb2 <HAL_RCC_OscConfig+0xece>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cb0:	d904      	bls.n	8006cbc <HAL_RCC_OscConfig+0xed8>
 8006cb2:	f240 4186 	movw	r1, #1158	@ 0x486
 8006cb6:	481f      	ldr	r0, [pc, #124]	@ (8006d34 <HAL_RCC_OscConfig+0xf50>)
 8006cb8:	f7fa f99a 	bl	8000ff0 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <HAL_RCC_OscConfig+0xee8>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cc8:	2b80      	cmp	r3, #128	@ 0x80
 8006cca:	d904      	bls.n	8006cd6 <HAL_RCC_OscConfig+0xef2>
 8006ccc:	f240 4187 	movw	r1, #1159	@ 0x487
 8006cd0:	4818      	ldr	r0, [pc, #96]	@ (8006d34 <HAL_RCC_OscConfig+0xf50>)
 8006cd2:	f7fa f98d 	bl	8000ff0 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_RCC_OscConfig+0xf02>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ce2:	2b80      	cmp	r3, #128	@ 0x80
 8006ce4:	d904      	bls.n	8006cf0 <HAL_RCC_OscConfig+0xf0c>
 8006ce6:	f44f 6191 	mov.w	r1, #1160	@ 0x488
 8006cea:	4812      	ldr	r0, [pc, #72]	@ (8006d34 <HAL_RCC_OscConfig+0xf50>)
 8006cec:	f7fa f980 	bl	8000ff0 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <HAL_RCC_OscConfig+0xf1c>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cfc:	2b80      	cmp	r3, #128	@ 0x80
 8006cfe:	d904      	bls.n	8006d0a <HAL_RCC_OscConfig+0xf26>
 8006d00:	f240 4189 	movw	r1, #1161	@ 0x489
 8006d04:	480b      	ldr	r0, [pc, #44]	@ (8006d34 <HAL_RCC_OscConfig+0xf50>)
 8006d06:	f7fa f973 	bl	8000ff0 <assert_failed>

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006d0a:	4b09      	ldr	r3, [pc, #36]	@ (8006d30 <HAL_RCC_OscConfig+0xf4c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a08      	ldr	r2, [pc, #32]	@ (8006d30 <HAL_RCC_OscConfig+0xf4c>)
 8006d10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d14:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006d16:	f7fa fe6d 	bl	80019f4 <HAL_GetTick>
 8006d1a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006d1c:	e00c      	b.n	8006d38 <HAL_RCC_OscConfig+0xf54>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d1e:	f7fa fe69 	bl	80019f4 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d905      	bls.n	8006d38 <HAL_RCC_OscConfig+0xf54>
          {
            return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e16c      	b.n	800700a <HAL_RCC_OscConfig+0x1226>
 8006d30:	46020c00 	.word	0x46020c00
 8006d34:	0801009c 	.word	0x0801009c
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006d38:	4b98      	ldr	r3, [pc, #608]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1ec      	bne.n	8006d1e <HAL_RCC_OscConfig+0xf3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d44:	4b95      	ldr	r3, [pc, #596]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d4a:	f003 0304 	and.w	r3, r3, #4
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d111      	bne.n	8006d76 <HAL_RCC_OscConfig+0xf92>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006d52:	4b92      	ldr	r3, [pc, #584]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d58:	4a90      	ldr	r2, [pc, #576]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006d5a:	f043 0304 	orr.w	r3, r3, #4
 8006d5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006d62:	4b8e      	ldr	r3, [pc, #568]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006d70:	2301      	movs	r3, #1
 8006d72:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006d76:	4b8a      	ldr	r3, [pc, #552]	@ (8006fa0 <HAL_RCC_OscConfig+0x11bc>)
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d82:	d102      	bne.n	8006d8a <HAL_RCC_OscConfig+0xfa6>
        {
          pwrboosten = SET;
 8006d84:	2301      	movs	r3, #1
 8006d86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006d8a:	4b85      	ldr	r3, [pc, #532]	@ (8006fa0 <HAL_RCC_OscConfig+0x11bc>)
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	4a84      	ldr	r2, [pc, #528]	@ (8006fa0 <HAL_RCC_OscConfig+0x11bc>)
 8006d90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d94:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006d96:	4b81      	ldr	r3, [pc, #516]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d9e:	f023 0303 	bic.w	r3, r3, #3
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006daa:	3a01      	subs	r2, #1
 8006dac:	0212      	lsls	r2, r2, #8
 8006dae:	4311      	orrs	r1, r2
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006db4:	430a      	orrs	r2, r1
 8006db6:	4979      	ldr	r1, [pc, #484]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	628b      	str	r3, [r1, #40]	@ 0x28
 8006dbc:	4b77      	ldr	r3, [pc, #476]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006dbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dc0:	4b78      	ldr	r3, [pc, #480]	@ (8006fa4 <HAL_RCC_OscConfig+0x11c0>)
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006dc8:	3a01      	subs	r2, #1
 8006dca:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006dd2:	3a01      	subs	r2, #1
 8006dd4:	0252      	lsls	r2, r2, #9
 8006dd6:	b292      	uxth	r2, r2
 8006dd8:	4311      	orrs	r1, r2
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006dde:	3a01      	subs	r2, #1
 8006de0:	0412      	lsls	r2, r2, #16
 8006de2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006de6:	4311      	orrs	r1, r2
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006dec:	3a01      	subs	r2, #1
 8006dee:	0612      	lsls	r2, r2, #24
 8006df0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006df4:	430a      	orrs	r2, r1
 8006df6:	4969      	ldr	r1, [pc, #420]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLN,
                             pRCC_OscInitStruct->PLL.PLLP,
                             pRCC_OscInitStruct->PLL.PLLQ,
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e04:	d304      	bcc.n	8006e10 <HAL_RCC_OscConfig+0x102c>
 8006e06:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8006e0a:	4867      	ldr	r0, [pc, #412]	@ (8006fa8 <HAL_RCC_OscConfig+0x11c4>)
 8006e0c:	f7fa f8f0 	bl	8000ff0 <assert_failed>

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006e10:	4b62      	ldr	r3, [pc, #392]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e14:	4a61      	ldr	r2, [pc, #388]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006e16:	f023 0310 	bic.w	r3, r3, #16
 8006e1a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e20:	4a5e      	ldr	r2, [pc, #376]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006e22:	00db      	lsls	r3, r3, #3
 8006e24:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006e26:	4b5d      	ldr	r3, [pc, #372]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2a:	4a5c      	ldr	r2, [pc, #368]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006e2c:	f043 0310 	orr.w	r3, r3, #16
 8006e30:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d008      	beq.n	8006e4c <HAL_RCC_OscConfig+0x1068>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e3e:	2b0c      	cmp	r3, #12
 8006e40:	d004      	beq.n	8006e4c <HAL_RCC_OscConfig+0x1068>
 8006e42:	f240 41bb 	movw	r1, #1211	@ 0x4bb
 8006e46:	4858      	ldr	r0, [pc, #352]	@ (8006fa8 <HAL_RCC_OscConfig+0x11c4>)
 8006e48:	f7fa f8d2 	bl	8000ff0 <assert_failed>

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006e4c:	4b53      	ldr	r3, [pc, #332]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e50:	f023 020c 	bic.w	r2, r3, #12
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e58:	4950      	ldr	r1, [pc, #320]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8006e5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d105      	bne.n	8006e72 <HAL_RCC_OscConfig+0x108e>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006e66:	4b4e      	ldr	r3, [pc, #312]	@ (8006fa0 <HAL_RCC_OscConfig+0x11bc>)
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	4a4d      	ldr	r2, [pc, #308]	@ (8006fa0 <HAL_RCC_OscConfig+0x11bc>)
 8006e6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e70:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8006e72:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d107      	bne.n	8006e8a <HAL_RCC_OscConfig+0x10a6>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006e7a:	4b48      	ldr	r3, [pc, #288]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e80:	4a46      	ldr	r2, [pc, #280]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006e82:	f023 0304 	bic.w	r3, r3, #4
 8006e86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8006e8a:	4b44      	ldr	r3, [pc, #272]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a43      	ldr	r2, [pc, #268]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006e90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e94:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006e96:	f7fa fdad 	bl	80019f4 <HAL_GetTick>
 8006e9a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006e9c:	e008      	b.n	8006eb0 <HAL_RCC_OscConfig+0x10cc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e9e:	f7fa fda9 	bl	80019f4 <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d901      	bls.n	8006eb0 <HAL_RCC_OscConfig+0x10cc>
          {
            return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e0ac      	b.n	800700a <HAL_RCC_OscConfig+0x1226>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006eb0:	4b3a      	ldr	r3, [pc, #232]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d0f0      	beq.n	8006e9e <HAL_RCC_OscConfig+0x10ba>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ebc:	4b37      	ldr	r3, [pc, #220]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec0:	4a36      	ldr	r2, [pc, #216]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006ec2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ec6:	6293      	str	r3, [r2, #40]	@ 0x28
 8006ec8:	e09e      	b.n	8007008 <HAL_RCC_OscConfig+0x1224>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006eca:	4b34      	ldr	r3, [pc, #208]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a33      	ldr	r2, [pc, #204]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006ed0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ed4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006ed6:	f7fa fd8d 	bl	80019f4 <HAL_GetTick>
 8006eda:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006edc:	e008      	b.n	8006ef0 <HAL_RCC_OscConfig+0x110c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ede:	f7fa fd89 	bl	80019f4 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCC_OscConfig+0x110c>
          {
            return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e08c      	b.n	800700a <HAL_RCC_OscConfig+0x1226>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1f0      	bne.n	8006ede <HAL_RCC_OscConfig+0x10fa>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006efc:	4b27      	ldr	r3, [pc, #156]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f00:	4a26      	ldr	r2, [pc, #152]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006f02:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006f06:	f023 0303 	bic.w	r3, r3, #3
 8006f0a:	6293      	str	r3, [r2, #40]	@ 0x28
 8006f0c:	e07c      	b.n	8007008 <HAL_RCC_OscConfig+0x1224>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006f0e:	4b23      	ldr	r3, [pc, #140]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f12:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006f14:	4b21      	ldr	r3, [pc, #132]	@ (8006f9c <HAL_RCC_OscConfig+0x11b8>)
 8006f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f18:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d039      	beq.n	8006f96 <HAL_RCC_OscConfig+0x11b2>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	f003 0203 	and.w	r2, r3, #3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d132      	bne.n	8006f96 <HAL_RCC_OscConfig+0x11b2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	0a1b      	lsrs	r3, r3, #8
 8006f34:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d129      	bne.n	8006f96 <HAL_RCC_OscConfig+0x11b2>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d122      	bne.n	8006f96 <HAL_RCC_OscConfig+0x11b2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f5a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d11a      	bne.n	8006f96 <HAL_RCC_OscConfig+0x11b2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	0a5b      	lsrs	r3, r3, #9
 8006f64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f6c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d111      	bne.n	8006f96 <HAL_RCC_OscConfig+0x11b2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	0c1b      	lsrs	r3, r3, #16
 8006f76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f7e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d108      	bne.n	8006f96 <HAL_RCC_OscConfig+0x11b2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	0e1b      	lsrs	r3, r3, #24
 8006f88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f90:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d00a      	beq.n	8006fac <HAL_RCC_OscConfig+0x11c8>
      {
        return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e037      	b.n	800700a <HAL_RCC_OscConfig+0x1226>
 8006f9a:	bf00      	nop
 8006f9c:	46020c00 	.word	0x46020c00
 8006fa0:	46020800 	.word	0x46020800
 8006fa4:	80800000 	.word	0x80800000
 8006fa8:	0801009c 	.word	0x0801009c
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006fac:	4b19      	ldr	r3, [pc, #100]	@ (8007014 <HAL_RCC_OscConfig+0x1230>)
 8006fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb0:	08db      	lsrs	r3, r3, #3
 8006fb2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d024      	beq.n	8007008 <HAL_RCC_OscConfig+0x1224>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fc6:	d304      	bcc.n	8006fd2 <HAL_RCC_OscConfig+0x11ee>
 8006fc8:	f240 510c 	movw	r1, #1292	@ 0x50c
 8006fcc:	4812      	ldr	r0, [pc, #72]	@ (8007018 <HAL_RCC_OscConfig+0x1234>)
 8006fce:	f7fa f80f 	bl	8000ff0 <assert_failed>

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006fd2:	4b10      	ldr	r3, [pc, #64]	@ (8007014 <HAL_RCC_OscConfig+0x1230>)
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8007014 <HAL_RCC_OscConfig+0x1230>)
 8006fd8:	f023 0310 	bic.w	r3, r3, #16
 8006fdc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fde:	f7fa fd09 	bl	80019f4 <HAL_GetTick>
 8006fe2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8006fe4:	bf00      	nop
 8006fe6:	f7fa fd05 	bl	80019f4 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d0f9      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x1202>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ff6:	4a07      	ldr	r2, [pc, #28]	@ (8007014 <HAL_RCC_OscConfig+0x1230>)
 8006ff8:	00db      	lsls	r3, r3, #3
 8006ffa:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006ffc:	4b05      	ldr	r3, [pc, #20]	@ (8007014 <HAL_RCC_OscConfig+0x1230>)
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007000:	4a04      	ldr	r2, [pc, #16]	@ (8007014 <HAL_RCC_OscConfig+0x1230>)
 8007002:	f043 0310 	orr.w	r3, r3, #16
 8007006:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3738      	adds	r7, #56	@ 0x38
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	46020c00 	.word	0x46020c00
 8007018:	0801009c 	.word	0x0801009c

0800701c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e326      	b.n	800767e <HAL_RCC_ClockConfig+0x662>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <HAL_RCC_ClockConfig+0x24>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b1f      	cmp	r3, #31
 800703e:	d904      	bls.n	800704a <HAL_RCC_ClockConfig+0x2e>
 8007040:	f240 5154 	movw	r1, #1364	@ 0x554
 8007044:	4827      	ldr	r0, [pc, #156]	@ (80070e4 <HAL_RCC_ClockConfig+0xc8>)
 8007046:	f7f9 ffd3 	bl	8000ff0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d031      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x98>
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d02e      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x98>
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b02      	cmp	r3, #2
 800705a:	d02b      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x98>
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	2b03      	cmp	r3, #3
 8007060:	d028      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x98>
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b04      	cmp	r3, #4
 8007066:	d025      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x98>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2b05      	cmp	r3, #5
 800706c:	d022      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x98>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b06      	cmp	r3, #6
 8007072:	d01f      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x98>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2b07      	cmp	r3, #7
 8007078:	d01c      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x98>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b08      	cmp	r3, #8
 800707e:	d019      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x98>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b09      	cmp	r3, #9
 8007084:	d016      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x98>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b0a      	cmp	r3, #10
 800708a:	d013      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x98>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2b0b      	cmp	r3, #11
 8007090:	d010      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x98>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b0c      	cmp	r3, #12
 8007096:	d00d      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x98>
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2b0d      	cmp	r3, #13
 800709c:	d00a      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x98>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b0e      	cmp	r3, #14
 80070a2:	d007      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x98>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2b0f      	cmp	r3, #15
 80070a8:	d004      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x98>
 80070aa:	f240 5155 	movw	r1, #1365	@ 0x555
 80070ae:	480d      	ldr	r0, [pc, #52]	@ (80070e4 <HAL_RCC_ClockConfig+0xc8>)
 80070b0:	f7f9 ff9e 	bl	8000ff0 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070b4:	4b0c      	ldr	r3, [pc, #48]	@ (80070e8 <HAL_RCC_ClockConfig+0xcc>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 030f 	and.w	r3, r3, #15
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d914      	bls.n	80070ec <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070c2:	4b09      	ldr	r3, [pc, #36]	@ (80070e8 <HAL_RCC_ClockConfig+0xcc>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f023 020f 	bic.w	r2, r3, #15
 80070ca:	4907      	ldr	r1, [pc, #28]	@ (80070e8 <HAL_RCC_ClockConfig+0xcc>)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070d2:	4b05      	ldr	r3, [pc, #20]	@ (80070e8 <HAL_RCC_ClockConfig+0xcc>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 030f 	and.w	r3, r3, #15
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d005      	beq.n	80070ec <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e2cc      	b.n	800767e <HAL_RCC_ClockConfig+0x662>
 80070e4:	0801009c 	.word	0x0801009c
 80070e8:	40022000 	.word	0x40022000
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0310 	and.w	r3, r3, #16
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d029      	beq.n	800714c <HAL_RCC_ClockConfig+0x130>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	695a      	ldr	r2, [r3, #20]
 80070fc:	4b8b      	ldr	r3, [pc, #556]	@ (800732c <HAL_RCC_ClockConfig+0x310>)
 80070fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007100:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007104:	429a      	cmp	r2, r3
 8007106:	d921      	bls.n	800714c <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d014      	beq.n	800713a <HAL_RCC_ClockConfig+0x11e>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	2b40      	cmp	r3, #64	@ 0x40
 8007116:	d010      	beq.n	800713a <HAL_RCC_ClockConfig+0x11e>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	2b50      	cmp	r3, #80	@ 0x50
 800711e:	d00c      	beq.n	800713a <HAL_RCC_ClockConfig+0x11e>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	2b60      	cmp	r3, #96	@ 0x60
 8007126:	d008      	beq.n	800713a <HAL_RCC_ClockConfig+0x11e>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	2b70      	cmp	r3, #112	@ 0x70
 800712e:	d004      	beq.n	800713a <HAL_RCC_ClockConfig+0x11e>
 8007130:	f240 516f 	movw	r1, #1391	@ 0x56f
 8007134:	487e      	ldr	r0, [pc, #504]	@ (8007330 <HAL_RCC_ClockConfig+0x314>)
 8007136:	f7f9 ff5b 	bl	8000ff0 <assert_failed>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800713a:	4b7c      	ldr	r3, [pc, #496]	@ (800732c <HAL_RCC_ClockConfig+0x310>)
 800713c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	4979      	ldr	r1, [pc, #484]	@ (800732c <HAL_RCC_ClockConfig+0x310>)
 8007148:	4313      	orrs	r3, r2
 800714a:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b00      	cmp	r3, #0
 8007156:	d02b      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x194>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691a      	ldr	r2, [r3, #16]
 800715c:	4b73      	ldr	r3, [pc, #460]	@ (800732c <HAL_RCC_ClockConfig+0x310>)
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	091b      	lsrs	r3, r3, #4
 8007162:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007166:	429a      	cmp	r2, r3
 8007168:	d922      	bls.n	80071b0 <HAL_RCC_ClockConfig+0x194>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d014      	beq.n	800719c <HAL_RCC_ClockConfig+0x180>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	2b40      	cmp	r3, #64	@ 0x40
 8007178:	d010      	beq.n	800719c <HAL_RCC_ClockConfig+0x180>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	2b50      	cmp	r3, #80	@ 0x50
 8007180:	d00c      	beq.n	800719c <HAL_RCC_ClockConfig+0x180>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	2b60      	cmp	r3, #96	@ 0x60
 8007188:	d008      	beq.n	800719c <HAL_RCC_ClockConfig+0x180>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	2b70      	cmp	r3, #112	@ 0x70
 8007190:	d004      	beq.n	800719c <HAL_RCC_ClockConfig+0x180>
 8007192:	f44f 61af 	mov.w	r1, #1400	@ 0x578
 8007196:	4866      	ldr	r0, [pc, #408]	@ (8007330 <HAL_RCC_ClockConfig+0x314>)
 8007198:	f7f9 ff2a 	bl	8000ff0 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800719c:	4b63      	ldr	r3, [pc, #396]	@ (800732c <HAL_RCC_ClockConfig+0x310>)
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	011b      	lsls	r3, r3, #4
 80071aa:	4960      	ldr	r1, [pc, #384]	@ (800732c <HAL_RCC_ClockConfig+0x310>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d029      	beq.n	8007210 <HAL_RCC_ClockConfig+0x1f4>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68da      	ldr	r2, [r3, #12]
 80071c0:	4b5a      	ldr	r3, [pc, #360]	@ (800732c <HAL_RCC_ClockConfig+0x310>)
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d921      	bls.n	8007210 <HAL_RCC_ClockConfig+0x1f4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d014      	beq.n	80071fe <HAL_RCC_ClockConfig+0x1e2>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	2b40      	cmp	r3, #64	@ 0x40
 80071da:	d010      	beq.n	80071fe <HAL_RCC_ClockConfig+0x1e2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	2b50      	cmp	r3, #80	@ 0x50
 80071e2:	d00c      	beq.n	80071fe <HAL_RCC_ClockConfig+0x1e2>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	2b60      	cmp	r3, #96	@ 0x60
 80071ea:	d008      	beq.n	80071fe <HAL_RCC_ClockConfig+0x1e2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	2b70      	cmp	r3, #112	@ 0x70
 80071f2:	d004      	beq.n	80071fe <HAL_RCC_ClockConfig+0x1e2>
 80071f4:	f240 5182 	movw	r1, #1410	@ 0x582
 80071f8:	484d      	ldr	r0, [pc, #308]	@ (8007330 <HAL_RCC_ClockConfig+0x314>)
 80071fa:	f7f9 fef9 	bl	8000ff0 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80071fe:	4b4b      	ldr	r3, [pc, #300]	@ (800732c <HAL_RCC_ClockConfig+0x310>)
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	4948      	ldr	r1, [pc, #288]	@ (800732c <HAL_RCC_ClockConfig+0x310>)
 800720c:	4313      	orrs	r3, r2
 800720e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d039      	beq.n	8007290 <HAL_RCC_ClockConfig+0x274>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	4b42      	ldr	r3, [pc, #264]	@ (800732c <HAL_RCC_ClockConfig+0x310>)
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	f003 030f 	and.w	r3, r3, #15
 8007228:	429a      	cmp	r2, r3
 800722a:	d931      	bls.n	8007290 <HAL_RCC_ClockConfig+0x274>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d024      	beq.n	800727e <HAL_RCC_ClockConfig+0x262>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	2b08      	cmp	r3, #8
 800723a:	d020      	beq.n	800727e <HAL_RCC_ClockConfig+0x262>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2b09      	cmp	r3, #9
 8007242:	d01c      	beq.n	800727e <HAL_RCC_ClockConfig+0x262>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	2b0a      	cmp	r3, #10
 800724a:	d018      	beq.n	800727e <HAL_RCC_ClockConfig+0x262>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2b0b      	cmp	r3, #11
 8007252:	d014      	beq.n	800727e <HAL_RCC_ClockConfig+0x262>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	2b0c      	cmp	r3, #12
 800725a:	d010      	beq.n	800727e <HAL_RCC_ClockConfig+0x262>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	2b0d      	cmp	r3, #13
 8007262:	d00c      	beq.n	800727e <HAL_RCC_ClockConfig+0x262>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	2b0e      	cmp	r3, #14
 800726a:	d008      	beq.n	800727e <HAL_RCC_ClockConfig+0x262>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	2b0f      	cmp	r3, #15
 8007272:	d004      	beq.n	800727e <HAL_RCC_ClockConfig+0x262>
 8007274:	f240 518c 	movw	r1, #1420	@ 0x58c
 8007278:	482d      	ldr	r0, [pc, #180]	@ (8007330 <HAL_RCC_ClockConfig+0x314>)
 800727a:	f7f9 feb9 	bl	8000ff0 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800727e:	4b2b      	ldr	r3, [pc, #172]	@ (800732c <HAL_RCC_ClockConfig+0x310>)
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	f023 020f 	bic.w	r2, r3, #15
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	4928      	ldr	r1, [pc, #160]	@ (800732c <HAL_RCC_ClockConfig+0x310>)
 800728c:	4313      	orrs	r3, r2
 800728e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0301 	and.w	r3, r3, #1
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 80e8 	beq.w	800746e <HAL_RCC_ClockConfig+0x452>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d010      	beq.n	80072c8 <HAL_RCC_ClockConfig+0x2ac>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d00c      	beq.n	80072c8 <HAL_RCC_ClockConfig+0x2ac>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d008      	beq.n	80072c8 <HAL_RCC_ClockConfig+0x2ac>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d004      	beq.n	80072c8 <HAL_RCC_ClockConfig+0x2ac>
 80072be:	f240 5194 	movw	r1, #1428	@ 0x594
 80072c2:	481b      	ldr	r0, [pc, #108]	@ (8007330 <HAL_RCC_ClockConfig+0x314>)
 80072c4:	f7f9 fe94 	bl	8000ff0 <assert_failed>
    FlagStatus  pwrclkchanged = RESET;
 80072c8:	2300      	movs	r3, #0
 80072ca:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d14a      	bne.n	800736a <HAL_RCC_ClockConfig+0x34e>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072d4:	4b15      	ldr	r3, [pc, #84]	@ (800732c <HAL_RCC_ClockConfig+0x310>)
 80072d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072da:	f003 0304 	and.w	r3, r3, #4
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d110      	bne.n	8007304 <HAL_RCC_ClockConfig+0x2e8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80072e2:	4b12      	ldr	r3, [pc, #72]	@ (800732c <HAL_RCC_ClockConfig+0x310>)
 80072e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072e8:	4a10      	ldr	r2, [pc, #64]	@ (800732c <HAL_RCC_ClockConfig+0x310>)
 80072ea:	f043 0304 	orr.w	r3, r3, #4
 80072ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80072f2:	4b0e      	ldr	r3, [pc, #56]	@ (800732c <HAL_RCC_ClockConfig+0x310>)
 80072f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	60bb      	str	r3, [r7, #8]
 80072fe:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007300:	2301      	movs	r3, #1
 8007302:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007304:	f7fa fb76 	bl	80019f4 <HAL_GetTick>
 8007308:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800730a:	4b0a      	ldr	r3, [pc, #40]	@ (8007334 <HAL_RCC_ClockConfig+0x318>)
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d016      	beq.n	8007344 <HAL_RCC_ClockConfig+0x328>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007316:	e00f      	b.n	8007338 <HAL_RCC_ClockConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007318:	f7fa fb6c 	bl	80019f4 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	2b02      	cmp	r3, #2
 8007324:	d908      	bls.n	8007338 <HAL_RCC_ClockConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e1a9      	b.n	800767e <HAL_RCC_ClockConfig+0x662>
 800732a:	bf00      	nop
 800732c:	46020c00 	.word	0x46020c00
 8007330:	0801009c 	.word	0x0801009c
 8007334:	46020800 	.word	0x46020800
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007338:	4b79      	ldr	r3, [pc, #484]	@ (8007520 <HAL_RCC_ClockConfig+0x504>)
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0e9      	beq.n	8007318 <HAL_RCC_ClockConfig+0x2fc>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d107      	bne.n	800735a <HAL_RCC_ClockConfig+0x33e>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800734a:	4b76      	ldr	r3, [pc, #472]	@ (8007524 <HAL_RCC_ClockConfig+0x508>)
 800734c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007350:	4a74      	ldr	r2, [pc, #464]	@ (8007524 <HAL_RCC_ClockConfig+0x508>)
 8007352:	f023 0304 	bic.w	r3, r3, #4
 8007356:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800735a:	4b72      	ldr	r3, [pc, #456]	@ (8007524 <HAL_RCC_ClockConfig+0x508>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d121      	bne.n	80073aa <HAL_RCC_ClockConfig+0x38e>
      {
        return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e189      	b.n	800767e <HAL_RCC_ClockConfig+0x662>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	2b02      	cmp	r3, #2
 8007370:	d107      	bne.n	8007382 <HAL_RCC_ClockConfig+0x366>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007372:	4b6c      	ldr	r3, [pc, #432]	@ (8007524 <HAL_RCC_ClockConfig+0x508>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d115      	bne.n	80073aa <HAL_RCC_ClockConfig+0x38e>
        {
          return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e17d      	b.n	800767e <HAL_RCC_ClockConfig+0x662>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d107      	bne.n	800739a <HAL_RCC_ClockConfig+0x37e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800738a:	4b66      	ldr	r3, [pc, #408]	@ (8007524 <HAL_RCC_ClockConfig+0x508>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	2b00      	cmp	r3, #0
 8007394:	d109      	bne.n	80073aa <HAL_RCC_ClockConfig+0x38e>
        {
          return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e171      	b.n	800767e <HAL_RCC_ClockConfig+0x662>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800739a:	4b62      	ldr	r3, [pc, #392]	@ (8007524 <HAL_RCC_ClockConfig+0x508>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <HAL_RCC_ClockConfig+0x38e>
        {
          return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e169      	b.n	800767e <HAL_RCC_ClockConfig+0x662>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80073aa:	4b5e      	ldr	r3, [pc, #376]	@ (8007524 <HAL_RCC_ClockConfig+0x508>)
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	f023 0203 	bic.w	r2, r3, #3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	495b      	ldr	r1, [pc, #364]	@ (8007524 <HAL_RCC_ClockConfig+0x508>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80073bc:	f7fa fb1a 	bl	80019f4 <HAL_GetTick>
 80073c0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d112      	bne.n	80073f0 <HAL_RCC_ClockConfig+0x3d4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073ca:	e00a      	b.n	80073e2 <HAL_RCC_ClockConfig+0x3c6>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073cc:	f7fa fb12 	bl	80019f4 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073da:	4293      	cmp	r3, r2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_ClockConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e14d      	b.n	800767e <HAL_RCC_ClockConfig+0x662>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073e2:	4b50      	ldr	r3, [pc, #320]	@ (8007524 <HAL_RCC_ClockConfig+0x508>)
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	f003 030c 	and.w	r3, r3, #12
 80073ea:	2b0c      	cmp	r3, #12
 80073ec:	d1ee      	bne.n	80073cc <HAL_RCC_ClockConfig+0x3b0>
 80073ee:	e03e      	b.n	800746e <HAL_RCC_ClockConfig+0x452>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d112      	bne.n	800741e <HAL_RCC_ClockConfig+0x402>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80073f8:	e00a      	b.n	8007410 <HAL_RCC_ClockConfig+0x3f4>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073fa:	f7fa fafb 	bl	80019f4 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007408:	4293      	cmp	r3, r2
 800740a:	d901      	bls.n	8007410 <HAL_RCC_ClockConfig+0x3f4>
          {
            return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e136      	b.n	800767e <HAL_RCC_ClockConfig+0x662>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007410:	4b44      	ldr	r3, [pc, #272]	@ (8007524 <HAL_RCC_ClockConfig+0x508>)
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	f003 030c 	and.w	r3, r3, #12
 8007418:	2b08      	cmp	r3, #8
 800741a:	d1ee      	bne.n	80073fa <HAL_RCC_ClockConfig+0x3de>
 800741c:	e027      	b.n	800746e <HAL_RCC_ClockConfig+0x452>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d11d      	bne.n	8007462 <HAL_RCC_ClockConfig+0x446>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007426:	e00a      	b.n	800743e <HAL_RCC_ClockConfig+0x422>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007428:	f7fa fae4 	bl	80019f4 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007436:	4293      	cmp	r3, r2
 8007438:	d901      	bls.n	800743e <HAL_RCC_ClockConfig+0x422>
          {
            return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e11f      	b.n	800767e <HAL_RCC_ClockConfig+0x662>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800743e:	4b39      	ldr	r3, [pc, #228]	@ (8007524 <HAL_RCC_ClockConfig+0x508>)
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	f003 030c 	and.w	r3, r3, #12
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1ee      	bne.n	8007428 <HAL_RCC_ClockConfig+0x40c>
 800744a:	e010      	b.n	800746e <HAL_RCC_ClockConfig+0x452>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800744c:	f7fa fad2 	bl	80019f4 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800745a:	4293      	cmp	r3, r2
 800745c:	d901      	bls.n	8007462 <HAL_RCC_ClockConfig+0x446>
          {
            return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e10d      	b.n	800767e <HAL_RCC_ClockConfig+0x662>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007462:	4b30      	ldr	r3, [pc, #192]	@ (8007524 <HAL_RCC_ClockConfig+0x508>)
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	f003 030c 	and.w	r3, r3, #12
 800746a:	2b04      	cmp	r3, #4
 800746c:	d1ee      	bne.n	800744c <HAL_RCC_ClockConfig+0x430>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d039      	beq.n	80074ee <HAL_RCC_ClockConfig+0x4d2>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	4b29      	ldr	r3, [pc, #164]	@ (8007524 <HAL_RCC_ClockConfig+0x508>)
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	f003 030f 	and.w	r3, r3, #15
 8007486:	429a      	cmp	r2, r3
 8007488:	d231      	bcs.n	80074ee <HAL_RCC_ClockConfig+0x4d2>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d024      	beq.n	80074dc <HAL_RCC_ClockConfig+0x4c0>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	2b08      	cmp	r3, #8
 8007498:	d020      	beq.n	80074dc <HAL_RCC_ClockConfig+0x4c0>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	2b09      	cmp	r3, #9
 80074a0:	d01c      	beq.n	80074dc <HAL_RCC_ClockConfig+0x4c0>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	2b0a      	cmp	r3, #10
 80074a8:	d018      	beq.n	80074dc <HAL_RCC_ClockConfig+0x4c0>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	2b0b      	cmp	r3, #11
 80074b0:	d014      	beq.n	80074dc <HAL_RCC_ClockConfig+0x4c0>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	2b0c      	cmp	r3, #12
 80074b8:	d010      	beq.n	80074dc <HAL_RCC_ClockConfig+0x4c0>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	2b0d      	cmp	r3, #13
 80074c0:	d00c      	beq.n	80074dc <HAL_RCC_ClockConfig+0x4c0>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	2b0e      	cmp	r3, #14
 80074c8:	d008      	beq.n	80074dc <HAL_RCC_ClockConfig+0x4c0>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	2b0f      	cmp	r3, #15
 80074d0:	d004      	beq.n	80074dc <HAL_RCC_ClockConfig+0x4c0>
 80074d2:	f240 610f 	movw	r1, #1551	@ 0x60f
 80074d6:	4814      	ldr	r0, [pc, #80]	@ (8007528 <HAL_RCC_ClockConfig+0x50c>)
 80074d8:	f7f9 fd8a 	bl	8000ff0 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80074dc:	4b11      	ldr	r3, [pc, #68]	@ (8007524 <HAL_RCC_ClockConfig+0x508>)
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	f023 020f 	bic.w	r2, r3, #15
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	490e      	ldr	r1, [pc, #56]	@ (8007524 <HAL_RCC_ClockConfig+0x508>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074ee:	4b0f      	ldr	r3, [pc, #60]	@ (800752c <HAL_RCC_ClockConfig+0x510>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 030f 	and.w	r3, r3, #15
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d219      	bcs.n	8007530 <HAL_RCC_ClockConfig+0x514>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074fc:	4b0b      	ldr	r3, [pc, #44]	@ (800752c <HAL_RCC_ClockConfig+0x510>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f023 020f 	bic.w	r2, r3, #15
 8007504:	4909      	ldr	r1, [pc, #36]	@ (800752c <HAL_RCC_ClockConfig+0x510>)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	4313      	orrs	r3, r2
 800750a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800750c:	4b07      	ldr	r3, [pc, #28]	@ (800752c <HAL_RCC_ClockConfig+0x510>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 030f 	and.w	r3, r3, #15
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	429a      	cmp	r2, r3
 8007518:	d00a      	beq.n	8007530 <HAL_RCC_ClockConfig+0x514>
    {
      return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e0af      	b.n	800767e <HAL_RCC_ClockConfig+0x662>
 800751e:	bf00      	nop
 8007520:	46020800 	.word	0x46020800
 8007524:	46020c00 	.word	0x46020c00
 8007528:	0801009c 	.word	0x0801009c
 800752c:	40022000 	.word	0x40022000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0304 	and.w	r3, r3, #4
 8007538:	2b00      	cmp	r3, #0
 800753a:	d029      	beq.n	8007590 <HAL_RCC_ClockConfig+0x574>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	4b51      	ldr	r3, [pc, #324]	@ (8007688 <HAL_RCC_ClockConfig+0x66c>)
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007548:	429a      	cmp	r2, r3
 800754a:	d221      	bcs.n	8007590 <HAL_RCC_ClockConfig+0x574>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d014      	beq.n	800757e <HAL_RCC_ClockConfig+0x562>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	2b40      	cmp	r3, #64	@ 0x40
 800755a:	d010      	beq.n	800757e <HAL_RCC_ClockConfig+0x562>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	2b50      	cmp	r3, #80	@ 0x50
 8007562:	d00c      	beq.n	800757e <HAL_RCC_ClockConfig+0x562>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	2b60      	cmp	r3, #96	@ 0x60
 800756a:	d008      	beq.n	800757e <HAL_RCC_ClockConfig+0x562>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	2b70      	cmp	r3, #112	@ 0x70
 8007572:	d004      	beq.n	800757e <HAL_RCC_ClockConfig+0x562>
 8007574:	f240 6127 	movw	r1, #1575	@ 0x627
 8007578:	4844      	ldr	r0, [pc, #272]	@ (800768c <HAL_RCC_ClockConfig+0x670>)
 800757a:	f7f9 fd39 	bl	8000ff0 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800757e:	4b42      	ldr	r3, [pc, #264]	@ (8007688 <HAL_RCC_ClockConfig+0x66c>)
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	493f      	ldr	r1, [pc, #252]	@ (8007688 <HAL_RCC_ClockConfig+0x66c>)
 800758c:	4313      	orrs	r3, r2
 800758e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0308 	and.w	r3, r3, #8
 8007598:	2b00      	cmp	r3, #0
 800759a:	d02b      	beq.n	80075f4 <HAL_RCC_ClockConfig+0x5d8>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	691a      	ldr	r2, [r3, #16]
 80075a0:	4b39      	ldr	r3, [pc, #228]	@ (8007688 <HAL_RCC_ClockConfig+0x66c>)
 80075a2:	6a1b      	ldr	r3, [r3, #32]
 80075a4:	091b      	lsrs	r3, r3, #4
 80075a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d222      	bcs.n	80075f4 <HAL_RCC_ClockConfig+0x5d8>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d014      	beq.n	80075e0 <HAL_RCC_ClockConfig+0x5c4>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	2b40      	cmp	r3, #64	@ 0x40
 80075bc:	d010      	beq.n	80075e0 <HAL_RCC_ClockConfig+0x5c4>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	2b50      	cmp	r3, #80	@ 0x50
 80075c4:	d00c      	beq.n	80075e0 <HAL_RCC_ClockConfig+0x5c4>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	2b60      	cmp	r3, #96	@ 0x60
 80075cc:	d008      	beq.n	80075e0 <HAL_RCC_ClockConfig+0x5c4>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b70      	cmp	r3, #112	@ 0x70
 80075d4:	d004      	beq.n	80075e0 <HAL_RCC_ClockConfig+0x5c4>
 80075d6:	f240 6131 	movw	r1, #1585	@ 0x631
 80075da:	482c      	ldr	r0, [pc, #176]	@ (800768c <HAL_RCC_ClockConfig+0x670>)
 80075dc:	f7f9 fd08 	bl	8000ff0 <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80075e0:	4b29      	ldr	r3, [pc, #164]	@ (8007688 <HAL_RCC_ClockConfig+0x66c>)
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	011b      	lsls	r3, r3, #4
 80075ee:	4926      	ldr	r1, [pc, #152]	@ (8007688 <HAL_RCC_ClockConfig+0x66c>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0310 	and.w	r3, r3, #16
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d029      	beq.n	8007654 <HAL_RCC_ClockConfig+0x638>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	695a      	ldr	r2, [r3, #20]
 8007604:	4b20      	ldr	r3, [pc, #128]	@ (8007688 <HAL_RCC_ClockConfig+0x66c>)
 8007606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007608:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800760c:	429a      	cmp	r2, r3
 800760e:	d221      	bcs.n	8007654 <HAL_RCC_ClockConfig+0x638>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d014      	beq.n	8007642 <HAL_RCC_ClockConfig+0x626>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	695b      	ldr	r3, [r3, #20]
 800761c:	2b40      	cmp	r3, #64	@ 0x40
 800761e:	d010      	beq.n	8007642 <HAL_RCC_ClockConfig+0x626>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	2b50      	cmp	r3, #80	@ 0x50
 8007626:	d00c      	beq.n	8007642 <HAL_RCC_ClockConfig+0x626>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	2b60      	cmp	r3, #96	@ 0x60
 800762e:	d008      	beq.n	8007642 <HAL_RCC_ClockConfig+0x626>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	2b70      	cmp	r3, #112	@ 0x70
 8007636:	d004      	beq.n	8007642 <HAL_RCC_ClockConfig+0x626>
 8007638:	f240 613b 	movw	r1, #1595	@ 0x63b
 800763c:	4813      	ldr	r0, [pc, #76]	@ (800768c <HAL_RCC_ClockConfig+0x670>)
 800763e:	f7f9 fcd7 	bl	8000ff0 <assert_failed>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007642:	4b11      	ldr	r3, [pc, #68]	@ (8007688 <HAL_RCC_ClockConfig+0x66c>)
 8007644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007646:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	490e      	ldr	r1, [pc, #56]	@ (8007688 <HAL_RCC_ClockConfig+0x66c>)
 8007650:	4313      	orrs	r3, r2
 8007652:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007654:	f000 f822 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8007658:	4602      	mov	r2, r0
 800765a:	4b0b      	ldr	r3, [pc, #44]	@ (8007688 <HAL_RCC_ClockConfig+0x66c>)
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	f003 030f 	and.w	r3, r3, #15
 8007662:	490b      	ldr	r1, [pc, #44]	@ (8007690 <HAL_RCC_ClockConfig+0x674>)
 8007664:	5ccb      	ldrb	r3, [r1, r3]
 8007666:	fa22 f303 	lsr.w	r3, r2, r3
 800766a:	4a0a      	ldr	r2, [pc, #40]	@ (8007694 <HAL_RCC_ClockConfig+0x678>)
 800766c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800766e:	4b0a      	ldr	r3, [pc, #40]	@ (8007698 <HAL_RCC_ClockConfig+0x67c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	f7f9 fce4 	bl	8001040 <HAL_InitTick>
 8007678:	4603      	mov	r3, r0
 800767a:	73fb      	strb	r3, [r7, #15]

  return status;
 800767c:	7bfb      	ldrb	r3, [r7, #15]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	46020c00 	.word	0x46020c00
 800768c:	0801009c 	.word	0x0801009c
 8007690:	080101fc 	.word	0x080101fc
 8007694:	20000000 	.word	0x20000000
 8007698:	20000004 	.word	0x20000004

0800769c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800769c:	b480      	push	{r7}
 800769e:	b08b      	sub	sp, #44	@ 0x2c
 80076a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076aa:	4b78      	ldr	r3, [pc, #480]	@ (800788c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	f003 030c 	and.w	r3, r3, #12
 80076b2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076b4:	4b75      	ldr	r3, [pc, #468]	@ (800788c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80076b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b8:	f003 0303 	and.w	r3, r3, #3
 80076bc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d005      	beq.n	80076d0 <HAL_RCC_GetSysClockFreq+0x34>
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	2b0c      	cmp	r3, #12
 80076c8:	d121      	bne.n	800770e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d11e      	bne.n	800770e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80076d0:	4b6e      	ldr	r3, [pc, #440]	@ (800788c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d107      	bne.n	80076ec <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80076dc:	4b6b      	ldr	r3, [pc, #428]	@ (800788c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80076de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076e2:	0b1b      	lsrs	r3, r3, #12
 80076e4:	f003 030f 	and.w	r3, r3, #15
 80076e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80076ea:	e005      	b.n	80076f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80076ec:	4b67      	ldr	r3, [pc, #412]	@ (800788c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	0f1b      	lsrs	r3, r3, #28
 80076f2:	f003 030f 	and.w	r3, r3, #15
 80076f6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80076f8:	4a65      	ldr	r2, [pc, #404]	@ (8007890 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80076fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007700:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d110      	bne.n	800772a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800770c:	e00d      	b.n	800772a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800770e:	4b5f      	ldr	r3, [pc, #380]	@ (800788c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	f003 030c 	and.w	r3, r3, #12
 8007716:	2b04      	cmp	r3, #4
 8007718:	d102      	bne.n	8007720 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800771a:	4b5e      	ldr	r3, [pc, #376]	@ (8007894 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800771c:	623b      	str	r3, [r7, #32]
 800771e:	e004      	b.n	800772a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	2b08      	cmp	r3, #8
 8007724:	d101      	bne.n	800772a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007726:	4b5b      	ldr	r3, [pc, #364]	@ (8007894 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007728:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	2b0c      	cmp	r3, #12
 800772e:	f040 80a5 	bne.w	800787c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007732:	4b56      	ldr	r3, [pc, #344]	@ (800788c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800773c:	4b53      	ldr	r3, [pc, #332]	@ (800788c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800773e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007740:	0a1b      	lsrs	r3, r3, #8
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	3301      	adds	r3, #1
 8007748:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800774a:	4b50      	ldr	r3, [pc, #320]	@ (800788c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800774c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800774e:	091b      	lsrs	r3, r3, #4
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007756:	4b4d      	ldr	r3, [pc, #308]	@ (800788c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775a:	08db      	lsrs	r3, r3, #3
 800775c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	fb02 f303 	mul.w	r3, r2, r3
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	2b02      	cmp	r3, #2
 8007776:	d003      	beq.n	8007780 <HAL_RCC_GetSysClockFreq+0xe4>
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	2b03      	cmp	r3, #3
 800777c:	d022      	beq.n	80077c4 <HAL_RCC_GetSysClockFreq+0x128>
 800777e:	e043      	b.n	8007808 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8007898 <HAL_RCC_GetSysClockFreq+0x1fc>
 800778e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007792:	4b3e      	ldr	r3, [pc, #248]	@ (800788c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80077a2:	ed97 6a01 	vldr	s12, [r7, #4]
 80077a6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800789c <HAL_RCC_GetSysClockFreq+0x200>
 80077aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80077ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80077b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80077ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077c2:	e046      	b.n	8007852 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ce:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8007898 <HAL_RCC_GetSysClockFreq+0x1fc>
 80077d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077d6:	4b2d      	ldr	r3, [pc, #180]	@ (800788c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80077d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80077e6:	ed97 6a01 	vldr	s12, [r7, #4]
 80077ea:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800789c <HAL_RCC_GetSysClockFreq+0x200>
 80077ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80077f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80077f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80077fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007806:	e024      	b.n	8007852 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	ee07 3a90 	vmov	s15, r3
 8007818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007820:	4b1a      	ldr	r3, [pc, #104]	@ (800788c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007828:	ee07 3a90 	vmov	s15, r3
 800782c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007830:	ed97 6a01 	vldr	s12, [r7, #4]
 8007834:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800789c <HAL_RCC_GetSysClockFreq+0x200>
 8007838:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800783c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007840:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007844:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800784c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007850:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8007852:	4b0e      	ldr	r3, [pc, #56]	@ (800788c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007856:	0e1b      	lsrs	r3, r3, #24
 8007858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800785c:	3301      	adds	r3, #1
 800785e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800786a:	edd7 6a07 	vldr	s13, [r7, #28]
 800786e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007876:	ee17 3a90 	vmov	r3, s15
 800787a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800787c:	6a3b      	ldr	r3, [r7, #32]
}
 800787e:	4618      	mov	r0, r3
 8007880:	372c      	adds	r7, #44	@ 0x2c
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	46020c00 	.word	0x46020c00
 8007890:	08010214 	.word	0x08010214
 8007894:	00f42400 	.word	0x00f42400
 8007898:	4b742400 	.word	0x4b742400
 800789c:	46000000 	.word	0x46000000

080078a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80078a4:	f7ff fefa 	bl	800769c <HAL_RCC_GetSysClockFreq>
 80078a8:	4602      	mov	r2, r0
 80078aa:	4b07      	ldr	r3, [pc, #28]	@ (80078c8 <HAL_RCC_GetHCLKFreq+0x28>)
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	f003 030f 	and.w	r3, r3, #15
 80078b2:	4906      	ldr	r1, [pc, #24]	@ (80078cc <HAL_RCC_GetHCLKFreq+0x2c>)
 80078b4:	5ccb      	ldrb	r3, [r1, r3]
 80078b6:	fa22 f303 	lsr.w	r3, r2, r3
 80078ba:	4a05      	ldr	r2, [pc, #20]	@ (80078d0 <HAL_RCC_GetHCLKFreq+0x30>)
 80078bc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80078be:	4b04      	ldr	r3, [pc, #16]	@ (80078d0 <HAL_RCC_GetHCLKFreq+0x30>)
 80078c0:	681b      	ldr	r3, [r3, #0]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	46020c00 	.word	0x46020c00
 80078cc:	080101fc 	.word	0x080101fc
 80078d0:	20000000 	.word	0x20000000

080078d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80078d8:	f7ff ffe2 	bl	80078a0 <HAL_RCC_GetHCLKFreq>
 80078dc:	4602      	mov	r2, r0
 80078de:	4b05      	ldr	r3, [pc, #20]	@ (80078f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	091b      	lsrs	r3, r3, #4
 80078e4:	f003 0307 	and.w	r3, r3, #7
 80078e8:	4903      	ldr	r1, [pc, #12]	@ (80078f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078ea:	5ccb      	ldrb	r3, [r1, r3]
 80078ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	46020c00 	.word	0x46020c00
 80078f8:	0801020c 	.word	0x0801020c

080078fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007900:	f7ff ffce 	bl	80078a0 <HAL_RCC_GetHCLKFreq>
 8007904:	4602      	mov	r2, r0
 8007906:	4b05      	ldr	r3, [pc, #20]	@ (800791c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	0a1b      	lsrs	r3, r3, #8
 800790c:	f003 0307 	and.w	r3, r3, #7
 8007910:	4903      	ldr	r1, [pc, #12]	@ (8007920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007912:	5ccb      	ldrb	r3, [r1, r3]
 8007914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007918:	4618      	mov	r0, r3
 800791a:	bd80      	pop	{r7, pc}
 800791c:	46020c00 	.word	0x46020c00
 8007920:	0801020c 	.word	0x0801020c

08007924 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8007928:	f7ff ffba 	bl	80078a0 <HAL_RCC_GetHCLKFreq>
 800792c:	4602      	mov	r2, r0
 800792e:	4b05      	ldr	r3, [pc, #20]	@ (8007944 <HAL_RCC_GetPCLK3Freq+0x20>)
 8007930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007932:	091b      	lsrs	r3, r3, #4
 8007934:	f003 0307 	and.w	r3, r3, #7
 8007938:	4903      	ldr	r1, [pc, #12]	@ (8007948 <HAL_RCC_GetPCLK3Freq+0x24>)
 800793a:	5ccb      	ldrb	r3, [r1, r3]
 800793c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007940:	4618      	mov	r0, r3
 8007942:	bd80      	pop	{r7, pc}
 8007944:	46020c00 	.word	0x46020c00
 8007948:	0801020c 	.word	0x0801020c

0800794c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d104      	bne.n	8007966 <HAL_RCC_GetClockConfig+0x1a>
 800795c:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 8007960:	481b      	ldr	r0, [pc, #108]	@ (80079d0 <HAL_RCC_GetClockConfig+0x84>)
 8007962:	f7f9 fb45 	bl	8000ff0 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d104      	bne.n	8007976 <HAL_RCC_GetClockConfig+0x2a>
 800796c:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8007970:	4817      	ldr	r0, [pc, #92]	@ (80079d0 <HAL_RCC_GetClockConfig+0x84>)
 8007972:	f7f9 fb3d 	bl	8000ff0 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	221f      	movs	r2, #31
 800797a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800797c:	4b15      	ldr	r3, [pc, #84]	@ (80079d4 <HAL_RCC_GetClockConfig+0x88>)
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	f003 0203 	and.w	r2, r3, #3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8007988:	4b12      	ldr	r3, [pc, #72]	@ (80079d4 <HAL_RCC_GetClockConfig+0x88>)
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	f003 020f 	and.w	r2, r3, #15
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8007994:	4b0f      	ldr	r3, [pc, #60]	@ (80079d4 <HAL_RCC_GetClockConfig+0x88>)
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80079a0:	4b0c      	ldr	r3, [pc, #48]	@ (80079d4 <HAL_RCC_GetClockConfig+0x88>)
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	091b      	lsrs	r3, r3, #4
 80079a6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80079ae:	4b09      	ldr	r3, [pc, #36]	@ (80079d4 <HAL_RCC_GetClockConfig+0x88>)
 80079b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80079ba:	4b07      	ldr	r3, [pc, #28]	@ (80079d8 <HAL_RCC_GetClockConfig+0x8c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 020f 	and.w	r2, r3, #15
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	601a      	str	r2, [r3, #0]
}
 80079c6:	bf00      	nop
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	0801009c 	.word	0x0801009c
 80079d4:	46020c00 	.word	0x46020c00
 80079d8:	40022000 	.word	0x40022000

080079dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80079e4:	4b3e      	ldr	r3, [pc, #248]	@ (8007ae0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80079e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079ea:	f003 0304 	and.w	r3, r3, #4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d003      	beq.n	80079fa <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80079f2:	f7fe f96f 	bl	8005cd4 <HAL_PWREx_GetVoltageRange>
 80079f6:	6178      	str	r0, [r7, #20]
 80079f8:	e019      	b.n	8007a2e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80079fa:	4b39      	ldr	r3, [pc, #228]	@ (8007ae0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80079fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a00:	4a37      	ldr	r2, [pc, #220]	@ (8007ae0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007a02:	f043 0304 	orr.w	r3, r3, #4
 8007a06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007a0a:	4b35      	ldr	r3, [pc, #212]	@ (8007ae0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a18:	f7fe f95c 	bl	8005cd4 <HAL_PWREx_GetVoltageRange>
 8007a1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a1e:	4b30      	ldr	r3, [pc, #192]	@ (8007ae0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a24:	4a2e      	ldr	r2, [pc, #184]	@ (8007ae0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007a26:	f023 0304 	bic.w	r3, r3, #4
 8007a2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a34:	d003      	beq.n	8007a3e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a3c:	d109      	bne.n	8007a52 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a44:	d202      	bcs.n	8007a4c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007a46:	2301      	movs	r3, #1
 8007a48:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007a4a:	e033      	b.n	8007ab4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007a50:	e030      	b.n	8007ab4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a58:	d208      	bcs.n	8007a6c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a60:	d102      	bne.n	8007a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8007a62:	2303      	movs	r3, #3
 8007a64:	613b      	str	r3, [r7, #16]
 8007a66:	e025      	b.n	8007ab4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e035      	b.n	8007ad8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a72:	d90f      	bls.n	8007a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d109      	bne.n	8007a8e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a80:	d902      	bls.n	8007a88 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007a82:	2300      	movs	r3, #0
 8007a84:	613b      	str	r3, [r7, #16]
 8007a86:	e015      	b.n	8007ab4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007a88:	2301      	movs	r3, #1
 8007a8a:	613b      	str	r3, [r7, #16]
 8007a8c:	e012      	b.n	8007ab4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007a8e:	2300      	movs	r3, #0
 8007a90:	613b      	str	r3, [r7, #16]
 8007a92:	e00f      	b.n	8007ab4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a9a:	d109      	bne.n	8007ab0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aa2:	d102      	bne.n	8007aaa <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	613b      	str	r3, [r7, #16]
 8007aa8:	e004      	b.n	8007ab4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007aaa:	2302      	movs	r3, #2
 8007aac:	613b      	str	r3, [r7, #16]
 8007aae:	e001      	b.n	8007ab4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f023 020f 	bic.w	r2, r3, #15
 8007abc:	4909      	ldr	r1, [pc, #36]	@ (8007ae4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007ac4:	4b07      	ldr	r3, [pc, #28]	@ (8007ae4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 030f 	and.w	r3, r3, #15
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d001      	beq.n	8007ad6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e000      	b.n	8007ad8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3718      	adds	r7, #24
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	46020c00 	.word	0x46020c00
 8007ae4:	40022000 	.word	0x40022000

08007ae8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007aec:	b0bc      	sub	sp, #240	@ 0xf0
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007af4:	2300      	movs	r3, #0
 8007af6:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007afa:	2300      	movs	r3, #0
 8007afc:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));
 8007b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	f022 4860 	bic.w	r8, r2, #3758096384	@ 0xe0000000
 8007b0c:	f428 5880 	bic.w	r8, r8, #4096	@ 0x1000
 8007b10:	f04f 0900 	mov.w	r9, #0
 8007b14:	ea58 0309 	orrs.w	r3, r8, r9
 8007b18:	d00f      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b22:	f022 54ff 	bic.w	r4, r2, #534773760	@ 0x1fe00000
 8007b26:	f424 14ff 	bic.w	r4, r4, #2088960	@ 0x1fe000
 8007b2a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8007b2e:	f024 040f 	bic.w	r4, r4, #15
 8007b32:	461d      	mov	r5, r3
 8007b34:	ea54 0305 	orrs.w	r3, r4, r5
 8007b38:	d004      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007b3a:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 8007b3e:	48bc      	ldr	r0, [pc, #752]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8007b40:	f7f9 fa56 	bl	8000ff0 <assert_failed>

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4c:	f002 0a01 	and.w	sl, r2, #1
 8007b50:	f04f 0b00 	mov.w	fp, #0
 8007b54:	ea5a 030b 	orrs.w	r3, sl, fp
 8007b58:	d024      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));
 8007b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d013      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d00e      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d009      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	d004      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007b82:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 8007b86:	48aa      	ldr	r0, [pc, #680]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8007b88:	f7f9 fa32 	bl	8000ff0 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007b8c:	4ba9      	ldr	r3, [pc, #676]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b92:	f023 0103 	bic.w	r1, r3, #3
 8007b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b9c:	4aa5      	ldr	r2, [pc, #660]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007b9e:	430b      	orrs	r3, r1
 8007ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	f002 0302 	and.w	r3, r2, #2
 8007bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007bba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	d024      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));
 8007bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d013      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8007bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bd4:	2b04      	cmp	r3, #4
 8007bd6:	d00e      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8007bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bde:	2b08      	cmp	r3, #8
 8007be0:	d009      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8007be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be8:	2b0c      	cmp	r3, #12
 8007bea:	d004      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8007bec:	f240 11c7 	movw	r1, #455	@ 0x1c7
 8007bf0:	488f      	ldr	r0, [pc, #572]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8007bf2:	f7f9 f9fd 	bl	8000ff0 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007bf6:	4b8f      	ldr	r3, [pc, #572]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bfc:	f023 010c 	bic.w	r1, r3, #12
 8007c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c06:	4a8b      	ldr	r2, [pc, #556]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	f002 0304 	and.w	r3, r2, #4
 8007c1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007c24:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	d024      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x190>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));
 8007c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d013      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8007c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c3e:	2b10      	cmp	r3, #16
 8007c40:	d00e      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8007c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c48:	2b20      	cmp	r3, #32
 8007c4a:	d009      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8007c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c52:	2b30      	cmp	r3, #48	@ 0x30
 8007c54:	d004      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8007c56:	f44f 71e9 	mov.w	r1, #466	@ 0x1d2
 8007c5a:	4875      	ldr	r0, [pc, #468]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8007c5c:	f7f9 f9c8 	bl	8000ff0 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007c60:	4b74      	ldr	r3, [pc, #464]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c66:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c70:	4a70      	ldr	r2, [pc, #448]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007c72:	430b      	orrs	r3, r1
 8007c74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	f002 0308 	and.w	r3, r2, #8
 8007c84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4313      	orrs	r3, r2
 8007c96:	d024      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));
 8007c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d013      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ca8:	2b40      	cmp	r3, #64	@ 0x40
 8007caa:	d00e      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cb2:	2b80      	cmp	r3, #128	@ 0x80
 8007cb4:	d009      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cbc:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cbe:	d004      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007cc0:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8007cc4:	485a      	ldr	r0, [pc, #360]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8007cc6:	f7f9 f993 	bl	8000ff0 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007cca:	4b5a      	ldr	r3, [pc, #360]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cd0:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cda:	4a56      	ldr	r2, [pc, #344]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007cdc:	430b      	orrs	r3, r1
 8007cde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f002 0310 	and.w	r3, r2, #16
 8007cee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007cf8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	d027      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));
 8007d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d016      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8007d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d16:	d010      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8007d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d22:	d00a      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8007d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d2e:	d004      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8007d30:	f44f 71f3 	mov.w	r1, #486	@ 0x1e6
 8007d34:	483e      	ldr	r0, [pc, #248]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8007d36:	f7f9 f95b 	bl	8000ff0 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d40:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d4a:	4a3a      	ldr	r2, [pc, #232]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007d4c:	430b      	orrs	r3, r1
 8007d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	f002 0320 	and.w	r3, r2, #32
 8007d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d62:	2300      	movs	r3, #0
 8007d64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d68:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	d029      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));
 8007d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d018      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8007d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d013      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8007d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d00e      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8007d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d009      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8007d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d004      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8007da4:	f240 11fb 	movw	r1, #507	@ 0x1fb
 8007da8:	4821      	ldr	r0, [pc, #132]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8007daa:	f7f9 f921 	bl	8000ff0 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007dae:	4b21      	ldr	r3, [pc, #132]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007db4:	f023 0107 	bic.w	r1, r3, #7
 8007db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007dc0:	430b      	orrs	r3, r1
 8007dc2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ddc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007de0:	460b      	mov	r3, r1
 8007de2:	4313      	orrs	r3, r2
 8007de4:	d02c      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));
 8007de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d016      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007df4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dfa:	d010      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e06:	d00a      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e12:	d004      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007e14:	f240 2105 	movw	r1, #517	@ 0x205
 8007e18:	4805      	ldr	r0, [pc, #20]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8007e1a:	f7f9 f8e9 	bl	8000ff0 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007e1e:	4b05      	ldr	r3, [pc, #20]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e24:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e2e:	e003      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007e30:	080100d4 	.word	0x080100d4
 8007e34:	46020c00 	.word	0x46020c00
 8007e38:	4aaa      	ldr	r2, [pc, #680]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007e3a:	430b      	orrs	r3, r1
 8007e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007e4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e50:	2300      	movs	r3, #0
 8007e52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e56:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	d027      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));
 8007e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d016      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8007e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e74:	d010      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8007e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e80:	d00a      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8007e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e8c:	d004      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8007e8e:	f240 210f 	movw	r1, #527	@ 0x20f
 8007e92:	4895      	ldr	r0, [pc, #596]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8007e94:	f7f9 f8ac 	bl	8000ff0 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007e98:	4b92      	ldr	r3, [pc, #584]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ea8:	4a8e      	ldr	r2, [pc, #568]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007eaa:	430b      	orrs	r3, r1
 8007eac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007ebc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ec6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007eca:	460b      	mov	r3, r1
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	d024      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));
 8007ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d013      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ee0:	2b40      	cmp	r3, #64	@ 0x40
 8007ee2:	d00e      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eea:	2b80      	cmp	r3, #128	@ 0x80
 8007eec:	d009      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ef4:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ef6:	d004      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007ef8:	f240 2119 	movw	r1, #537	@ 0x219
 8007efc:	487a      	ldr	r0, [pc, #488]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8007efe:	f7f9 f877 	bl	8000ff0 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007f02:	4b78      	ldr	r3, [pc, #480]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f08:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f12:	4a74      	ldr	r2, [pc, #464]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007f14:	430b      	orrs	r3, r1
 8007f16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f22:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007f26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f30:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007f34:	460b      	mov	r3, r1
 8007f36:	4313      	orrs	r3, r2
 8007f38:	d027      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));
 8007f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d016      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f4e:	d010      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f5a:	d00a      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f62:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007f66:	d004      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007f68:	f240 2123 	movw	r1, #547	@ 0x223
 8007f6c:	485e      	ldr	r0, [pc, #376]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8007f6e:	f7f9 f83f 	bl	8000ff0 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007f72:	4b5c      	ldr	r3, [pc, #368]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f78:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8007f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f82:	4a58      	ldr	r2, [pc, #352]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007f84:	430b      	orrs	r3, r1
 8007f86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f92:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007f96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007fa0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	d027      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
 8007faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d016      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fbe:	d010      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fca:	d00a      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fd2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fd6:	d004      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007fd8:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8007fdc:	4842      	ldr	r0, [pc, #264]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8007fde:	f7f9 f807 	bl	8000ff0 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007fe2:	4b40      	ldr	r3, [pc, #256]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fe8:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ff0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ff2:	4a3c      	ldr	r2, [pc, #240]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007ff4:	430b      	orrs	r3, r1
 8007ff6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008006:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800800a:	2300      	movs	r3, #0
 800800c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008010:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008014:	460b      	mov	r3, r1
 8008016:	4313      	orrs	r3, r2
 8008018:	d027      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
 800801a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800801e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008020:	2b00      	cmp	r3, #0
 8008022:	d016      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8008024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008028:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800802a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800802e:	d010      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8008030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008034:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008036:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800803a:	d00a      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 800803c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008040:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008042:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008046:	d004      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8008048:	f240 214b 	movw	r1, #587	@ 0x24b
 800804c:	4826      	ldr	r0, [pc, #152]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 800804e:	f7f8 ffcf 	bl	8000ff0 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008052:	4b24      	ldr	r3, [pc, #144]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8008054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008058:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800805c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008060:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008062:	4a20      	ldr	r2, [pc, #128]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8008064:	430b      	orrs	r3, r1
 8008066:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800806a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008076:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008078:	2300      	movs	r3, #0
 800807a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800807c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008080:	460b      	mov	r3, r1
 8008082:	4313      	orrs	r3, r2
 8008084:	d032      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
 8008086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800808a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800808e:	2b00      	cmp	r3, #0
 8008090:	d019      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x5de>
 8008092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800809a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800809e:	d012      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x5de>
 80080a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080ac:	d00b      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x5de>
 80080ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080ba:	d004      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x5de>
 80080bc:	f240 2152 	movw	r1, #594	@ 0x252
 80080c0:	4809      	ldr	r0, [pc, #36]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 80080c2:	f7f8 ff95 	bl	8000ff0 <assert_failed>
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80080c6:	4b07      	ldr	r3, [pc, #28]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80080c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80080d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080d8:	4a02      	ldr	r2, [pc, #8]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80080da:	430b      	orrs	r3, r1
 80080dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80080e0:	e004      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x604>
 80080e2:	bf00      	nop
 80080e4:	46020c00 	.word	0x46020c00
 80080e8:	080100d4 	.word	0x080100d4
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80080ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80080f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80080fa:	2300      	movs	r3, #0
 80080fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80080fe:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008102:	460b      	mov	r3, r1
 8008104:	4313      	orrs	r3, r2
 8008106:	d06f      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));
 8008108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800810c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008110:	2b00      	cmp	r3, #0
 8008112:	d01c      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x666>
 8008114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800811c:	2b20      	cmp	r3, #32
 800811e:	d016      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x666>
 8008120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008128:	2b40      	cmp	r3, #64	@ 0x40
 800812a:	d010      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x666>
 800812c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008134:	2b60      	cmp	r3, #96	@ 0x60
 8008136:	d00a      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x666>
 8008138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800813c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008140:	2b80      	cmp	r3, #128	@ 0x80
 8008142:	d004      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x666>
 8008144:	f240 215a 	movw	r1, #602	@ 0x25a
 8008148:	48ab      	ldr	r0, [pc, #684]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800814a:	f7f8 ff51 	bl	8000ff0 <assert_failed>

    switch (pPeriphClkInit->Sai1ClockSelection)
 800814e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008156:	2b80      	cmp	r3, #128	@ 0x80
 8008158:	d02d      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 800815a:	2b80      	cmp	r3, #128	@ 0x80
 800815c:	d827      	bhi.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 800815e:	2b60      	cmp	r3, #96	@ 0x60
 8008160:	d02b      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x6d2>
 8008162:	2b60      	cmp	r3, #96	@ 0x60
 8008164:	d823      	bhi.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8008166:	2b40      	cmp	r3, #64	@ 0x40
 8008168:	d006      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x690>
 800816a:	2b40      	cmp	r3, #64	@ 0x40
 800816c:	d81f      	bhi.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 800816e:	2b00      	cmp	r3, #0
 8008170:	d009      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8008172:	2b20      	cmp	r3, #32
 8008174:	d011      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8008176:	e01a      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008178:	4ba0      	ldr	r3, [pc, #640]	@ (80083fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800817a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800817c:	4a9f      	ldr	r2, [pc, #636]	@ (80083fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800817e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008182:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008184:	e01a      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800818a:	3308      	adds	r3, #8
 800818c:	4618      	mov	r0, r3
 800818e:	f002 fba7 	bl	800a8e0 <RCCEx_PLL2_Config>
 8008192:	4603      	mov	r3, r0
 8008194:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008198:	e010      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800819a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800819e:	332c      	adds	r3, #44	@ 0x2c
 80081a0:	4618      	mov	r0, r3
 80081a2:	f002 fc89 	bl	800aab8 <RCCEx_PLL3_Config>
 80081a6:	4603      	mov	r3, r0
 80081a8:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80081ac:	e006      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        break;
 80081b4:	e002      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
        break;
 80081b6:	bf00      	nop
 80081b8:	e000      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
        break;
 80081ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081bc:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10d      	bne.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80081c4:	4b8d      	ldr	r3, [pc, #564]	@ (80083fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80081c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80081ca:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80081ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081d6:	4a89      	ldr	r2, [pc, #548]	@ (80083fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80081d8:	430b      	orrs	r3, r1
 80081da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80081de:	e003      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e0:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80081e4:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80081e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80081f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081f6:	2300      	movs	r3, #0
 80081f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80081fa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80081fe:	460b      	mov	r3, r1
 8008200:	4313      	orrs	r3, r2
 8008202:	d07a      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x812>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));
 8008204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008208:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800820c:	2b00      	cmp	r3, #0
 800820e:	d020      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x76a>
 8008210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008214:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800821c:	d019      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x76a>
 800821e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008222:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008226:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800822a:	d012      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x76a>
 800822c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008230:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008234:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008238:	d00b      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x76a>
 800823a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800823e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008246:	d004      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x76a>
 8008248:	f240 218e 	movw	r1, #654	@ 0x28e
 800824c:	486a      	ldr	r0, [pc, #424]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800824e:	f7f8 fecf 	bl	8000ff0 <assert_failed>

    switch (pPeriphClkInit->Sai2ClockSelection)
 8008252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800825a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800825e:	d033      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 8008260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008264:	d82c      	bhi.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8008266:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800826a:	d02f      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800826c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008270:	d826      	bhi.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8008272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008276:	d008      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x7a2>
 8008278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800827c:	d820      	bhi.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00a      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8008282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008286:	d011      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 8008288:	e01a      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800828a:	4b5c      	ldr	r3, [pc, #368]	@ (80083fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800828c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800828e:	4a5b      	ldr	r2, [pc, #364]	@ (80083fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008294:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008296:	e01a      	b.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800829c:	3308      	adds	r3, #8
 800829e:	4618      	mov	r0, r3
 80082a0:	f002 fb1e 	bl	800a8e0 <RCCEx_PLL2_Config>
 80082a4:	4603      	mov	r3, r0
 80082a6:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80082aa:	e010      	b.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80082ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082b0:	332c      	adds	r3, #44	@ 0x2c
 80082b2:	4618      	mov	r0, r3
 80082b4:	f002 fc00 	bl	800aab8 <RCCEx_PLL3_Config>
 80082b8:	4603      	mov	r3, r0
 80082ba:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80082be:	e006      	b.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        break;
 80082c6:	e002      	b.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
        break;
 80082c8:	bf00      	nop
 80082ca:	e000      	b.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
        break;
 80082cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ce:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10d      	bne.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80082d6:	4b49      	ldr	r3, [pc, #292]	@ (80083fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80082d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80082dc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80082e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082e8:	4a44      	ldr	r2, [pc, #272]	@ (80083fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80082ea:	430b      	orrs	r3, r1
 80082ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80082f0:	e003      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x812>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f2:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80082f6:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80082fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008306:	663b      	str	r3, [r7, #96]	@ 0x60
 8008308:	2300      	movs	r3, #0
 800830a:	667b      	str	r3, [r7, #100]	@ 0x64
 800830c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008310:	460b      	mov	r3, r1
 8008312:	4313      	orrs	r3, r2
 8008314:	d078      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x920>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));
 8008316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800831a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800831e:	2b00      	cmp	r3, #0
 8008320:	d027      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 8008322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008326:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800832a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800832e:	d020      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 8008330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008334:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008338:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800833c:	d019      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 800833e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008342:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008346:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800834a:	d012      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 800834c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008350:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008354:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008358:	d00b      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 800835a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800835e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008362:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008366:	d004      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 8008368:	f240 21c1 	movw	r1, #705	@ 0x2c1
 800836c:	4822      	ldr	r0, [pc, #136]	@ (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800836e:	f7f8 fe3f 	bl	8000ff0 <assert_failed>

    switch (pPeriphClkInit->AdcDacClockSelection)
 8008372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008376:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800837a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800837e:	d028      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8008380:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008384:	d821      	bhi.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008386:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800838a:	d022      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800838c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008390:	d81b      	bhi.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008392:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008396:	d01c      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8008398:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800839c:	d815      	bhi.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800839e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083a2:	d008      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 80083a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083a8:	d80f      	bhi.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d011      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 80083ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083b2:	d00e      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 80083b4:	e009      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80083b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083ba:	3308      	adds	r3, #8
 80083bc:	4618      	mov	r0, r3
 80083be:	f002 fa8f 	bl	800a8e0 <RCCEx_PLL2_Config>
 80083c2:	4603      	mov	r3, r0
 80083c4:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        break;
 80083c8:	e004      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        break;
 80083d0:	e000      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
        break;
 80083d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083d4:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d111      	bne.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x918>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80083dc:	4b07      	ldr	r3, [pc, #28]	@ (80083fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80083de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80083e2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80083e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80083ee:	4a03      	ldr	r2, [pc, #12]	@ (80083fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80083f0:	430b      	orrs	r3, r1
 80083f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80083f6:	e007      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x920>
 80083f8:	080100d4 	.word	0x080100d4
 80083fc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008400:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8008404:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8008408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008414:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008416:	2300      	movs	r3, #0
 8008418:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800841a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800841e:	460b      	mov	r3, r1
 8008420:	4313      	orrs	r3, r2
 8008422:	d061      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));
 8008424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800842c:	2b00      	cmp	r3, #0
 800842e:	d01c      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008438:	2b01      	cmp	r3, #1
 800843a:	d016      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x982>
 800843c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008444:	2b02      	cmp	r3, #2
 8008446:	d010      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800844c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008450:	2b03      	cmp	r3, #3
 8008452:	d00a      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800845c:	2b04      	cmp	r3, #4
 800845e:	d004      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008460:	f240 21e5 	movw	r1, #741	@ 0x2e5
 8008464:	48bb      	ldr	r0, [pc, #748]	@ (8008754 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8008466:	f7f8 fdc3 	bl	8000ff0 <assert_failed>

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800846a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800846e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008472:	2b04      	cmp	r3, #4
 8008474:	d81d      	bhi.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8008476:	a201      	add	r2, pc, #4	@ (adr r2, 800847c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	080084bb 	.word	0x080084bb
 8008480:	08008491 	.word	0x08008491
 8008484:	0800849f 	.word	0x0800849f
 8008488:	080084bb 	.word	0x080084bb
 800848c:	080084bb 	.word	0x080084bb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008490:	4bb1      	ldr	r3, [pc, #708]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 8008492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008494:	4ab0      	ldr	r2, [pc, #704]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 8008496:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800849a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800849c:	e00e      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800849e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084a2:	332c      	adds	r3, #44	@ 0x2c
 80084a4:	4618      	mov	r0, r3
 80084a6:	f002 fb07 	bl	800aab8 <RCCEx_PLL3_Config>
 80084aa:	4603      	mov	r3, r0
 80084ac:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        break;
 80084b0:	e004      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        break;
 80084b8:	e000      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
        break;
 80084ba:	bf00      	nop
    }
    if (ret == HAL_OK)
 80084bc:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10d      	bne.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80084c4:	4ba4      	ldr	r3, [pc, #656]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 80084c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80084ca:	f023 0107 	bic.w	r1, r3, #7
 80084ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084d6:	4aa0      	ldr	r2, [pc, #640]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 80084d8:	430b      	orrs	r3, r1
 80084da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80084de:	e003      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e0:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80084e4:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80084e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80084f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80084f6:	2300      	movs	r3, #0
 80084f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80084fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80084fe:	460b      	mov	r3, r1
 8008500:	4313      	orrs	r3, r2
 8008502:	d071      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xb00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
 8008504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800850c:	2b00      	cmp	r3, #0
 800850e:	d020      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8008510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008514:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800851c:	d019      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800851e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008522:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008526:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800852a:	d012      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800852c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008534:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008538:	d00b      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800853a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800853e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008542:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008546:	d004      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8008548:	f240 310b 	movw	r1, #779	@ 0x30b
 800854c:	4881      	ldr	r0, [pc, #516]	@ (8008754 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800854e:	f7f8 fd4f 	bl	8000ff0 <assert_failed>
    switch (pPeriphClkInit->Adf1ClockSelection)
 8008552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008556:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800855a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800855e:	d028      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8008560:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008564:	d821      	bhi.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xac2>
 8008566:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800856a:	d024      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xace>
 800856c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008570:	d81b      	bhi.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xac2>
 8008572:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008576:	d00e      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800857c:	d815      	bhi.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xac2>
 800857e:	2b00      	cmp	r3, #0
 8008580:	d01b      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8008582:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008586:	d110      	bne.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xac2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008588:	4b73      	ldr	r3, [pc, #460]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 800858a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858c:	4a72      	ldr	r2, [pc, #456]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 800858e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008592:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008594:	e012      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xad4>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800859a:	332c      	adds	r3, #44	@ 0x2c
 800859c:	4618      	mov	r0, r3
 800859e:	f002 fa8b 	bl	800aab8 <RCCEx_PLL3_Config>
 80085a2:	4603      	mov	r3, r0
 80085a4:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        break;
 80085a8:	e008      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xad4>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        break;
 80085b0:	e004      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xad4>
        break;
 80085b2:	bf00      	nop
 80085b4:	e002      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xad4>
        break;
 80085b6:	bf00      	nop
 80085b8:	e000      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xad4>
        break;
 80085ba:	bf00      	nop
    }
    if (ret == HAL_OK)
 80085bc:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10d      	bne.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80085c4:	4b64      	ldr	r3, [pc, #400]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 80085c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80085ca:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80085ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085d6:	4a60      	ldr	r2, [pc, #384]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 80085d8:	430b      	orrs	r3, r1
 80085da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80085de:	e003      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xb00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085e0:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80085e4:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80085e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80085f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085f6:	2300      	movs	r3, #0
 80085f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085fa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80085fe:	460b      	mov	r3, r1
 8008600:	4313      	orrs	r3, r2
 8008602:	f000 80db 	beq.w	80087bc <HAL_RCCEx_PeriphCLKConfig+0xcd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008606:	2300      	movs	r3, #0
 8008608:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
 800860c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008610:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008614:	2b00      	cmp	r3, #0
 8008616:	d019      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xb64>
 8008618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800861c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008624:	d012      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xb64>
 8008626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800862a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800862e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008632:	d00b      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xb64>
 8008634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008638:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800863c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008640:	d004      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xb64>
 8008642:	f240 3131 	movw	r1, #817	@ 0x331
 8008646:	4843      	ldr	r0, [pc, #268]	@ (8008754 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8008648:	f7f8 fcd2 	bl	8000ff0 <assert_failed>
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800864c:	4b42      	ldr	r3, [pc, #264]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 800864e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008652:	f003 0304 	and.w	r3, r3, #4
 8008656:	2b00      	cmp	r3, #0
 8008658:	d113      	bne.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800865a:	4b3f      	ldr	r3, [pc, #252]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 800865c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008660:	4a3d      	ldr	r2, [pc, #244]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 8008662:	f043 0304 	orr.w	r3, r3, #4
 8008666:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800866a:	4b3b      	ldr	r3, [pc, #236]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 800866c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008670:	f003 0304 	and.w	r3, r3, #4
 8008674:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
      pwrclkchanged = SET;
 800867c:	2301      	movs	r3, #1
 800867e:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008682:	4b36      	ldr	r3, [pc, #216]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0xc74>)
 8008684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008686:	4a35      	ldr	r2, [pc, #212]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0xc74>)
 8008688:	f043 0301 	orr.w	r3, r3, #1
 800868c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800868e:	f7f9 f9b1 	bl	80019f4 <HAL_GetTick>
 8008692:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008696:	e00b      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008698:	f7f9 f9ac 	bl	80019f4 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d903      	bls.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
      {
        ret = HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        break;
 80086ae:	e005      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80086b0:	4b2a      	ldr	r3, [pc, #168]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0xc74>)
 80086b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b4:	f003 0301 	and.w	r3, r3, #1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0ed      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
      }
    }

    if (ret == HAL_OK)
 80086bc:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d16b      	bne.n	800879c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80086c4:	4b24      	ldr	r3, [pc, #144]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 80086c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80086d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d023      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
 80086da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086de:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80086e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d01b      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80086ea:	4b1b      	ldr	r3, [pc, #108]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 80086ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086f8:	4b17      	ldr	r3, [pc, #92]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 80086fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086fe:	4a16      	ldr	r2, [pc, #88]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 8008700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008704:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008708:	4b13      	ldr	r3, [pc, #76]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 800870a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800870e:	4a12      	ldr	r2, [pc, #72]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 8008710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008714:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008718:	4a0f      	ldr	r2, [pc, #60]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 800871a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800871e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008722:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d01f      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xc86>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800872e:	f7f9 f961 	bl	80019f4 <HAL_GetTick>
 8008732:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008736:	e013      	b.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xc78>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008738:	f7f9 f95c 	bl	80019f4 <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008742:	1ad2      	subs	r2, r2, r3
 8008744:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008748:	429a      	cmp	r2, r3
 800874a:	d909      	bls.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xc78>
          {
            ret = HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
            break;
 8008752:	e00c      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xc86>
 8008754:	080100d4 	.word	0x080100d4
 8008758:	46020c00 	.word	0x46020c00
 800875c:	46020800 	.word	0x46020800
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008760:	4b77      	ldr	r3, [pc, #476]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8008762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008766:	f003 0302 	and.w	r3, r3, #2
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0e4      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0xc50>
          }
        }
      }

      if (ret == HAL_OK)
 800876e:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10d      	bne.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8008776:	4b72      	ldr	r3, [pc, #456]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8008778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800877c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008784:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008788:	4a6d      	ldr	r2, [pc, #436]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 800878a:	430b      	orrs	r3, r1
 800878c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008790:	e008      	b.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008792:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8008796:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
 800879a:	e003      	b.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800879c:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80087a0:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80087a4:	f897 30e9 	ldrb.w	r3, [r7, #233]	@ 0xe9
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d107      	bne.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xcd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087ac:	4b64      	ldr	r3, [pc, #400]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80087ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087b2:	4a63      	ldr	r2, [pc, #396]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80087b4:	f023 0304 	bic.w	r3, r3, #4
 80087b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80087bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80087c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80087ca:	2300      	movs	r3, #0
 80087cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80087ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80087d2:	460b      	mov	r3, r1
 80087d4:	4313      	orrs	r3, r2
 80087d6:	d062      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xdb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));
 80087d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d019      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xd30>
 80087e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80087f0:	d012      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xd30>
 80087f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087fe:	d00b      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xd30>
 8008800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008804:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008808:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800880c:	d004      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xd30>
 800880e:	f44f 7161 	mov.w	r1, #900	@ 0x384
 8008812:	484c      	ldr	r0, [pc, #304]	@ (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008814:	f7f8 fbec 	bl	8000ff0 <assert_failed>

    switch (pPeriphClkInit->IclkClockSelection)
 8008818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800881c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008820:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008824:	d022      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8008826:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800882a:	d81b      	bhi.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800882c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008830:	d011      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8008832:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008836:	d815      	bhi.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008838:	2b00      	cmp	r3, #0
 800883a:	d019      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xd88>
 800883c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008840:	d110      	bne.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008846:	3308      	adds	r3, #8
 8008848:	4618      	mov	r0, r3
 800884a:	f002 f849 	bl	800a8e0 <RCCEx_PLL2_Config>
 800884e:	4603      	mov	r3, r0
 8008850:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        break;
 8008854:	e00d      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008856:	4b3a      	ldr	r3, [pc, #232]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8008858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800885a:	4a39      	ldr	r2, [pc, #228]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 800885c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008860:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008862:	e006      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        break;
 800886a:	e002      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
        break;
 800886c:	bf00      	nop
 800886e:	e000      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
        break;
 8008870:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008872:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10d      	bne.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xdae>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800887a:	4b31      	ldr	r3, [pc, #196]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 800887c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008880:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008888:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800888c:	4a2c      	ldr	r2, [pc, #176]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 800888e:	430b      	orrs	r3, r1
 8008890:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008894:	e003      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xdb6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008896:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800889a:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800889e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80088aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80088ac:	2300      	movs	r3, #0
 80088ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80088b4:	460b      	mov	r3, r1
 80088b6:	4313      	orrs	r3, r2
 80088b8:	d04a      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));
 80088ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d012      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0xe04>
 80088c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d2:	d00b      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0xe04>
 80088d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088e0:	d004      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0xe04>
 80088e2:	f240 31a9 	movw	r1, #937	@ 0x3a9
 80088e6:	4817      	ldr	r0, [pc, #92]	@ (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80088e8:	f7f8 fb82 	bl	8000ff0 <assert_failed>

    switch (pPeriphClkInit->RngClockSelection)
 80088ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088f8:	d00b      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xe2a>
 80088fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088fe:	d804      	bhi.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xe22>
 8008900:	2b00      	cmp	r3, #0
 8008902:	d008      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8008904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008908:	d007      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xe32>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        break;
 8008910:	e004      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0xe34>
        break;
 8008912:	bf00      	nop
 8008914:	e002      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0xe34>
        break;
 8008916:	bf00      	nop
 8008918:	e000      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0xe34>
        break;
 800891a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800891c:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8008920:	2b00      	cmp	r3, #0
 8008922:	d111      	bne.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0xe60>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008924:	4b06      	ldr	r3, [pc, #24]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8008926:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800892a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800892e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008932:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008936:	4a02      	ldr	r2, [pc, #8]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8008938:	430b      	orrs	r3, r1
 800893a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800893e:	e007      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xe68>
 8008940:	46020c00 	.word	0x46020c00
 8008944:	080100d4 	.word	0x080100d4
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008948:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800894c:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8008950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008958:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800895c:	633b      	str	r3, [r7, #48]	@ 0x30
 800895e:	2300      	movs	r3, #0
 8008960:	637b      	str	r3, [r7, #52]	@ 0x34
 8008962:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008966:	460b      	mov	r3, r1
 8008968:	4313      	orrs	r3, r2
 800896a:	d02b      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));
 800896c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008970:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00b      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800897c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008980:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008984:	d004      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008986:	f240 31d7 	movw	r1, #983	@ 0x3d7
 800898a:	48c5      	ldr	r0, [pc, #788]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x11b8>)
 800898c:	f7f8 fb30 	bl	8000ff0 <assert_failed>

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8008990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008994:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008998:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800899c:	d105      	bne.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800899e:	4bc1      	ldr	r3, [pc, #772]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80089a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a2:	4ac0      	ldr	r2, [pc, #768]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80089a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089a8:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80089aa:	4bbe      	ldr	r3, [pc, #760]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80089ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80089b0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80089b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80089bc:	4ab9      	ldr	r2, [pc, #740]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80089be:	430b      	orrs	r3, r1
 80089c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80089c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089cc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80089d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089d2:	2300      	movs	r3, #0
 80089d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089d6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80089da:	460b      	mov	r3, r1
 80089dc:	4313      	orrs	r3, r2
 80089de:	d02c      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0xf52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));
 80089e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d019      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80089ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80089f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089f8:	d012      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80089fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008a02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a06:	d00b      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008a10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008a14:	d004      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008a16:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8008a1a:	48a1      	ldr	r0, [pc, #644]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x11b8>)
 8008a1c:	f7f8 fae8 	bl	8000ff0 <assert_failed>

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008a20:	4ba0      	ldr	r3, [pc, #640]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8008a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008a32:	499c      	ldr	r1, [pc, #624]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a42:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008a46:	623b      	str	r3, [r7, #32]
 8008a48:	2300      	movs	r3, #0
 8008a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a4c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008a50:	460b      	mov	r3, r1
 8008a52:	4313      	orrs	r3, r2
 8008a54:	d02c      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));
 8008a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d019      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xfae>
 8008a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a6e:	d012      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xfae>
 8008a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a7c:	d00b      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xfae>
 8008a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a8a:	d004      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xfae>
 8008a8c:	f240 31f1 	movw	r1, #1009	@ 0x3f1
 8008a90:	4883      	ldr	r0, [pc, #524]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x11b8>)
 8008a92:	f7f8 faad 	bl	8000ff0 <assert_failed>

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008a96:	4b83      	ldr	r3, [pc, #524]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8008a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008aa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aa4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008aa8:	497e      	ldr	r1, [pc, #504]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008abc:	61bb      	str	r3, [r7, #24]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	61fb      	str	r3, [r7, #28]
 8008ac2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	d029      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x1038>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));
 8008acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ad0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d016      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x101e>
 8008ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008adc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008ae0:	2b08      	cmp	r3, #8
 8008ae2:	d010      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x101e>
 8008ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ae8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008aec:	2b10      	cmp	r3, #16
 8008aee:	d00a      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x101e>
 8008af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008af4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008af8:	2b18      	cmp	r3, #24
 8008afa:	d004      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x101e>
 8008afc:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 8008b00:	4867      	ldr	r0, [pc, #412]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x11b8>)
 8008b02:	f7f8 fa75 	bl	8000ff0 <assert_failed>

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008b06:	4b67      	ldr	r3, [pc, #412]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8008b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b0c:	f023 0218 	bic.w	r2, r3, #24
 8008b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008b18:	4962      	ldr	r1, [pc, #392]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b28:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8008b2c:	613b      	str	r3, [r7, #16]
 8008b2e:	2300      	movs	r3, #0
 8008b30:	617b      	str	r3, [r7, #20]
 8008b32:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008b36:	460b      	mov	r3, r1
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	d052      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x10fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));
 8008b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d019      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1094>
 8008b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b54:	d012      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1094>
 8008b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b62:	d00b      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1094>
 8008b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b70:	d004      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1094>
 8008b72:	f240 4105 	movw	r1, #1029	@ 0x405
 8008b76:	484a      	ldr	r0, [pc, #296]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x11b8>)
 8008b78:	f7f8 fa3a 	bl	8000ff0 <assert_failed>

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8008b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b88:	d105      	bne.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b8a:	4b46      	ldr	r3, [pc, #280]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8008b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b8e:	4a45      	ldr	r2, [pc, #276]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8008b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b94:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8008b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ba2:	d108      	bne.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x10ce>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ba8:	3308      	adds	r3, #8
 8008baa:	4618      	mov	r0, r3
 8008bac:	f001 fe98 	bl	800a8e0 <RCCEx_PLL2_Config>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
    }
    if (ret == HAL_OK)
 8008bb6:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10d      	bne.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x10f2>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008bbe:	4b39      	ldr	r3, [pc, #228]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8008bc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008bc4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008bd0:	4934      	ldr	r1, [pc, #208]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008bd8:	e003      	b.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x10fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bda:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8008bde:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8008be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bea:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8008bee:	60bb      	str	r3, [r7, #8]
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	d058      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));
 8008bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d012      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8008c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c16:	d00b      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8008c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c24:	d004      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8008c26:	f240 4152 	movw	r1, #1106	@ 0x452
 8008c2a:	481d      	ldr	r0, [pc, #116]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x11b8>)
 8008c2c:	f7f8 f9e0 	bl	8000ff0 <assert_failed>

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8008c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c3c:	d00e      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1174>
 8008c3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c42:	d815      	bhi.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d017      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8008c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c4c:	d110      	bne.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1188>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c4e:	4b15      	ldr	r3, [pc, #84]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8008c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c52:	4a14      	ldr	r2, [pc, #80]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8008c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c58:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008c5a:	e00e      	b.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x1192>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c60:	3308      	adds	r3, #8
 8008c62:	4618      	mov	r0, r3
 8008c64:	f001 fe3c 	bl	800a8e0 <RCCEx_PLL2_Config>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008c6e:	e004      	b.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x1192>
      default:
        ret = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        break;
 8008c76:	e000      	b.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x1192>
        break;
 8008c78:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008c7a:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d112      	bne.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008c82:	4b08      	ldr	r3, [pc, #32]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8008c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c88:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c94:	4903      	ldr	r1, [pc, #12]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008c9c:	e008      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8008c9e:	bf00      	nop
 8008ca0:	080100d4 	.word	0x080100d4
 8008ca4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca8:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8008cac:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008cbc:	603b      	str	r3, [r7, #0]
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	607b      	str	r3, [r7, #4]
 8008cc2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	d01e      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x1222>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));
 8008ccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00b      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x1208>
 8008cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008ce0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ce4:	d004      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x1208>
 8008ce6:	f44f 618f 	mov.w	r1, #1144	@ 0x478
 8008cea:	480b      	ldr	r0, [pc, #44]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1230>)
 8008cec:	f7f8 f980 	bl	8000ff0 <assert_failed>

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8008cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8008d1c <HAL_RCCEx_PeriphCLKConfig+0x1234>)
 8008cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008cf6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8008cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008d02:	4906      	ldr	r1, [pc, #24]	@ (8008d1c <HAL_RCCEx_PeriphCLKConfig+0x1234>)
 8008d04:	4313      	orrs	r3, r2
 8008d06:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8008d0a:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	37f0      	adds	r7, #240	@ 0xf0
 8008d12:	46bd      	mov	sp, r7
 8008d14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d18:	080100d4 	.word	0x080100d4
 8008d1c:	46020c00 	.word	0x46020c00

08008d20 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b089      	sub	sp, #36	@ 0x24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008d28:	4ba6      	ldr	r3, [pc, #664]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d30:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008d32:	4ba4      	ldr	r3, [pc, #656]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d36:	f003 0303 	and.w	r3, r3, #3
 8008d3a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008d3c:	4ba1      	ldr	r3, [pc, #644]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d40:	0a1b      	lsrs	r3, r3, #8
 8008d42:	f003 030f 	and.w	r3, r3, #15
 8008d46:	3301      	adds	r3, #1
 8008d48:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008d4a:	4b9e      	ldr	r3, [pc, #632]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d4e:	091b      	lsrs	r3, r3, #4
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008d56:	4b9b      	ldr	r3, [pc, #620]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d5a:	08db      	lsrs	r3, r3, #3
 8008d5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	fb02 f303 	mul.w	r3, r2, r3
 8008d66:	ee07 3a90 	vmov	s15, r3
 8008d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2b03      	cmp	r3, #3
 8008d76:	d062      	beq.n	8008e3e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	f200 8081 	bhi.w	8008e82 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d024      	beq.n	8008dd0 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d17a      	bne.n	8008e82 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	ee07 3a90 	vmov	s15, r3
 8008d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d96:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8008d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d9e:	4b89      	ldr	r3, [pc, #548]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8008db2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008fcc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008dce:	e08f      	b.n	8008ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008dd0:	4b7c      	ldr	r3, [pc, #496]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d005      	beq.n	8008de8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8008ddc:	4b79      	ldr	r3, [pc, #484]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	0f1b      	lsrs	r3, r3, #28
 8008de2:	f003 030f 	and.w	r3, r3, #15
 8008de6:	e006      	b.n	8008df6 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8008de8:	4b76      	ldr	r3, [pc, #472]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008dea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008dee:	041b      	lsls	r3, r3, #16
 8008df0:	0f1b      	lsrs	r3, r3, #28
 8008df2:	f003 030f 	and.w	r3, r3, #15
 8008df6:	4a76      	ldr	r2, [pc, #472]	@ (8008fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dfc:	ee07 3a90 	vmov	s15, r3
 8008e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	ee07 3a90 	vmov	s15, r3
 8008e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	ee07 3a90 	vmov	s15, r3
 8008e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e20:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008fcc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008e24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e30:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e3c:	e058      	b.n	8008ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	ee07 3a90 	vmov	s15, r3
 8008e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e48:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8008e4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e50:	4b5c      	ldr	r3, [pc, #368]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e58:	ee07 3a90 	vmov	s15, r3
 8008e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e60:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e64:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008fcc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008e68:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008e6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e74:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e80:	e036      	b.n	8008ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008e82:	4b50      	ldr	r3, [pc, #320]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d005      	beq.n	8008e9a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8008e8e:	4b4d      	ldr	r3, [pc, #308]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	0f1b      	lsrs	r3, r3, #28
 8008e94:	f003 030f 	and.w	r3, r3, #15
 8008e98:	e006      	b.n	8008ea8 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8008e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008e9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008ea0:	041b      	lsls	r3, r3, #16
 8008ea2:	0f1b      	lsrs	r3, r3, #28
 8008ea4:	f003 030f 	and.w	r3, r3, #15
 8008ea8:	4a49      	ldr	r2, [pc, #292]	@ (8008fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eae:	ee07 3a90 	vmov	s15, r3
 8008eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	ee07 3a90 	vmov	s15, r3
 8008ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	ee07 3a90 	vmov	s15, r3
 8008eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ed2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008fcc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008eee:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008ef0:	4b34      	ldr	r3, [pc, #208]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d017      	beq.n	8008f2c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008efc:	4b31      	ldr	r3, [pc, #196]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f00:	0a5b      	lsrs	r3, r3, #9
 8008f02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f06:	ee07 3a90 	vmov	s15, r3
 8008f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8008f0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f12:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008f16:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f22:	ee17 2a90 	vmov	r2, s15
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	e002      	b.n	8008f32 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008f32:	4b24      	ldr	r3, [pc, #144]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d017      	beq.n	8008f6e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008f3e:	4b21      	ldr	r3, [pc, #132]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f42:	0c1b      	lsrs	r3, r3, #16
 8008f44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f48:	ee07 3a90 	vmov	s15, r3
 8008f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008f50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f54:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008f58:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f64:	ee17 2a90 	vmov	r2, s15
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	605a      	str	r2, [r3, #4]
 8008f6c:	e002      	b.n	8008f74 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008f74:	4b13      	ldr	r3, [pc, #76]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d017      	beq.n	8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008f80:	4b10      	ldr	r3, [pc, #64]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f84:	0e1b      	lsrs	r3, r3, #24
 8008f86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f8a:	ee07 3a90 	vmov	s15, r3
 8008f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8008f92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f96:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fa6:	ee17 2a90 	vmov	r2, s15
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008fae:	e002      	b.n	8008fb6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	609a      	str	r2, [r3, #8]
}
 8008fb6:	bf00      	nop
 8008fb8:	3724      	adds	r7, #36	@ 0x24
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	46020c00 	.word	0x46020c00
 8008fc8:	4b742400 	.word	0x4b742400
 8008fcc:	46000000 	.word	0x46000000
 8008fd0:	08010214 	.word	0x08010214

08008fd4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b089      	sub	sp, #36	@ 0x24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008fdc:	4ba6      	ldr	r3, [pc, #664]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fe4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008fe6:	4ba4      	ldr	r3, [pc, #656]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fea:	f003 0303 	and.w	r3, r3, #3
 8008fee:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8008ff0:	4ba1      	ldr	r3, [pc, #644]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff4:	0a1b      	lsrs	r3, r3, #8
 8008ff6:	f003 030f 	and.w	r3, r3, #15
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008ffe:	4b9e      	ldr	r3, [pc, #632]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009002:	091b      	lsrs	r3, r3, #4
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800900a:	4b9b      	ldr	r3, [pc, #620]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800900c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800900e:	08db      	lsrs	r3, r3, #3
 8009010:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	fb02 f303 	mul.w	r3, r2, r3
 800901a:	ee07 3a90 	vmov	s15, r3
 800901e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009022:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2b03      	cmp	r3, #3
 800902a:	d062      	beq.n	80090f2 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	2b03      	cmp	r3, #3
 8009030:	f200 8081 	bhi.w	8009136 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d024      	beq.n	8009084 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2b02      	cmp	r3, #2
 800903e:	d17a      	bne.n	8009136 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	ee07 3a90 	vmov	s15, r3
 8009046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800927c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800904e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009052:	4b89      	ldr	r3, [pc, #548]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800905a:	ee07 3a90 	vmov	s15, r3
 800905e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009062:	ed97 6a02 	vldr	s12, [r7, #8]
 8009066:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8009280 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800906a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800906e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009076:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800907a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800907e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009082:	e08f      	b.n	80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009084:	4b7c      	ldr	r3, [pc, #496]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800908c:	2b00      	cmp	r3, #0
 800908e:	d005      	beq.n	800909c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8009090:	4b79      	ldr	r3, [pc, #484]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	0f1b      	lsrs	r3, r3, #28
 8009096:	f003 030f 	and.w	r3, r3, #15
 800909a:	e006      	b.n	80090aa <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800909c:	4b76      	ldr	r3, [pc, #472]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800909e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80090a2:	041b      	lsls	r3, r3, #16
 80090a4:	0f1b      	lsrs	r3, r3, #28
 80090a6:	f003 030f 	and.w	r3, r3, #15
 80090aa:	4a76      	ldr	r2, [pc, #472]	@ (8009284 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80090ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090b0:	ee07 3a90 	vmov	s15, r3
 80090b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	ee07 3a90 	vmov	s15, r3
 80090be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	ee07 3a90 	vmov	s15, r3
 80090cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80090d4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8009280 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80090d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80090e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090f0:	e058      	b.n	80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	ee07 3a90 	vmov	s15, r3
 80090f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800927c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009104:	4b5c      	ldr	r3, [pc, #368]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910c:	ee07 3a90 	vmov	s15, r3
 8009110:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009114:	ed97 6a02 	vldr	s12, [r7, #8]
 8009118:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009280 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800911c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009120:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009124:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009128:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800912c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009130:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009134:	e036      	b.n	80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009136:	4b50      	ldr	r3, [pc, #320]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d005      	beq.n	800914e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8009142:	4b4d      	ldr	r3, [pc, #308]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	0f1b      	lsrs	r3, r3, #28
 8009148:	f003 030f 	and.w	r3, r3, #15
 800914c:	e006      	b.n	800915c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800914e:	4b4a      	ldr	r3, [pc, #296]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009150:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009154:	041b      	lsls	r3, r3, #16
 8009156:	0f1b      	lsrs	r3, r3, #28
 8009158:	f003 030f 	and.w	r3, r3, #15
 800915c:	4a49      	ldr	r2, [pc, #292]	@ (8009284 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800915e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009162:	ee07 3a90 	vmov	s15, r3
 8009166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	ee07 3a90 	vmov	s15, r3
 8009170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009182:	ed97 6a02 	vldr	s12, [r7, #8]
 8009186:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009280 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800918a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800918e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009196:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800919a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091a2:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80091a4:	4b34      	ldr	r3, [pc, #208]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80091a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d017      	beq.n	80091e0 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80091b0:	4b31      	ldr	r3, [pc, #196]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80091b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091b4:	0a5b      	lsrs	r3, r3, #9
 80091b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091ba:	ee07 3a90 	vmov	s15, r3
 80091be:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80091c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091c6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80091ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80091ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091d6:	ee17 2a90 	vmov	r2, s15
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	e002      	b.n	80091e6 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80091e6:	4b24      	ldr	r3, [pc, #144]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80091e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d017      	beq.n	8009222 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80091f2:	4b21      	ldr	r3, [pc, #132]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80091f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091f6:	0c1b      	lsrs	r3, r3, #16
 80091f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091fc:	ee07 3a90 	vmov	s15, r3
 8009200:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009204:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009208:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800920c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009218:	ee17 2a90 	vmov	r2, s15
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	605a      	str	r2, [r3, #4]
 8009220:	e002      	b.n	8009228 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009228:	4b13      	ldr	r3, [pc, #76]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800922a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d017      	beq.n	8009264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009234:	4b10      	ldr	r3, [pc, #64]	@ (8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009238:	0e1b      	lsrs	r3, r3, #24
 800923a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8009246:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800924a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800924e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800925a:	ee17 2a90 	vmov	r2, s15
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009262:	e002      	b.n	800926a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	609a      	str	r2, [r3, #8]
}
 800926a:	bf00      	nop
 800926c:	3724      	adds	r7, #36	@ 0x24
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	46020c00 	.word	0x46020c00
 800927c:	4b742400 	.word	0x4b742400
 8009280:	46000000 	.word	0x46000000
 8009284:	08010214 	.word	0x08010214

08009288 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009288:	b480      	push	{r7}
 800928a:	b089      	sub	sp, #36	@ 0x24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009290:	4ba6      	ldr	r3, [pc, #664]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009298:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800929a:	4ba4      	ldr	r3, [pc, #656]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800929c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800929e:	f003 0303 	and.w	r3, r3, #3
 80092a2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80092a4:	4ba1      	ldr	r3, [pc, #644]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80092a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092a8:	0a1b      	lsrs	r3, r3, #8
 80092aa:	f003 030f 	and.w	r3, r3, #15
 80092ae:	3301      	adds	r3, #1
 80092b0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80092b2:	4b9e      	ldr	r3, [pc, #632]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80092b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092b6:	091b      	lsrs	r3, r3, #4
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80092be:	4b9b      	ldr	r3, [pc, #620]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80092c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092c2:	08db      	lsrs	r3, r3, #3
 80092c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	fb02 f303 	mul.w	r3, r2, r3
 80092ce:	ee07 3a90 	vmov	s15, r3
 80092d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2b03      	cmp	r3, #3
 80092de:	d062      	beq.n	80093a6 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	f200 8081 	bhi.w	80093ea <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d024      	beq.n	8009338 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d17a      	bne.n	80093ea <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	ee07 3a90 	vmov	s15, r3
 80092fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092fe:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8009530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8009302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009306:	4b89      	ldr	r3, [pc, #548]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800930a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800930e:	ee07 3a90 	vmov	s15, r3
 8009312:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009316:	ed97 6a02 	vldr	s12, [r7, #8]
 800931a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8009534 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800931e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009322:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800932a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800932e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009332:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8009336:	e08f      	b.n	8009458 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009338:	4b7c      	ldr	r3, [pc, #496]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d005      	beq.n	8009350 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8009344:	4b79      	ldr	r3, [pc, #484]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	0f1b      	lsrs	r3, r3, #28
 800934a:	f003 030f 	and.w	r3, r3, #15
 800934e:	e006      	b.n	800935e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8009350:	4b76      	ldr	r3, [pc, #472]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009352:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009356:	041b      	lsls	r3, r3, #16
 8009358:	0f1b      	lsrs	r3, r3, #28
 800935a:	f003 030f 	and.w	r3, r3, #15
 800935e:	4a76      	ldr	r2, [pc, #472]	@ (8009538 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8009360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009364:	ee07 3a90 	vmov	s15, r3
 8009368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	ee07 3a90 	vmov	s15, r3
 8009372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	ee07 3a90 	vmov	s15, r3
 8009380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009384:	ed97 6a02 	vldr	s12, [r7, #8]
 8009388:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8009534 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800938c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009390:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009394:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009398:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800939c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093a4:	e058      	b.n	8009458 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	ee07 3a90 	vmov	s15, r3
 80093ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80093b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b8:	4b5c      	ldr	r3, [pc, #368]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80093ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c0:	ee07 3a90 	vmov	s15, r3
 80093c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80093c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80093cc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009534 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80093d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80093d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80093d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80093e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093e8:	e036      	b.n	8009458 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80093ea:	4b50      	ldr	r3, [pc, #320]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d005      	beq.n	8009402 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80093f6:	4b4d      	ldr	r3, [pc, #308]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	0f1b      	lsrs	r3, r3, #28
 80093fc:	f003 030f 	and.w	r3, r3, #15
 8009400:	e006      	b.n	8009410 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8009402:	4b4a      	ldr	r3, [pc, #296]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009404:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009408:	041b      	lsls	r3, r3, #16
 800940a:	0f1b      	lsrs	r3, r3, #28
 800940c:	f003 030f 	and.w	r3, r3, #15
 8009410:	4a49      	ldr	r2, [pc, #292]	@ (8009538 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8009412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009416:	ee07 3a90 	vmov	s15, r3
 800941a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	ee07 3a90 	vmov	s15, r3
 8009424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	ee07 3a90 	vmov	s15, r3
 8009432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009436:	ed97 6a02 	vldr	s12, [r7, #8]
 800943a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009534 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800943e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800944a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800944e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009452:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009456:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8009458:	4b34      	ldr	r3, [pc, #208]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800945a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800945c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d017      	beq.n	8009494 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009464:	4b31      	ldr	r3, [pc, #196]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009468:	0a5b      	lsrs	r3, r3, #9
 800946a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8009476:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800947a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800947e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800948a:	ee17 2a90 	vmov	r2, s15
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	e002      	b.n	800949a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800949a:	4b24      	ldr	r3, [pc, #144]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800949c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800949e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d017      	beq.n	80094d6 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80094a6:	4b21      	ldr	r3, [pc, #132]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80094a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094aa:	0c1b      	lsrs	r3, r3, #16
 80094ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094b0:	ee07 3a90 	vmov	s15, r3
 80094b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80094b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094bc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80094c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80094c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094cc:	ee17 2a90 	vmov	r2, s15
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	605a      	str	r2, [r3, #4]
 80094d4:	e002      	b.n	80094dc <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80094dc:	4b13      	ldr	r3, [pc, #76]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80094de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d017      	beq.n	8009518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80094e8:	4b10      	ldr	r3, [pc, #64]	@ (800952c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80094ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ec:	0e1b      	lsrs	r3, r3, #24
 80094ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094f2:	ee07 3a90 	vmov	s15, r3
 80094f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80094fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094fe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009502:	edd7 6a07 	vldr	s13, [r7, #28]
 8009506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800950a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800950e:	ee17 2a90 	vmov	r2, s15
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009516:	e002      	b.n	800951e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	609a      	str	r2, [r3, #8]
}
 800951e:	bf00      	nop
 8009520:	3724      	adds	r7, #36	@ 0x24
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	46020c00 	.word	0x46020c00
 8009530:	4b742400 	.word	0x4b742400
 8009534:	46000000 	.word	0x46000000
 8009538:	08010214 	.word	0x08010214

0800953c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800953c:	b5b0      	push	{r4, r5, r7, lr}
 800953e:	b08e      	sub	sp, #56	@ 0x38
 8009540:	af00      	add	r7, sp, #0
 8009542:	e9c7 0100 	strd	r0, r1, [r7]

  uint32_t frequency;
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8009546:	e9d7 0100 	ldrd	r0, r1, [r7]
 800954a:	f020 4460 	bic.w	r4, r0, #3758096384	@ 0xe0000000
 800954e:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 8009552:	2500      	movs	r5, #0
 8009554:	ea54 0105 	orrs.w	r1, r4, r5
 8009558:	d00c      	beq.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800955a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800955e:	f020 52ff 	bic.w	r2, r0, #534773760	@ 0x1fe00000
 8009562:	f422 12ff 	bic.w	r2, r2, #2088960	@ 0x1fe000
 8009566:	f422 627f 	bic.w	r2, r2, #4080	@ 0xff0
 800956a:	f022 020f 	bic.w	r2, r2, #15
 800956e:	460b      	mov	r3, r1
 8009570:	4313      	orrs	r3, r2
 8009572:	d004      	beq.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009574:	f240 710c 	movw	r1, #1804	@ 0x70c
 8009578:	48a5      	ldr	r0, [pc, #660]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800957a:	f7f7 fd39 	bl	8000ff0 <assert_failed>

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800957e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009582:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8009586:	430b      	orrs	r3, r1
 8009588:	d145      	bne.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800958a:	4ba2      	ldr	r3, [pc, #648]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800958c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009590:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009594:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8009596:	4b9f      	ldr	r3, [pc, #636]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800959c:	f003 0302 	and.w	r3, r3, #2
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	d108      	bne.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80095a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095aa:	d104      	bne.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    {
      frequency = LSE_VALUE;
 80095ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095b2:	f001 b987 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80095b6:	4b97      	ldr	r3, [pc, #604]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80095b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095c4:	d114      	bne.n	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80095c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095cc:	d110      	bne.n	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80095ce:	4b91      	ldr	r3, [pc, #580]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80095d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095dc:	d103      	bne.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
      {
        frequency = LSI_VALUE / 128U;
 80095de:	23fa      	movs	r3, #250	@ 0xfa
 80095e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80095e2:	f001 b96f 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
      else
      {
        frequency = LSI_VALUE;
 80095e6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80095ea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80095ec:	f001 b96a 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80095f0:	4b88      	ldr	r3, [pc, #544]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095fc:	d107      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80095fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009600:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009604:	d103      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    {
      frequency = HSE_VALUE / 32U;
 8009606:	4b84      	ldr	r3, [pc, #528]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009608:	637b      	str	r3, [r7, #52]	@ 0x34
 800960a:	f001 b95b 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	637b      	str	r3, [r7, #52]	@ 0x34
 8009612:	f001 b957 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800961a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800961e:	430b      	orrs	r3, r1
 8009620:	d151      	bne.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009622:	4b7c      	ldr	r3, [pc, #496]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009624:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009628:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800962c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800962e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009630:	2b80      	cmp	r3, #128	@ 0x80
 8009632:	d035      	beq.n	80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8009634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009636:	2b80      	cmp	r3, #128	@ 0x80
 8009638:	d841      	bhi.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 800963a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963c:	2b60      	cmp	r3, #96	@ 0x60
 800963e:	d02a      	beq.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8009640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009642:	2b60      	cmp	r3, #96	@ 0x60
 8009644:	d83b      	bhi.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8009646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009648:	2b40      	cmp	r3, #64	@ 0x40
 800964a:	d009      	beq.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800964c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964e:	2b40      	cmp	r3, #64	@ 0x40
 8009650:	d835      	bhi.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8009652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00c      	beq.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8009658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965a:	2b20      	cmp	r3, #32
 800965c:	d012      	beq.n	8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800965e:	e02e      	b.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009660:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009664:	4618      	mov	r0, r3
 8009666:	f7ff fb5b 	bl	8008d20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800966a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800966e:	f001 b929 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009672:	f107 0318 	add.w	r3, r7, #24
 8009676:	4618      	mov	r0, r3
 8009678:	f7ff fcac 	bl	8008fd4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009680:	f001 b920 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009684:	f107 030c 	add.w	r3, r7, #12
 8009688:	4618      	mov	r0, r3
 800968a:	f7ff fdfd 	bl	8009288 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009692:	f001 b917 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009696:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800969a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800969c:	f001 b912 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80096a0:	4b5c      	ldr	r3, [pc, #368]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096ac:	d103      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
        {
          frequency = HSI_VALUE;
 80096ae:	4b5b      	ldr	r3, [pc, #364]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80096b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80096b2:	f001 b907 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
          frequency = 0U;
 80096b6:	2300      	movs	r3, #0
 80096b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096ba:	f001 b903 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      default :
      {
        frequency = 0U;
 80096be:	2300      	movs	r3, #0
 80096c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096c2:	f001 b8ff 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80096c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ca:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80096ce:	430b      	orrs	r3, r1
 80096d0:	d158      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80096d2:	4b50      	ldr	r3, [pc, #320]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80096d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80096d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80096dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80096de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096e4:	d03b      	beq.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 80096e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096ec:	d846      	bhi.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80096ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096f4:	d02e      	beq.n	8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 80096f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096fc:	d83e      	bhi.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80096fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009704:	d00b      	beq.n	800971e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8009706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800970c:	d836      	bhi.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800970e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00d      	beq.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8009714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800971a:	d012      	beq.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 800971c:	e02e      	b.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800971e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009722:	4618      	mov	r0, r3
 8009724:	f7ff fafc 	bl	8008d20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800972c:	f001 b8ca 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009730:	f107 0318 	add.w	r3, r7, #24
 8009734:	4618      	mov	r0, r3
 8009736:	f7ff fc4d 	bl	8008fd4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800973e:	f001 b8c1 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009742:	f107 030c 	add.w	r3, r7, #12
 8009746:	4618      	mov	r0, r3
 8009748:	f7ff fd9e 	bl	8009288 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009750:	f001 b8b8 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009754:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009758:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800975a:	f001 b8b3 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800975e:	4b2d      	ldr	r3, [pc, #180]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800976a:	d103      	bne.n	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        {
          frequency = HSI_VALUE;
 800976c:	4b2b      	ldr	r3, [pc, #172]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800976e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009770:	f001 b8a8 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
          frequency = 0U;
 8009774:	2300      	movs	r3, #0
 8009776:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009778:	f001 b8a4 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      default :

        frequency = 0U;
 800977c:	2300      	movs	r3, #0
 800977e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009780:	f001 b8a0 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8009784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009788:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800978c:	430b      	orrs	r3, r1
 800978e:	d170      	bne.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x336>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009790:	4b20      	ldr	r3, [pc, #128]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009796:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800979a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800979c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80097a2:	d03f      	beq.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80097a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80097aa:	d85e      	bhi.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
 80097ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097b2:	d00b      	beq.n	80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>
 80097b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097ba:	d856      	bhi.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
 80097bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d016      	beq.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
 80097c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097c8:	d009      	beq.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 80097ca:	e04e      	b.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7ff faa5 	bl	8008d20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80097d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097da:	f001 b873 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097de:	f107 0318 	add.w	r3, r7, #24
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7ff fbf6 	bl	8008fd4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097ec:	f001 b86a 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80097f0:	4b08      	ldr	r3, [pc, #32]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80097f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097fc:	d103      	bne.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
        {
          frequency = HSI48_VALUE;
 80097fe:	4b08      	ldr	r3, [pc, #32]	@ (8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8009800:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009802:	f001 b85f 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
          frequency = 0U;
 8009806:	2300      	movs	r3, #0
 8009808:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800980a:	f001 b85b 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
 800980e:	bf00      	nop
 8009810:	080100d4 	.word	0x080100d4
 8009814:	46020c00 	.word	0x46020c00
 8009818:	0007a120 	.word	0x0007a120
 800981c:	00f42400 	.word	0x00f42400
 8009820:	02dc6c00 	.word	0x02dc6c00

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009824:	4ba6      	ldr	r3, [pc, #664]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0320 	and.w	r3, r3, #32
 800982c:	2b20      	cmp	r3, #32
 800982e:	d118      	bne.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009830:	4ba3      	ldr	r3, [pc, #652]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009838:	2b00      	cmp	r3, #0
 800983a:	d005      	beq.n	8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800983c:	4ba0      	ldr	r3, [pc, #640]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	0e1b      	lsrs	r3, r3, #24
 8009842:	f003 030f 	and.w	r3, r3, #15
 8009846:	e006      	b.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8009848:	4b9d      	ldr	r3, [pc, #628]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800984a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800984e:	041b      	lsls	r3, r3, #16
 8009850:	0e1b      	lsrs	r3, r3, #24
 8009852:	f003 030f 	and.w	r3, r3, #15
 8009856:	4a9b      	ldr	r2, [pc, #620]	@ (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800985c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800985e:	f001 b831 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
          frequency = 0U;
 8009862:	2300      	movs	r3, #0
 8009864:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009866:	f001 b82d 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      default :

        frequency = 0U;
 800986a:	2300      	movs	r3, #0
 800986c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800986e:	f001 b829 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009876:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800987a:	430b      	orrs	r3, r1
 800987c:	d17f      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800987e:	4b90      	ldr	r3, [pc, #576]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009880:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009888:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800988a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800988c:	2b00      	cmp	r3, #0
 800988e:	d165      	bne.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009890:	4b8b      	ldr	r3, [pc, #556]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009896:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800989a:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800989c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80098a2:	d034      	beq.n	800990e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80098a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80098aa:	d853      	bhi.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80098ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098b2:	d00b      	beq.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 80098b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098ba:	d84b      	bhi.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80098bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d016      	beq.n	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80098c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80098c8:	d009      	beq.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80098ca:	e043      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7ff fa25 	bl	8008d20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80098da:	f000 bff3 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098de:	f107 0318 	add.w	r3, r7, #24
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7ff fb76 	bl	8008fd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80098ec:	f000 bfea 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80098f0:	4b73      	ldr	r3, [pc, #460]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80098f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098fc:	d103      	bne.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
          {
            frequency = HSI48_VALUE;
 80098fe:	4b72      	ldr	r3, [pc, #456]	@ (8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009900:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009902:	f000 bfdf 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
            frequency = 0U;
 8009906:	2300      	movs	r3, #0
 8009908:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800990a:	f000 bfdb 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800990e:	4b6c      	ldr	r3, [pc, #432]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0320 	and.w	r3, r3, #32
 8009916:	2b20      	cmp	r3, #32
 8009918:	d118      	bne.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800991a:	4b69      	ldr	r3, [pc, #420]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d005      	beq.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8009926:	4b66      	ldr	r3, [pc, #408]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	0e1b      	lsrs	r3, r3, #24
 800992c:	f003 030f 	and.w	r3, r3, #15
 8009930:	e006      	b.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8009932:	4b63      	ldr	r3, [pc, #396]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009938:	041b      	lsls	r3, r3, #16
 800993a:	0e1b      	lsrs	r3, r3, #24
 800993c:	f003 030f 	and.w	r3, r3, #15
 8009940:	4a60      	ldr	r2, [pc, #384]	@ (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009946:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009948:	f000 bfbc 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
            frequency = 0U;
 800994c:	2300      	movs	r3, #0
 800994e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009950:	f000 bfb8 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
        }
        default :
        {
          frequency = 0U;
 8009954:	2300      	movs	r3, #0
 8009956:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009958:	f000 bfb4 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800995c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009962:	d108      	bne.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009964:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009968:	4618      	mov	r0, r3
 800996a:	f7ff f9d9 	bl	8008d20 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800996e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009970:	637b      	str	r3, [r7, #52]	@ 0x34
 8009972:	f000 bfa7 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else
    {
      frequency = 0U;
 8009976:	2300      	movs	r3, #0
 8009978:	637b      	str	r3, [r7, #52]	@ 0x34
 800997a:	f000 bfa3 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800997e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009982:	1e51      	subs	r1, r2, #1
 8009984:	430b      	orrs	r3, r1
 8009986:	d136      	bne.n	80099f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009988:	4b4d      	ldr	r3, [pc, #308]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800998a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800998e:	f003 0303 	and.w	r3, r3, #3
 8009992:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009996:	2b00      	cmp	r3, #0
 8009998:	d104      	bne.n	80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800999a:	f7fd ffaf 	bl	80078fc <HAL_RCC_GetPCLK2Freq>
 800999e:	6378      	str	r0, [r7, #52]	@ 0x34
 80099a0:	f000 bf90 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80099a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d104      	bne.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80099aa:	f7fd fe77 	bl	800769c <HAL_RCC_GetSysClockFreq>
 80099ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80099b0:	f000 bf88 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80099b4:	4b42      	ldr	r3, [pc, #264]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099c0:	d106      	bne.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
 80099c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d103      	bne.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
    {
      frequency = HSI_VALUE;
 80099c8:	4b40      	ldr	r3, [pc, #256]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80099ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80099cc:	f000 bf7a 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80099d0:	4b3b      	ldr	r3, [pc, #236]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80099d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099d6:	f003 0302 	and.w	r3, r3, #2
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d107      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80099de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d104      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = LSE_VALUE;
 80099e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80099ea:	f000 bf6b 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80099f2:	f000 bf67 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80099f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099fa:	1e91      	subs	r1, r2, #2
 80099fc:	430b      	orrs	r3, r1
 80099fe:	d136      	bne.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x532>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009a00:	4b2f      	ldr	r3, [pc, #188]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a06:	f003 030c 	and.w	r3, r3, #12
 8009a0a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d104      	bne.n	8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009a12:	f7fd ff5f 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 8009a16:	6378      	str	r0, [r7, #52]	@ 0x34
 8009a18:	f000 bf54 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1e:	2b04      	cmp	r3, #4
 8009a20:	d104      	bne.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009a22:	f7fd fe3b 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8009a26:	6378      	str	r0, [r7, #52]	@ 0x34
 8009a28:	f000 bf4c 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009a2c:	4b24      	ldr	r3, [pc, #144]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a38:	d106      	bne.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a3c:	2b08      	cmp	r3, #8
 8009a3e:	d103      	bne.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
    {
      frequency = HSI_VALUE;
 8009a40:	4b22      	ldr	r3, [pc, #136]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009a42:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a44:	f000 bf3e 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009a48:	4b1d      	ldr	r3, [pc, #116]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a4e:	f003 0302 	and.w	r3, r3, #2
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d107      	bne.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a58:	2b0c      	cmp	r3, #12
 8009a5a:	d104      	bne.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = LSE_VALUE;
 8009a5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a62:	f000 bf2f 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8009a66:	2300      	movs	r3, #0
 8009a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a6a:	f000 bf2b 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8009a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a72:	1f11      	subs	r1, r2, #4
 8009a74:	430b      	orrs	r3, r1
 8009a76:	d13e      	bne.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009a78:	4b11      	ldr	r3, [pc, #68]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a7e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009a82:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d104      	bne.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009a8a:	f7fd ff23 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 8009a8e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009a90:	f000 bf18 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8009a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a96:	2b10      	cmp	r3, #16
 8009a98:	d104      	bne.n	8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009a9a:	f7fd fdff 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8009a9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009aa0:	f000 bf10 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009aa4:	4b06      	ldr	r3, [pc, #24]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009aac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ab0:	d10e      	bne.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
 8009ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab4:	2b20      	cmp	r3, #32
 8009ab6:	d10b      	bne.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
    {
      frequency = HSI_VALUE;
 8009ab8:	4b04      	ldr	r3, [pc, #16]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009abc:	f000 bf02 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
 8009ac0:	46020c00 	.word	0x46020c00
 8009ac4:	08010214 	.word	0x08010214
 8009ac8:	02dc6c00 	.word	0x02dc6c00
 8009acc:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009ad0:	4ba7      	ldr	r3, [pc, #668]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009ad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ad6:	f003 0302 	and.w	r3, r3, #2
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d107      	bne.n	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8009ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae0:	2b30      	cmp	r3, #48	@ 0x30
 8009ae2:	d104      	bne.n	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    {
      frequency = LSE_VALUE;
 8009ae4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aea:	f000 beeb 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009af2:	f000 bee7 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8009af6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009afa:	f1a2 0108 	sub.w	r1, r2, #8
 8009afe:	430b      	orrs	r3, r1
 8009b00:	d136      	bne.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009b02:	4b9b      	ldr	r3, [pc, #620]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b08:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009b0c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d104      	bne.n	8009b1e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009b14:	f7fd fede 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 8009b18:	6378      	str	r0, [r7, #52]	@ 0x34
 8009b1a:	f000 bed3 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b20:	2b40      	cmp	r3, #64	@ 0x40
 8009b22:	d104      	bne.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009b24:	f7fd fdba 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8009b28:	6378      	str	r0, [r7, #52]	@ 0x34
 8009b2a:	f000 becb 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009b2e:	4b90      	ldr	r3, [pc, #576]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b3a:	d106      	bne.n	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3e:	2b80      	cmp	r3, #128	@ 0x80
 8009b40:	d103      	bne.n	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
    {
      frequency = HSI_VALUE;
 8009b42:	4b8c      	ldr	r3, [pc, #560]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b46:	f000 bebd 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009b4a:	4b89      	ldr	r3, [pc, #548]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b50:	f003 0302 	and.w	r3, r3, #2
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d107      	bne.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8009b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b5c:	d104      	bne.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
    {
      frequency = LSE_VALUE;
 8009b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b64:	f000 beae 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b6c:	f000 beaa 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8009b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b74:	f1a2 0110 	sub.w	r1, r2, #16
 8009b78:	430b      	orrs	r3, r1
 8009b7a:	d139      	bne.n	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009b7c:	4b7c      	ldr	r3, [pc, #496]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b86:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d104      	bne.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009b8e:	f7fd fea1 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 8009b92:	6378      	str	r0, [r7, #52]	@ 0x34
 8009b94:	f000 be96 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8009b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b9e:	d104      	bne.n	8009baa <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009ba0:	f7fd fd7c 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8009ba4:	6378      	str	r0, [r7, #52]	@ 0x34
 8009ba6:	f000 be8d 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009baa:	4b71      	ldr	r3, [pc, #452]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bb6:	d107      	bne.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8009bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bbe:	d103      	bne.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
    {
      frequency = HSI_VALUE;
 8009bc0:	4b6c      	ldr	r3, [pc, #432]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bc4:	f000 be7e 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8009bc8:	4b69      	ldr	r3, [pc, #420]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009bca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bce:	f003 0302 	and.w	r3, r3, #2
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d108      	bne.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bdc:	d104      	bne.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = LSE_VALUE;
 8009bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009be4:	f000 be6e 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bec:	f000 be6a 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8009bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bf4:	f1a2 0120 	sub.w	r1, r2, #32
 8009bf8:	430b      	orrs	r3, r1
 8009bfa:	d158      	bne.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x772>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009bfc:	4b5c      	ldr	r3, [pc, #368]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009bfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c02:	f003 0307 	and.w	r3, r3, #7
 8009c06:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8009c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d104      	bne.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8009c0e:	f7fd fe89 	bl	8007924 <HAL_RCC_GetPCLK3Freq>
 8009c12:	6378      	str	r0, [r7, #52]	@ 0x34
 8009c14:	f000 be56 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8009c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d104      	bne.n	8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009c1e:	f7fd fd3d 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8009c22:	6378      	str	r0, [r7, #52]	@ 0x34
 8009c24:	f000 be4e 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009c28:	4b51      	ldr	r3, [pc, #324]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c34:	d106      	bne.n	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8009c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d103      	bne.n	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
    {
      frequency = HSI_VALUE;
 8009c3c:	4b4d      	ldr	r3, [pc, #308]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c40:	f000 be40 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009c44:	4b4a      	ldr	r3, [pc, #296]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009c46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c4a:	f003 0302 	and.w	r3, r3, #2
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d107      	bne.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8009c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c54:	2b03      	cmp	r3, #3
 8009c56:	d104      	bne.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
    {
      frequency = LSE_VALUE;
 8009c58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c5e:	f000 be31 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8009c62:	4b43      	ldr	r3, [pc, #268]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 0320 	and.w	r3, r3, #32
 8009c6a:	2b20      	cmp	r3, #32
 8009c6c:	d11b      	bne.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c70:	2b04      	cmp	r3, #4
 8009c72:	d118      	bne.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c74:	4b3e      	ldr	r3, [pc, #248]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d005      	beq.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 8009c80:	4b3b      	ldr	r3, [pc, #236]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	0e1b      	lsrs	r3, r3, #24
 8009c86:	f003 030f 	and.w	r3, r3, #15
 8009c8a:	e006      	b.n	8009c9a <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8009c8c:	4b38      	ldr	r3, [pc, #224]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009c8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c92:	041b      	lsls	r3, r3, #16
 8009c94:	0e1b      	lsrs	r3, r3, #24
 8009c96:	f003 030f 	and.w	r3, r3, #15
 8009c9a:	4a37      	ldr	r2, [pc, #220]	@ (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ca2:	f000 be0f 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009caa:	f000 be0b 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8009cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cb2:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009cb6:	430b      	orrs	r3, r1
 8009cb8:	d173      	bne.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8009cba:	4b2d      	ldr	r3, [pc, #180]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009cc0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009cc4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ccc:	d104      	bne.n	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009cce:	f7fd fce5 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8009cd2:	6378      	str	r0, [r7, #52]	@ 0x34
 8009cd4:	f000 bdf6 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cde:	d108      	bne.n	8009cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ce0:	f107 0318 	add.w	r3, r7, #24
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7ff f975 	bl	8008fd4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cee:	f000 bde9 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d104      	bne.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8009cf8:	f7fd fdd2 	bl	80078a0 <HAL_RCC_GetHCLKFreq>
 8009cfc:	6378      	str	r0, [r7, #52]	@ 0x34
 8009cfe:	f000 bde1 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8009d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d04:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009d08:	d122      	bne.n	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009d0a:	4b19      	ldr	r3, [pc, #100]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 0320 	and.w	r3, r3, #32
 8009d12:	2b20      	cmp	r3, #32
 8009d14:	d118      	bne.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009d16:	4b16      	ldr	r3, [pc, #88]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d005      	beq.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009d22:	4b13      	ldr	r3, [pc, #76]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	0e1b      	lsrs	r3, r3, #24
 8009d28:	f003 030f 	and.w	r3, r3, #15
 8009d2c:	e006      	b.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 8009d2e:	4b10      	ldr	r3, [pc, #64]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009d30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009d34:	041b      	lsls	r3, r3, #16
 8009d36:	0e1b      	lsrs	r3, r3, #24
 8009d38:	f003 030f 	and.w	r3, r3, #15
 8009d3c:	4a0e      	ldr	r2, [pc, #56]	@ (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d44:	f000 bdbe 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
      else
      {
        frequency = 0U;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d4c:	f000 bdba 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009d50:	4b07      	ldr	r3, [pc, #28]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d5c:	d10e      	bne.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d64:	d10a      	bne.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      frequency = HSE_VALUE;
 8009d66:	4b03      	ldr	r3, [pc, #12]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d6a:	f000 bdab 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
 8009d6e:	bf00      	nop
 8009d70:	46020c00 	.word	0x46020c00
 8009d74:	00f42400 	.word	0x00f42400
 8009d78:	08010214 	.word	0x08010214
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009d7c:	4baf      	ldr	r3, [pc, #700]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d88:	d107      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d90:	d103      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSI_VALUE;
 8009d92:	4bab      	ldr	r3, [pc, #684]	@ (800a040 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8009d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d96:	f000 bd95 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d9e:	f000 bd91 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8009da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009da6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009daa:	430b      	orrs	r3, r1
 8009dac:	d159      	bne.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8009dae:	4ba3      	ldr	r3, [pc, #652]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009db0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009db4:	f003 0307 	and.w	r3, r3, #7
 8009db8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dbc:	2b04      	cmp	r3, #4
 8009dbe:	d84c      	bhi.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8009dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc6:	bf00      	nop
 8009dc8:	08009e01 	.word	0x08009e01
 8009dcc:	08009ddd 	.word	0x08009ddd
 8009dd0:	08009def 	.word	0x08009def
 8009dd4:	08009e0b 	.word	0x08009e0b
 8009dd8:	08009e15 	.word	0x08009e15
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7fe ff9d 	bl	8008d20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009dea:	f000 bd6b 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dee:	f107 030c 	add.w	r3, r7, #12
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7ff fa48 	bl	8009288 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009dfc:	f000 bd62 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009e00:	f7fd fd4e 	bl	80078a0 <HAL_RCC_GetHCLKFreq>
 8009e04:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009e06:	f000 bd5d 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009e0a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009e0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e10:	f000 bd58 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009e14:	4b89      	ldr	r3, [pc, #548]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 0320 	and.w	r3, r3, #32
 8009e1c:	2b20      	cmp	r3, #32
 8009e1e:	d118      	bne.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009e20:	4b86      	ldr	r3, [pc, #536]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d005      	beq.n	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8009e2c:	4b83      	ldr	r3, [pc, #524]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	0e1b      	lsrs	r3, r3, #24
 8009e32:	f003 030f 	and.w	r3, r3, #15
 8009e36:	e006      	b.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 8009e38:	4b80      	ldr	r3, [pc, #512]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009e3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009e3e:	041b      	lsls	r3, r3, #16
 8009e40:	0e1b      	lsrs	r3, r3, #24
 8009e42:	f003 030f 	and.w	r3, r3, #15
 8009e46:	4a7f      	ldr	r2, [pc, #508]	@ (800a044 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8009e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e4c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009e4e:	f000 bd39 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
          frequency = 0U;
 8009e52:	2300      	movs	r3, #0
 8009e54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e56:	f000 bd35 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      default:

        frequency = 0U;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e5e:	f000 bd31 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8009e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e66:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8009e6a:	430b      	orrs	r3, r1
 8009e6c:	d167      	bne.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8009e6e:	4b73      	ldr	r3, [pc, #460]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009e70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e74:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009e78:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e80:	d036      	beq.n	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8009e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e88:	d855      	bhi.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e90:	d029      	beq.n	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8009e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e98:	d84d      	bhi.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ea0:	d013      	beq.n	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ea8:	d845      	bhi.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d015      	beq.n	8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009eb6:	d13e      	bne.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009eb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7fe ff2f 	bl	8008d20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ec6:	f000 bcfd 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009eca:	f107 030c 	add.w	r3, r7, #12
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7ff f9da 	bl	8009288 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ed8:	f000 bcf4 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009edc:	f7fd fce0 	bl	80078a0 <HAL_RCC_GetHCLKFreq>
 8009ee0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009ee2:	f000 bcef 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009ee6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009eea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009eec:	f000 bcea 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009ef0:	4b52      	ldr	r3, [pc, #328]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f003 0320 	and.w	r3, r3, #32
 8009ef8:	2b20      	cmp	r3, #32
 8009efa:	d118      	bne.n	8009f2e <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009efc:	4b4f      	ldr	r3, [pc, #316]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d005      	beq.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8009f08:	4b4c      	ldr	r3, [pc, #304]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	0e1b      	lsrs	r3, r3, #24
 8009f0e:	f003 030f 	and.w	r3, r3, #15
 8009f12:	e006      	b.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 8009f14:	4b49      	ldr	r3, [pc, #292]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009f16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009f1a:	041b      	lsls	r3, r3, #16
 8009f1c:	0e1b      	lsrs	r3, r3, #24
 8009f1e:	f003 030f 	and.w	r3, r3, #15
 8009f22:	4a48      	ldr	r2, [pc, #288]	@ (800a044 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8009f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f28:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009f2a:	f000 bccb 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
          frequency = 0U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f32:	f000 bcc7 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      default:

        frequency = 0U;
 8009f36:	2300      	movs	r3, #0
 8009f38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f3a:	f000 bcc3 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8009f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f42:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8009f46:	430b      	orrs	r3, r1
 8009f48:	d14c      	bne.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009f4a:	4b3c      	ldr	r3, [pc, #240]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009f50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009f54:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d104      	bne.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009f5c:	f7fd fcba 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 8009f60:	6378      	str	r0, [r7, #52]	@ 0x34
 8009f62:	f000 bcaf 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8009f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f6c:	d104      	bne.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009f6e:	f7fd fb95 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8009f72:	6378      	str	r0, [r7, #52]	@ 0x34
 8009f74:	f000 bca6 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009f78:	4b30      	ldr	r3, [pc, #192]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f84:	d107      	bne.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
 8009f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f8c:	d103      	bne.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
    {
      frequency = HSI_VALUE;
 8009f8e:	4b2c      	ldr	r3, [pc, #176]	@ (800a040 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8009f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f92:	f000 bc97 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8009f96:	4b29      	ldr	r3, [pc, #164]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0320 	and.w	r3, r3, #32
 8009f9e:	2b20      	cmp	r3, #32
 8009fa0:	d11c      	bne.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009fa8:	d118      	bne.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009faa:	4b24      	ldr	r3, [pc, #144]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d005      	beq.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8009fb6:	4b21      	ldr	r3, [pc, #132]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	0e1b      	lsrs	r3, r3, #24
 8009fbc:	f003 030f 	and.w	r3, r3, #15
 8009fc0:	e006      	b.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
 8009fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009fc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009fc8:	041b      	lsls	r3, r3, #16
 8009fca:	0e1b      	lsrs	r3, r3, #24
 8009fcc:	f003 030f 	and.w	r3, r3, #15
 8009fd0:	4a1c      	ldr	r2, [pc, #112]	@ (800a044 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8009fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fd8:	f000 bc74 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fe0:	f000 bc70 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fe8:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8009fec:	430b      	orrs	r3, r1
 8009fee:	d152      	bne.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009ff0:	4b12      	ldr	r3, [pc, #72]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ff6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009ffa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d104      	bne.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a002:	f7fd fc67 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 800a006:	6378      	str	r0, [r7, #52]	@ 0x34
 800a008:	f000 bc5c 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800a00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a012:	d104      	bne.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a014:	f7fd fb42 	bl	800769c <HAL_RCC_GetSysClockFreq>
 800a018:	6378      	str	r0, [r7, #52]	@ 0x34
 800a01a:	f000 bc53 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800a01e:	4b07      	ldr	r3, [pc, #28]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a02a:	d10d      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800a02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a032:	d109      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HSI_VALUE;
 800a034:	4b02      	ldr	r3, [pc, #8]	@ (800a040 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800a036:	637b      	str	r3, [r7, #52]	@ 0x34
 800a038:	f000 bc44 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
 800a03c:	46020c00 	.word	0x46020c00
 800a040:	00f42400 	.word	0x00f42400
 800a044:	08010214 	.word	0x08010214
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800a048:	4b9b      	ldr	r3, [pc, #620]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 0320 	and.w	r3, r3, #32
 800a050:	2b20      	cmp	r3, #32
 800a052:	d11c      	bne.n	800a08e <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
 800a054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a056:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a05a:	d118      	bne.n	800a08e <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a05c:	4b96      	ldr	r3, [pc, #600]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d005      	beq.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
 800a068:	4b93      	ldr	r3, [pc, #588]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	0e1b      	lsrs	r3, r3, #24
 800a06e:	f003 030f 	and.w	r3, r3, #15
 800a072:	e006      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 800a074:	4b90      	ldr	r3, [pc, #576]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a076:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a07a:	041b      	lsls	r3, r3, #16
 800a07c:	0e1b      	lsrs	r3, r3, #24
 800a07e:	f003 030f 	and.w	r3, r3, #15
 800a082:	4a8e      	ldr	r2, [pc, #568]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 800a084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a088:	637b      	str	r3, [r7, #52]	@ 0x34
 800a08a:	f000 bc1b 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800a08e:	2300      	movs	r3, #0
 800a090:	637b      	str	r3, [r7, #52]	@ 0x34
 800a092:	f000 bc17 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800a096:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a09a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a09e:	430b      	orrs	r3, r1
 800a0a0:	d151      	bne.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a0a2:	4b85      	ldr	r3, [pc, #532]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a0a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a0a8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a0ac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b0:	2bc0      	cmp	r3, #192	@ 0xc0
 800a0b2:	d024      	beq.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a0b8:	d842      	bhi.n	800a140 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0bc:	2b80      	cmp	r3, #128	@ 0x80
 800a0be:	d00d      	beq.n	800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
 800a0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c2:	2b80      	cmp	r3, #128	@ 0x80
 800a0c4:	d83c      	bhi.n	800a140 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 800a0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d003      	beq.n	800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800a0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ce:	2b40      	cmp	r3, #64	@ 0x40
 800a0d0:	d011      	beq.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
 800a0d2:	e035      	b.n	800a140 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800a0d4:	f7fd fc26 	bl	8007924 <HAL_RCC_GetPCLK3Freq>
 800a0d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a0da:	e3f3      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a0dc:	4b76      	ldr	r3, [pc, #472]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0e8:	d102      	bne.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
        {
          frequency = HSI_VALUE;
 800a0ea:	4b75      	ldr	r3, [pc, #468]	@ (800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a0ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a0ee:	e3e9      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
          frequency = 0U;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0f4:	e3e6      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800a0f6:	f7fd fad1 	bl	800769c <HAL_RCC_GetSysClockFreq>
 800a0fa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a0fc:	e3e2      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a0fe:	4b6e      	ldr	r3, [pc, #440]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f003 0320 	and.w	r3, r3, #32
 800a106:	2b20      	cmp	r3, #32
 800a108:	d117      	bne.n	800a13a <HAL_RCCEx_GetPeriphCLKFreq+0xbfe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a10a:	4b6b      	ldr	r3, [pc, #428]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a112:	2b00      	cmp	r3, #0
 800a114:	d005      	beq.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800a116:	4b68      	ldr	r3, [pc, #416]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	0e1b      	lsrs	r3, r3, #24
 800a11c:	f003 030f 	and.w	r3, r3, #15
 800a120:	e006      	b.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800a122:	4b65      	ldr	r3, [pc, #404]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a124:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a128:	041b      	lsls	r3, r3, #16
 800a12a:	0e1b      	lsrs	r3, r3, #24
 800a12c:	f003 030f 	and.w	r3, r3, #15
 800a130:	4a62      	ldr	r2, [pc, #392]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 800a132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a136:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a138:	e3c4      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
          frequency = 0U;
 800a13a:	2300      	movs	r3, #0
 800a13c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a13e:	e3c1      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
      default:
      {
        frequency = 0U;
 800a140:	2300      	movs	r3, #0
 800a142:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a144:	e3be      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800a146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a14a:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800a14e:	430b      	orrs	r3, r1
 800a150:	d147      	bne.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a152:	4b59      	ldr	r3, [pc, #356]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a158:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a15c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800a15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a160:	2b00      	cmp	r3, #0
 800a162:	d103      	bne.n	800a16c <HAL_RCCEx_GetPeriphCLKFreq+0xc30>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a164:	f7fd fbb6 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 800a168:	6378      	str	r0, [r7, #52]	@ 0x34
 800a16a:	e3ab      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800a16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a172:	d103      	bne.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a174:	f7fd fa92 	bl	800769c <HAL_RCC_GetSysClockFreq>
 800a178:	6378      	str	r0, [r7, #52]	@ 0x34
 800a17a:	e3a3      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800a17c:	4b4e      	ldr	r3, [pc, #312]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a188:	d106      	bne.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800a18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a190:	d102      	bne.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
    {
      frequency = HSI_VALUE;
 800a192:	4b4b      	ldr	r3, [pc, #300]	@ (800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a194:	637b      	str	r3, [r7, #52]	@ 0x34
 800a196:	e395      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800a198:	4b47      	ldr	r3, [pc, #284]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 0320 	and.w	r3, r3, #32
 800a1a0:	2b20      	cmp	r3, #32
 800a1a2:	d11b      	bne.n	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0xca0>
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a1aa:	d117      	bne.n	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0xca0>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a1ac:	4b42      	ldr	r3, [pc, #264]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d005      	beq.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc88>
 800a1b8:	4b3f      	ldr	r3, [pc, #252]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	0e1b      	lsrs	r3, r3, #24
 800a1be:	f003 030f 	and.w	r3, r3, #15
 800a1c2:	e006      	b.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 800a1c4:	4b3c      	ldr	r3, [pc, #240]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a1c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a1ca:	041b      	lsls	r3, r3, #16
 800a1cc:	0e1b      	lsrs	r3, r3, #24
 800a1ce:	f003 030f 	and.w	r3, r3, #15
 800a1d2:	4a3a      	ldr	r2, [pc, #232]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 800a1d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1da:	e373      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1e0:	e370      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800a1e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1e6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a1ea:	430b      	orrs	r3, r1
 800a1ec:	d16a      	bne.n	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800a1ee:	4b32      	ldr	r3, [pc, #200]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a1f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a1f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1f8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d120      	bne.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a200:	4b2d      	ldr	r3, [pc, #180]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 0320 	and.w	r3, r3, #32
 800a208:	2b20      	cmp	r3, #32
 800a20a:	d117      	bne.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a20c:	4b2a      	ldr	r3, [pc, #168]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a214:	2b00      	cmp	r3, #0
 800a216:	d005      	beq.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0xce8>
 800a218:	4b27      	ldr	r3, [pc, #156]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	0e1b      	lsrs	r3, r3, #24
 800a21e:	f003 030f 	and.w	r3, r3, #15
 800a222:	e006      	b.n	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0xcf6>
 800a224:	4b24      	ldr	r3, [pc, #144]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a226:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a22a:	041b      	lsls	r3, r3, #16
 800a22c:	0e1b      	lsrs	r3, r3, #24
 800a22e:	f003 030f 	and.w	r3, r3, #15
 800a232:	4a22      	ldr	r2, [pc, #136]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 800a234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a238:	637b      	str	r3, [r7, #52]	@ 0x34
 800a23a:	e343      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
      else
      {
        frequency = 0U;
 800a23c:	2300      	movs	r3, #0
 800a23e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a240:	e340      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800a242:	4b1d      	ldr	r3, [pc, #116]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a244:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a24c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a250:	d112      	bne.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
 800a252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a258:	d10e      	bne.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a25a:	4b17      	ldr	r3, [pc, #92]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a25c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a264:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a268:	d102      	bne.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
      {
        frequency = LSI_VALUE / 128U;
 800a26a:	23fa      	movs	r3, #250	@ 0xfa
 800a26c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a26e:	e329      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
      else
      {
        frequency = LSI_VALUE;
 800a270:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a274:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a276:	e325      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800a278:	4b0f      	ldr	r3, [pc, #60]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a284:	d106      	bne.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>
 800a286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a28c:	d102      	bne.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>
    {
      frequency = HSI_VALUE;
 800a28e:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a290:	637b      	str	r3, [r7, #52]	@ 0x34
 800a292:	e317      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800a294:	4b08      	ldr	r3, [pc, #32]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a296:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a29a:	f003 0302 	and.w	r3, r3, #2
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d107      	bne.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2a8:	d103      	bne.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = LSE_VALUE;
 800a2aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2b0:	e308      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2b6:	e305      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
 800a2b8:	46020c00 	.word	0x46020c00
 800a2bc:	08010214 	.word	0x08010214
 800a2c0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800a2c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2c8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a2cc:	430b      	orrs	r3, r1
 800a2ce:	d164      	bne.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xe5e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a2d0:	4ba1      	ldr	r3, [pc, #644]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a2d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a2d6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a2da:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d120      	bne.n	800a324 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a2e2:	4b9d      	ldr	r3, [pc, #628]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0320 	and.w	r3, r3, #32
 800a2ea:	2b20      	cmp	r3, #32
 800a2ec:	d117      	bne.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a2ee:	4b9a      	ldr	r3, [pc, #616]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d005      	beq.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0xdca>
 800a2fa:	4b97      	ldr	r3, [pc, #604]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	0e1b      	lsrs	r3, r3, #24
 800a300:	f003 030f 	and.w	r3, r3, #15
 800a304:	e006      	b.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0xdd8>
 800a306:	4b94      	ldr	r3, [pc, #592]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a30c:	041b      	lsls	r3, r3, #16
 800a30e:	0e1b      	lsrs	r3, r3, #24
 800a310:	f003 030f 	and.w	r3, r3, #15
 800a314:	4a91      	ldr	r2, [pc, #580]	@ (800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x1020>)
 800a316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a31a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a31c:	e2d2      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
      else
      {
        frequency = 0U;
 800a31e:	2300      	movs	r3, #0
 800a320:	637b      	str	r3, [r7, #52]	@ 0x34
 800a322:	e2cf      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800a324:	4b8c      	ldr	r3, [pc, #560]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a32a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a32e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a332:	d112      	bne.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 800a334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a33a:	d10e      	bne.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a33c:	4b86      	ldr	r3, [pc, #536]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a33e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a346:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a34a:	d102      	bne.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      {
        frequency = LSI_VALUE / 128U;
 800a34c:	23fa      	movs	r3, #250	@ 0xfa
 800a34e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a350:	e2b8      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
      else
      {
        frequency = LSI_VALUE;
 800a352:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a356:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a358:	e2b4      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800a35a:	4b7f      	ldr	r3, [pc, #508]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a366:	d106      	bne.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
 800a368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a36e:	d102      	bne.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
    {
      frequency = HSI_VALUE;
 800a370:	4b7b      	ldr	r3, [pc, #492]	@ (800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>)
 800a372:	637b      	str	r3, [r7, #52]	@ 0x34
 800a374:	e2a6      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800a376:	4b78      	ldr	r3, [pc, #480]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a37c:	f003 0302 	and.w	r3, r3, #2
 800a380:	2b02      	cmp	r3, #2
 800a382:	d107      	bne.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800a384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a386:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a38a:	d103      	bne.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = LSE_VALUE;
 800a38c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a390:	637b      	str	r3, [r7, #52]	@ 0x34
 800a392:	e297      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800a394:	2300      	movs	r3, #0
 800a396:	637b      	str	r3, [r7, #52]	@ 0x34
 800a398:	e294      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800a39a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a39e:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a3a2:	430b      	orrs	r3, r1
 800a3a4:	d147      	bne.n	800a436 <HAL_RCCEx_GetPeriphCLKFreq+0xefa>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a3a6:	4b6c      	ldr	r3, [pc, #432]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a3a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a3ac:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800a3b0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d103      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a3b8:	f7fd fa8c 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 800a3bc:	6378      	str	r0, [r7, #52]	@ 0x34
 800a3be:	e281      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800a3c0:	4b65      	ldr	r3, [pc, #404]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a3c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3ce:	d112      	bne.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a3d6:	d10e      	bne.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a3d8:	4b5f      	ldr	r3, [pc, #380]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a3da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3e6:	d102      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
      {
        frequency = LSI_VALUE / 128U;
 800a3e8:	23fa      	movs	r3, #250	@ 0xfa
 800a3ea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a3ec:	e26a      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
      else
      {
        frequency = LSI_VALUE;
 800a3ee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a3f2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a3f4:	e266      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800a3f6:	4b58      	ldr	r3, [pc, #352]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a402:	d106      	bne.n	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0xed6>
 800a404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a406:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a40a:	d102      	bne.n	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0xed6>
    {
      frequency = HSI_VALUE;
 800a40c:	4b54      	ldr	r3, [pc, #336]	@ (800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>)
 800a40e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a410:	e258      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800a412:	4b51      	ldr	r3, [pc, #324]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a418:	f003 0302 	and.w	r3, r3, #2
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d107      	bne.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800a420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a422:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a426:	d103      	bne.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = LSE_VALUE;
 800a428:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a42c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a42e:	e249      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800a430:	2300      	movs	r3, #0
 800a432:	637b      	str	r3, [r7, #52]	@ 0x34
 800a434:	e246      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800a436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a43a:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800a43e:	430b      	orrs	r3, r1
 800a440:	d12d      	bne.n	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800a442:	4b45      	ldr	r3, [pc, #276]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a448:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800a44c:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800a44e:	4b42      	ldr	r3, [pc, #264]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a456:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a45a:	d105      	bne.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
 800a45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d102      	bne.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
    {
      frequency = HSE_VALUE;
 800a462:	4b3f      	ldr	r3, [pc, #252]	@ (800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>)
 800a464:	637b      	str	r3, [r7, #52]	@ 0x34
 800a466:	e22d      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800a468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a46e:	d107      	bne.n	800a480 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a470:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a474:	4618      	mov	r0, r3
 800a476:	f7fe fc53 	bl	8008d20 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800a47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a47e:	e221      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800a480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a482:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a486:	d107      	bne.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a488:	f107 0318 	add.w	r3, r7, #24
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fe fda1 	bl	8008fd4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	637b      	str	r3, [r7, #52]	@ 0x34
 800a496:	e215      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800a498:	2300      	movs	r3, #0
 800a49a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a49c:	e212      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800a49e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4a2:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800a4a6:	430b      	orrs	r3, r1
 800a4a8:	d15c      	bne.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x1028>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800a4aa:	4b2b      	ldr	r3, [pc, #172]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a4ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a4b0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a4b4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800a4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a4bc:	d028      	beq.n	800a510 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800a4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a4c4:	d845      	bhi.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a4cc:	d013      	beq.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a4d4:	d83d      	bhi.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800a4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d004      	beq.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfaa>
 800a4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4e2:	d004      	beq.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0xfb2>
 800a4e4:	e035      	b.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800a4e6:	f7fd fa09 	bl	80078fc <HAL_RCC_GetPCLK2Freq>
 800a4ea:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a4ec:	e1ea      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a4ee:	f7fd f8d5 	bl	800769c <HAL_RCC_GetSysClockFreq>
 800a4f2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a4f4:	e1e6      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a4f6:	4b18      	ldr	r3, [pc, #96]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a502:	d102      	bne.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
        {
          frequency = HSI_VALUE;
 800a504:	4b16      	ldr	r3, [pc, #88]	@ (800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>)
 800a506:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a508:	e1dc      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
          frequency = 0U;
 800a50a:	2300      	movs	r3, #0
 800a50c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a50e:	e1d9      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a510:	4b11      	ldr	r3, [pc, #68]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 0320 	and.w	r3, r3, #32
 800a518:	2b20      	cmp	r3, #32
 800a51a:	d117      	bne.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a51c:	4b0e      	ldr	r3, [pc, #56]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d005      	beq.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
 800a528:	4b0b      	ldr	r3, [pc, #44]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	0e1b      	lsrs	r3, r3, #24
 800a52e:	f003 030f 	and.w	r3, r3, #15
 800a532:	e006      	b.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x1006>
 800a534:	4b08      	ldr	r3, [pc, #32]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 800a536:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a53a:	041b      	lsls	r3, r3, #16
 800a53c:	0e1b      	lsrs	r3, r3, #24
 800a53e:	f003 030f 	and.w	r3, r3, #15
 800a542:	4a06      	ldr	r2, [pc, #24]	@ (800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x1020>)
 800a544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a548:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a54a:	e1bb      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
          frequency = 0U;
 800a54c:	2300      	movs	r3, #0
 800a54e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a550:	e1b8      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      default:

        frequency = 0U;
 800a552:	2300      	movs	r3, #0
 800a554:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a556:	e1b5      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
 800a558:	46020c00 	.word	0x46020c00
 800a55c:	08010214 	.word	0x08010214
 800a560:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800a564:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a568:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800a56c:	430b      	orrs	r3, r1
 800a56e:	d156      	bne.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x10e2>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800a570:	4ba5      	ldr	r3, [pc, #660]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a576:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a57a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800a57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a57e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a582:	d028      	beq.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x109a>
 800a584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a586:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a58a:	d845      	bhi.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x10dc>
 800a58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a592:	d013      	beq.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
 800a594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a596:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a59a:	d83d      	bhi.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x10dc>
 800a59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d004      	beq.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x1070>
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5a8:	d004      	beq.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1078>
 800a5aa:	e035      	b.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x10dc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800a5ac:	f7fd f992 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 800a5b0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a5b2:	e187      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a5b4:	f7fd f872 	bl	800769c <HAL_RCC_GetSysClockFreq>
 800a5b8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a5ba:	e183      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5bc:	4b92      	ldr	r3, [pc, #584]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5c8:	d102      	bne.n	800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
        {
          frequency = HSI_VALUE;
 800a5ca:	4b90      	ldr	r3, [pc, #576]	@ (800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>)
 800a5cc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a5ce:	e179      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
          frequency = 0U;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a5d4:	e176      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a5d6:	4b8c      	ldr	r3, [pc, #560]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 0320 	and.w	r3, r3, #32
 800a5de:	2b20      	cmp	r3, #32
 800a5e0:	d117      	bne.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x10d6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a5e2:	4b89      	ldr	r3, [pc, #548]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d005      	beq.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
 800a5ee:	4b86      	ldr	r3, [pc, #536]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	0e1b      	lsrs	r3, r3, #24
 800a5f4:	f003 030f 	and.w	r3, r3, #15
 800a5f8:	e006      	b.n	800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x10cc>
 800a5fa:	4b83      	ldr	r3, [pc, #524]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a5fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a600:	041b      	lsls	r3, r3, #16
 800a602:	0e1b      	lsrs	r3, r3, #24
 800a604:	f003 030f 	and.w	r3, r3, #15
 800a608:	4a81      	ldr	r2, [pc, #516]	@ (800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>)
 800a60a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a60e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a610:	e158      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
          frequency = 0U;
 800a612:	2300      	movs	r3, #0
 800a614:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a616:	e155      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      default:

        frequency = 0U;
 800a618:	2300      	movs	r3, #0
 800a61a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a61c:	e152      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800a61e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a622:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800a626:	430b      	orrs	r3, r1
 800a628:	d177      	bne.n	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a62a:	4b77      	ldr	r3, [pc, #476]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a62c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a630:	f003 0318 	and.w	r3, r3, #24
 800a634:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800a636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a638:	2b18      	cmp	r3, #24
 800a63a:	d86b      	bhi.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 800a63c:	a201      	add	r2, pc, #4	@ (adr r2, 800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>)
 800a63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a642:	bf00      	nop
 800a644:	0800a6a9 	.word	0x0800a6a9
 800a648:	0800a715 	.word	0x0800a715
 800a64c:	0800a715 	.word	0x0800a715
 800a650:	0800a715 	.word	0x0800a715
 800a654:	0800a715 	.word	0x0800a715
 800a658:	0800a715 	.word	0x0800a715
 800a65c:	0800a715 	.word	0x0800a715
 800a660:	0800a715 	.word	0x0800a715
 800a664:	0800a6b1 	.word	0x0800a6b1
 800a668:	0800a715 	.word	0x0800a715
 800a66c:	0800a715 	.word	0x0800a715
 800a670:	0800a715 	.word	0x0800a715
 800a674:	0800a715 	.word	0x0800a715
 800a678:	0800a715 	.word	0x0800a715
 800a67c:	0800a715 	.word	0x0800a715
 800a680:	0800a715 	.word	0x0800a715
 800a684:	0800a6b9 	.word	0x0800a6b9
 800a688:	0800a715 	.word	0x0800a715
 800a68c:	0800a715 	.word	0x0800a715
 800a690:	0800a715 	.word	0x0800a715
 800a694:	0800a715 	.word	0x0800a715
 800a698:	0800a715 	.word	0x0800a715
 800a69c:	0800a715 	.word	0x0800a715
 800a6a0:	0800a715 	.word	0x0800a715
 800a6a4:	0800a6d3 	.word	0x0800a6d3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800a6a8:	f7fd f93c 	bl	8007924 <HAL_RCC_GetPCLK3Freq>
 800a6ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a6ae:	e109      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a6b0:	f7fc fff4 	bl	800769c <HAL_RCC_GetSysClockFreq>
 800a6b4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a6b6:	e105      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a6b8:	4b53      	ldr	r3, [pc, #332]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6c4:	d102      	bne.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
        {
          frequency = HSI_VALUE;
 800a6c6:	4b51      	ldr	r3, [pc, #324]	@ (800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>)
 800a6c8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a6ca:	e0fb      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
          frequency = 0U;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a6d0:	e0f8      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a6d2:	4b4d      	ldr	r3, [pc, #308]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b20      	cmp	r3, #32
 800a6dc:	d117      	bne.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a6de:	4b4a      	ldr	r3, [pc, #296]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d005      	beq.n	800a6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
 800a6ea:	4b47      	ldr	r3, [pc, #284]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	0e1b      	lsrs	r3, r3, #24
 800a6f0:	f003 030f 	and.w	r3, r3, #15
 800a6f4:	e006      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800a6f6:	4b44      	ldr	r3, [pc, #272]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a6f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a6fc:	041b      	lsls	r3, r3, #16
 800a6fe:	0e1b      	lsrs	r3, r3, #24
 800a700:	f003 030f 	and.w	r3, r3, #15
 800a704:	4a42      	ldr	r2, [pc, #264]	@ (800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>)
 800a706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a70a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a70c:	e0da      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
          frequency = 0U;
 800a70e:	2300      	movs	r3, #0
 800a710:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a712:	e0d7      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      default:

        frequency = 0U;
 800a714:	2300      	movs	r3, #0
 800a716:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a718:	e0d4      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800a71a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a71e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800a722:	430b      	orrs	r3, r1
 800a724:	d155      	bne.n	800a7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a726:	4b38      	ldr	r3, [pc, #224]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a728:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a72c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a730:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a734:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a738:	d013      	beq.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
 800a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a740:	d844      	bhi.n	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x1290>
 800a742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a744:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a748:	d013      	beq.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
 800a74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a750:	d83c      	bhi.n	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x1290>
 800a752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a754:	2b00      	cmp	r3, #0
 800a756:	d014      	beq.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800a758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a75e:	d014      	beq.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x124e>
 800a760:	e034      	b.n	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x1290>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a762:	f107 0318 	add.w	r3, r7, #24
 800a766:	4618      	mov	r0, r3
 800a768:	f7fe fc34 	bl	8008fd4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a770:	e0a8      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a776:	4618      	mov	r0, r3
 800a778:	f7fe fad2 	bl	8008d20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a780:	e0a0      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a782:	f7fc ff8b 	bl	800769c <HAL_RCC_GetSysClockFreq>
 800a786:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a788:	e09c      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a78a:	4b1f      	ldr	r3, [pc, #124]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 0320 	and.w	r3, r3, #32
 800a792:	2b20      	cmp	r3, #32
 800a794:	d117      	bne.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x128a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a796:	4b1c      	ldr	r3, [pc, #112]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d005      	beq.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800a7a2:	4b19      	ldr	r3, [pc, #100]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	0e1b      	lsrs	r3, r3, #24
 800a7a8:	f003 030f 	and.w	r3, r3, #15
 800a7ac:	e006      	b.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 800a7ae:	4b16      	ldr	r3, [pc, #88]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a7b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a7b4:	041b      	lsls	r3, r3, #16
 800a7b6:	0e1b      	lsrs	r3, r3, #24
 800a7b8:	f003 030f 	and.w	r3, r3, #15
 800a7bc:	4a14      	ldr	r2, [pc, #80]	@ (800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>)
 800a7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a7c4:	e07e      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
          frequency = 0U;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7ca:	e07b      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>

      default:

        frequency = 0U;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7d0:	e078      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800a7d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7d6:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800a7da:	430b      	orrs	r3, r1
 800a7dc:	d138      	bne.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800a7de:	4b0a      	ldr	r3, [pc, #40]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a7e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a7e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7e8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800a7ea:	4b07      	ldr	r3, [pc, #28]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>)
 800a7ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a7f0:	f003 0302 	and.w	r3, r3, #2
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d10d      	bne.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
 800a7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d10a      	bne.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
    {
      frequency = LSE_VALUE;
 800a7fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a802:	637b      	str	r3, [r7, #52]	@ 0x34
 800a804:	e05e      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
 800a806:	bf00      	nop
 800a808:	46020c00 	.word	0x46020c00
 800a80c:	00f42400 	.word	0x00f42400
 800a810:	08010214 	.word	0x08010214
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800a814:	4b2e      	ldr	r3, [pc, #184]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1394>)
 800a816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a81a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a81e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a822:	d112      	bne.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800a824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a826:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a82a:	d10e      	bne.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a82c:	4b28      	ldr	r3, [pc, #160]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1394>)
 800a82e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a83a:	d102      	bne.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x1306>
      {
        frequency = LSI_VALUE / 128U;
 800a83c:	23fa      	movs	r3, #250	@ 0xfa
 800a83e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a840:	e040      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
      else
      {
        frequency = LSI_VALUE;
 800a842:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a846:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a848:	e03c      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800a84a:	2300      	movs	r3, #0
 800a84c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a84e:	e039      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800a850:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a854:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a858:	430b      	orrs	r3, r1
 800a85a:	d131      	bne.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1384>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a85c:	4b1c      	ldr	r3, [pc, #112]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1394>)
 800a85e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a862:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a866:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a868:	4b19      	ldr	r3, [pc, #100]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1394>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a870:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a874:	d105      	bne.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 800a876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d102      	bne.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI48_VALUE;
 800a87c:	4b15      	ldr	r3, [pc, #84]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>)
 800a87e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a880:	e020      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800a882:	4b13      	ldr	r3, [pc, #76]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1394>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a88a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a88e:	d106      	bne.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 800a890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a896:	d102      	bne.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
    {
      frequency = HSI48_VALUE >> 1U ;
 800a898:	4b0f      	ldr	r3, [pc, #60]	@ (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>)
 800a89a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a89c:	e012      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800a89e:	4b0c      	ldr	r3, [pc, #48]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1394>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8aa:	d106      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x137e>
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8b2:	d102      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x137e>
    {
      frequency = HSI_VALUE;
 800a8b4:	4b09      	ldr	r3, [pc, #36]	@ (800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>)
 800a8b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8b8:	e004      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8be:	e001      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800a8c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3738      	adds	r7, #56	@ 0x38
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bdb0      	pop	{r4, r5, r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	46020c00 	.word	0x46020c00
 800a8d4:	02dc6c00 	.word	0x02dc6c00
 800a8d8:	016e3600 	.word	0x016e3600
 800a8dc:	00f42400 	.word	0x00f42400

0800a8e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;
  assert_param(IS_RCC_PLLSOURCE(pll2->PLL2Source));
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d00c      	beq.n	800a90a <RCCEx_PLL2_Config+0x2a>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d008      	beq.n	800a90a <RCCEx_PLL2_Config+0x2a>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2b03      	cmp	r3, #3
 800a8fe:	d004      	beq.n	800a90a <RCCEx_PLL2_Config+0x2a>
 800a900:	f241 014a 	movw	r1, #4170	@ 0x104a
 800a904:	4869      	ldr	r0, [pc, #420]	@ (800aaac <RCCEx_PLL2_Config+0x1cc>)
 800a906:	f7f6 fb73 	bl	8000ff0 <assert_failed>
  assert_param(IS_RCC_PLLM_VALUE(pll2->PLL2M));
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d003      	beq.n	800a91a <RCCEx_PLL2_Config+0x3a>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	2b10      	cmp	r3, #16
 800a918:	d904      	bls.n	800a924 <RCCEx_PLL2_Config+0x44>
 800a91a:	f241 014b 	movw	r1, #4171	@ 0x104b
 800a91e:	4863      	ldr	r0, [pc, #396]	@ (800aaac <RCCEx_PLL2_Config+0x1cc>)
 800a920:	f7f6 fb66 	bl	8000ff0 <assert_failed>
  assert_param(IS_RCC_PLLN_VALUE(pll2->PLL2N));
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	2b03      	cmp	r3, #3
 800a92a:	d904      	bls.n	800a936 <RCCEx_PLL2_Config+0x56>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a934:	d904      	bls.n	800a940 <RCCEx_PLL2_Config+0x60>
 800a936:	f241 014c 	movw	r1, #4172	@ 0x104c
 800a93a:	485c      	ldr	r0, [pc, #368]	@ (800aaac <RCCEx_PLL2_Config+0x1cc>)
 800a93c:	f7f6 fb58 	bl	8000ff0 <assert_failed>
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d003      	beq.n	800a950 <RCCEx_PLL2_Config+0x70>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	2b80      	cmp	r3, #128	@ 0x80
 800a94e:	d904      	bls.n	800a95a <RCCEx_PLL2_Config+0x7a>
 800a950:	f241 014d 	movw	r1, #4173	@ 0x104d
 800a954:	4855      	ldr	r0, [pc, #340]	@ (800aaac <RCCEx_PLL2_Config+0x1cc>)
 800a956:	f7f6 fb4b 	bl	8000ff0 <assert_failed>
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d003      	beq.n	800a96a <RCCEx_PLL2_Config+0x8a>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	2b80      	cmp	r3, #128	@ 0x80
 800a968:	d904      	bls.n	800a974 <RCCEx_PLL2_Config+0x94>
 800a96a:	f241 014e 	movw	r1, #4174	@ 0x104e
 800a96e:	484f      	ldr	r0, [pc, #316]	@ (800aaac <RCCEx_PLL2_Config+0x1cc>)
 800a970:	f7f6 fb3e 	bl	8000ff0 <assert_failed>
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	695b      	ldr	r3, [r3, #20]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d003      	beq.n	800a984 <RCCEx_PLL2_Config+0xa4>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	2b80      	cmp	r3, #128	@ 0x80
 800a982:	d904      	bls.n	800a98e <RCCEx_PLL2_Config+0xae>
 800a984:	f241 014f 	movw	r1, #4175	@ 0x104f
 800a988:	4848      	ldr	r0, [pc, #288]	@ (800aaac <RCCEx_PLL2_Config+0x1cc>)
 800a98a:	f7f6 fb31 	bl	8000ff0 <assert_failed>

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800a98e:	4b48      	ldr	r3, [pc, #288]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a47      	ldr	r2, [pc, #284]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800a994:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a998:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a99a:	f7f7 f82b 	bl	80019f4 <HAL_GetTick>
 800a99e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a9a0:	e008      	b.n	800a9b4 <RCCEx_PLL2_Config+0xd4>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a9a2:	f7f7 f827 	bl	80019f4 <HAL_GetTick>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	1ad3      	subs	r3, r2, r3
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d901      	bls.n	800a9b4 <RCCEx_PLL2_Config+0xd4>
    {
      return HAL_TIMEOUT;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	e077      	b.n	800aaa4 <RCCEx_PLL2_Config+0x1c4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a9b4:	4b3e      	ldr	r3, [pc, #248]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d1f0      	bne.n	800a9a2 <RCCEx_PLL2_Config+0xc2>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a9c0:	4b3b      	ldr	r3, [pc, #236]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800a9c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a9c8:	f023 0303 	bic.w	r3, r3, #3
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	6811      	ldr	r1, [r2, #0]
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	6852      	ldr	r2, [r2, #4]
 800a9d4:	3a01      	subs	r2, #1
 800a9d6:	0212      	lsls	r2, r2, #8
 800a9d8:	430a      	orrs	r2, r1
 800a9da:	4935      	ldr	r1, [pc, #212]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a9e0:	4b33      	ldr	r3, [pc, #204]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800a9e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9e4:	4b33      	ldr	r3, [pc, #204]	@ (800aab4 <RCCEx_PLL2_Config+0x1d4>)
 800a9e6:	4013      	ands	r3, r2
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	6892      	ldr	r2, [r2, #8]
 800a9ec:	3a01      	subs	r2, #1
 800a9ee:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	68d2      	ldr	r2, [r2, #12]
 800a9f6:	3a01      	subs	r2, #1
 800a9f8:	0252      	lsls	r2, r2, #9
 800a9fa:	b292      	uxth	r2, r2
 800a9fc:	4311      	orrs	r1, r2
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	6912      	ldr	r2, [r2, #16]
 800aa02:	3a01      	subs	r2, #1
 800aa04:	0412      	lsls	r2, r2, #16
 800aa06:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800aa0a:	4311      	orrs	r1, r2
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	6952      	ldr	r2, [r2, #20]
 800aa10:	3a01      	subs	r2, #1
 800aa12:	0612      	lsls	r2, r2, #24
 800aa14:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800aa18:	430a      	orrs	r2, r1
 800aa1a:	4925      	ldr	r1, [pc, #148]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800aa20:	4b23      	ldr	r3, [pc, #140]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800aa22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa24:	f023 020c 	bic.w	r2, r3, #12
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	4920      	ldr	r1, [pc, #128]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800aa32:	4b1f      	ldr	r3, [pc, #124]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800aa34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a1b      	ldr	r3, [r3, #32]
 800aa3a:	491d      	ldr	r1, [pc, #116]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800aa40:	4b1b      	ldr	r3, [pc, #108]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800aa42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa44:	4a1a      	ldr	r2, [pc, #104]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800aa46:	f023 0310 	bic.w	r3, r3, #16
 800aa4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800aa4c:	4b18      	ldr	r3, [pc, #96]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800aa4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa50:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aa54:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	69d2      	ldr	r2, [r2, #28]
 800aa5c:	00d2      	lsls	r2, r2, #3
 800aa5e:	4914      	ldr	r1, [pc, #80]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800aa60:	4313      	orrs	r3, r2
 800aa62:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800aa64:	4b12      	ldr	r3, [pc, #72]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800aa66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa68:	4a11      	ldr	r2, [pc, #68]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800aa6a:	f043 0310 	orr.w	r3, r3, #16
 800aa6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800aa70:	4b0f      	ldr	r3, [pc, #60]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a0e      	ldr	r2, [pc, #56]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800aa76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aa7a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800aa7c:	f7f6 ffba 	bl	80019f4 <HAL_GetTick>
 800aa80:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aa82:	e008      	b.n	800aa96 <RCCEx_PLL2_Config+0x1b6>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aa84:	f7f6 ffb6 	bl	80019f4 <HAL_GetTick>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d901      	bls.n	800aa96 <RCCEx_PLL2_Config+0x1b6>
    {
      return HAL_TIMEOUT;
 800aa92:	2303      	movs	r3, #3
 800aa94:	e006      	b.n	800aaa4 <RCCEx_PLL2_Config+0x1c4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aa96:	4b06      	ldr	r3, [pc, #24]	@ (800aab0 <RCCEx_PLL2_Config+0x1d0>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d0f0      	beq.n	800aa84 <RCCEx_PLL2_Config+0x1a4>
    }
  }
  return HAL_OK;
 800aaa2:	2300      	movs	r3, #0

}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	080100d4 	.word	0x080100d4
 800aab0:	46020c00 	.word	0x46020c00
 800aab4:	80800000 	.word	0x80800000

0800aab8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  assert_param(IS_RCC_PLLSOURCE(pll3->PLL3Source));
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d00c      	beq.n	800aae2 <RCCEx_PLL3_Config+0x2a>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d008      	beq.n	800aae2 <RCCEx_PLL3_Config+0x2a>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b03      	cmp	r3, #3
 800aad6:	d004      	beq.n	800aae2 <RCCEx_PLL3_Config+0x2a>
 800aad8:	f241 0193 	movw	r1, #4243	@ 0x1093
 800aadc:	4869      	ldr	r0, [pc, #420]	@ (800ac84 <RCCEx_PLL3_Config+0x1cc>)
 800aade:	f7f6 fa87 	bl	8000ff0 <assert_failed>
  assert_param(IS_RCC_PLLM_VALUE(pll3->PLL3M));
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d003      	beq.n	800aaf2 <RCCEx_PLL3_Config+0x3a>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	2b10      	cmp	r3, #16
 800aaf0:	d904      	bls.n	800aafc <RCCEx_PLL3_Config+0x44>
 800aaf2:	f241 0194 	movw	r1, #4244	@ 0x1094
 800aaf6:	4863      	ldr	r0, [pc, #396]	@ (800ac84 <RCCEx_PLL3_Config+0x1cc>)
 800aaf8:	f7f6 fa7a 	bl	8000ff0 <assert_failed>
  assert_param(IS_RCC_PLLN_VALUE(pll3->PLL3N));
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d904      	bls.n	800ab0e <RCCEx_PLL3_Config+0x56>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab0c:	d904      	bls.n	800ab18 <RCCEx_PLL3_Config+0x60>
 800ab0e:	f241 0195 	movw	r1, #4245	@ 0x1095
 800ab12:	485c      	ldr	r0, [pc, #368]	@ (800ac84 <RCCEx_PLL3_Config+0x1cc>)
 800ab14:	f7f6 fa6c 	bl	8000ff0 <assert_failed>
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d003      	beq.n	800ab28 <RCCEx_PLL3_Config+0x70>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	2b80      	cmp	r3, #128	@ 0x80
 800ab26:	d904      	bls.n	800ab32 <RCCEx_PLL3_Config+0x7a>
 800ab28:	f241 0196 	movw	r1, #4246	@ 0x1096
 800ab2c:	4855      	ldr	r0, [pc, #340]	@ (800ac84 <RCCEx_PLL3_Config+0x1cc>)
 800ab2e:	f7f6 fa5f 	bl	8000ff0 <assert_failed>
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <RCCEx_PLL3_Config+0x8a>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	2b80      	cmp	r3, #128	@ 0x80
 800ab40:	d904      	bls.n	800ab4c <RCCEx_PLL3_Config+0x94>
 800ab42:	f241 0197 	movw	r1, #4247	@ 0x1097
 800ab46:	484f      	ldr	r0, [pc, #316]	@ (800ac84 <RCCEx_PLL3_Config+0x1cc>)
 800ab48:	f7f6 fa52 	bl	8000ff0 <assert_failed>
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	695b      	ldr	r3, [r3, #20]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d003      	beq.n	800ab5c <RCCEx_PLL3_Config+0xa4>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	695b      	ldr	r3, [r3, #20]
 800ab58:	2b80      	cmp	r3, #128	@ 0x80
 800ab5a:	d904      	bls.n	800ab66 <RCCEx_PLL3_Config+0xae>
 800ab5c:	f241 0198 	movw	r1, #4248	@ 0x1098
 800ab60:	4848      	ldr	r0, [pc, #288]	@ (800ac84 <RCCEx_PLL3_Config+0x1cc>)
 800ab62:	f7f6 fa45 	bl	8000ff0 <assert_failed>

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800ab66:	4b48      	ldr	r3, [pc, #288]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a47      	ldr	r2, [pc, #284]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800ab6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab70:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ab72:	f7f6 ff3f 	bl	80019f4 <HAL_GetTick>
 800ab76:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ab78:	e008      	b.n	800ab8c <RCCEx_PLL3_Config+0xd4>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ab7a:	f7f6 ff3b 	bl	80019f4 <HAL_GetTick>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d901      	bls.n	800ab8c <RCCEx_PLL3_Config+0xd4>
    {
      return HAL_TIMEOUT;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	e077      	b.n	800ac7c <RCCEx_PLL3_Config+0x1c4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ab8c:	4b3e      	ldr	r3, [pc, #248]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1f0      	bne.n	800ab7a <RCCEx_PLL3_Config+0xc2>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ab98:	4b3b      	ldr	r3, [pc, #236]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800ab9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab9c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800aba0:	f023 0303 	bic.w	r3, r3, #3
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	6811      	ldr	r1, [r2, #0]
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	6852      	ldr	r2, [r2, #4]
 800abac:	3a01      	subs	r2, #1
 800abae:	0212      	lsls	r2, r2, #8
 800abb0:	430a      	orrs	r2, r1
 800abb2:	4935      	ldr	r1, [pc, #212]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800abb4:	4313      	orrs	r3, r2
 800abb6:	630b      	str	r3, [r1, #48]	@ 0x30
 800abb8:	4b33      	ldr	r3, [pc, #204]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800abba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abbc:	4b33      	ldr	r3, [pc, #204]	@ (800ac8c <RCCEx_PLL3_Config+0x1d4>)
 800abbe:	4013      	ands	r3, r2
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	6892      	ldr	r2, [r2, #8]
 800abc4:	3a01      	subs	r2, #1
 800abc6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	68d2      	ldr	r2, [r2, #12]
 800abce:	3a01      	subs	r2, #1
 800abd0:	0252      	lsls	r2, r2, #9
 800abd2:	b292      	uxth	r2, r2
 800abd4:	4311      	orrs	r1, r2
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	6912      	ldr	r2, [r2, #16]
 800abda:	3a01      	subs	r2, #1
 800abdc:	0412      	lsls	r2, r2, #16
 800abde:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800abe2:	4311      	orrs	r1, r2
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	6952      	ldr	r2, [r2, #20]
 800abe8:	3a01      	subs	r2, #1
 800abea:	0612      	lsls	r2, r2, #24
 800abec:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800abf0:	430a      	orrs	r2, r1
 800abf2:	4925      	ldr	r1, [pc, #148]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800abf4:	4313      	orrs	r3, r2
 800abf6:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800abf8:	4b23      	ldr	r3, [pc, #140]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800abfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abfc:	f023 020c 	bic.w	r2, r3, #12
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	4920      	ldr	r1, [pc, #128]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800ac06:	4313      	orrs	r3, r2
 800ac08:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ac0a:	4b1f      	ldr	r3, [pc, #124]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800ac0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	491d      	ldr	r1, [pc, #116]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800ac14:	4313      	orrs	r3, r2
 800ac16:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800ac18:	4b1b      	ldr	r3, [pc, #108]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800ac1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac1c:	4a1a      	ldr	r2, [pc, #104]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800ac1e:	f023 0310 	bic.w	r3, r3, #16
 800ac22:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ac24:	4b18      	ldr	r3, [pc, #96]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800ac26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac2c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	69d2      	ldr	r2, [r2, #28]
 800ac34:	00d2      	lsls	r2, r2, #3
 800ac36:	4914      	ldr	r1, [pc, #80]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800ac3c:	4b12      	ldr	r3, [pc, #72]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800ac3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac40:	4a11      	ldr	r2, [pc, #68]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800ac42:	f043 0310 	orr.w	r3, r3, #16
 800ac46:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800ac48:	4b0f      	ldr	r3, [pc, #60]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a0e      	ldr	r2, [pc, #56]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800ac4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac52:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ac54:	f7f6 fece 	bl	80019f4 <HAL_GetTick>
 800ac58:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ac5a:	e008      	b.n	800ac6e <RCCEx_PLL3_Config+0x1b6>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ac5c:	f7f6 feca 	bl	80019f4 <HAL_GetTick>
 800ac60:	4602      	mov	r2, r0
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d901      	bls.n	800ac6e <RCCEx_PLL3_Config+0x1b6>
    {
      return HAL_TIMEOUT;
 800ac6a:	2303      	movs	r3, #3
 800ac6c:	e006      	b.n	800ac7c <RCCEx_PLL3_Config+0x1c4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ac6e:	4b06      	ldr	r3, [pc, #24]	@ (800ac88 <RCCEx_PLL3_Config+0x1d0>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d0f0      	beq.n	800ac5c <RCCEx_PLL3_Config+0x1a4>
    }
  }
  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	080100d4 	.word	0x080100d4
 800ac88:	46020c00 	.word	0x46020c00
 800ac8c:	80800000 	.word	0x80800000

0800ac90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d101      	bne.n	800aca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e183      	b.n	800afaa <HAL_TIM_Base_Init+0x31a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a78      	ldr	r2, [pc, #480]	@ (800ae88 <HAL_TIM_Base_Init+0x1f8>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d06d      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a76      	ldr	r2, [pc, #472]	@ (800ae8c <HAL_TIM_Base_Init+0x1fc>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d068      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acbe:	d063      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800acc8:	d05e      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a70      	ldr	r2, [pc, #448]	@ (800ae90 <HAL_TIM_Base_Init+0x200>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d059      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a6e      	ldr	r2, [pc, #440]	@ (800ae94 <HAL_TIM_Base_Init+0x204>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d054      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a6d      	ldr	r2, [pc, #436]	@ (800ae98 <HAL_TIM_Base_Init+0x208>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d04f      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a6b      	ldr	r2, [pc, #428]	@ (800ae9c <HAL_TIM_Base_Init+0x20c>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d04a      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a6a      	ldr	r2, [pc, #424]	@ (800aea0 <HAL_TIM_Base_Init+0x210>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d045      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a68      	ldr	r2, [pc, #416]	@ (800aea4 <HAL_TIM_Base_Init+0x214>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d040      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a67      	ldr	r2, [pc, #412]	@ (800aea8 <HAL_TIM_Base_Init+0x218>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d03b      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a65      	ldr	r2, [pc, #404]	@ (800aeac <HAL_TIM_Base_Init+0x21c>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d036      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a64      	ldr	r2, [pc, #400]	@ (800aeb0 <HAL_TIM_Base_Init+0x220>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d031      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a62      	ldr	r2, [pc, #392]	@ (800aeb4 <HAL_TIM_Base_Init+0x224>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d02c      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a61      	ldr	r2, [pc, #388]	@ (800aeb8 <HAL_TIM_Base_Init+0x228>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d027      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a5f      	ldr	r2, [pc, #380]	@ (800aebc <HAL_TIM_Base_Init+0x22c>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d022      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a5e      	ldr	r2, [pc, #376]	@ (800aec0 <HAL_TIM_Base_Init+0x230>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d01d      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a5c      	ldr	r2, [pc, #368]	@ (800aec4 <HAL_TIM_Base_Init+0x234>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d018      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a5b      	ldr	r2, [pc, #364]	@ (800aec8 <HAL_TIM_Base_Init+0x238>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d013      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a59      	ldr	r2, [pc, #356]	@ (800aecc <HAL_TIM_Base_Init+0x23c>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d00e      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a58      	ldr	r2, [pc, #352]	@ (800aed0 <HAL_TIM_Base_Init+0x240>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d009      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a56      	ldr	r2, [pc, #344]	@ (800aed4 <HAL_TIM_Base_Init+0x244>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d004      	beq.n	800ad88 <HAL_TIM_Base_Init+0xf8>
 800ad7e:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800ad82:	4855      	ldr	r0, [pc, #340]	@ (800aed8 <HAL_TIM_Base_Init+0x248>)
 800ad84:	f7f6 f934 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d014      	beq.n	800adba <HAL_TIM_Base_Init+0x12a>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	2b10      	cmp	r3, #16
 800ad96:	d010      	beq.n	800adba <HAL_TIM_Base_Init+0x12a>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	2b20      	cmp	r3, #32
 800ad9e:	d00c      	beq.n	800adba <HAL_TIM_Base_Init+0x12a>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	2b40      	cmp	r3, #64	@ 0x40
 800ada6:	d008      	beq.n	800adba <HAL_TIM_Base_Init+0x12a>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	2b60      	cmp	r3, #96	@ 0x60
 800adae:	d004      	beq.n	800adba <HAL_TIM_Base_Init+0x12a>
 800adb0:	f240 1123 	movw	r1, #291	@ 0x123
 800adb4:	4848      	ldr	r0, [pc, #288]	@ (800aed8 <HAL_TIM_Base_Init+0x248>)
 800adb6:	f7f6 f91b 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00e      	beq.n	800ade0 <HAL_TIM_Base_Init+0x150>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adca:	d009      	beq.n	800ade0 <HAL_TIM_Base_Init+0x150>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800add4:	d004      	beq.n	800ade0 <HAL_TIM_Base_Init+0x150>
 800add6:	f44f 7192 	mov.w	r1, #292	@ 0x124
 800adda:	483f      	ldr	r0, [pc, #252]	@ (800aed8 <HAL_TIM_Base_Init+0x248>)
 800addc:	f7f6 f908 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ade8:	d022      	beq.n	800ae30 <HAL_TIM_Base_Init+0x1a0>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800adf2:	d01d      	beq.n	800ae30 <HAL_TIM_Base_Init+0x1a0>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a25      	ldr	r2, [pc, #148]	@ (800ae90 <HAL_TIM_Base_Init+0x200>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d018      	beq.n	800ae30 <HAL_TIM_Base_Init+0x1a0>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a24      	ldr	r2, [pc, #144]	@ (800ae94 <HAL_TIM_Base_Init+0x204>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d013      	beq.n	800ae30 <HAL_TIM_Base_Init+0x1a0>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a22      	ldr	r2, [pc, #136]	@ (800ae98 <HAL_TIM_Base_Init+0x208>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d00e      	beq.n	800ae30 <HAL_TIM_Base_Init+0x1a0>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a21      	ldr	r2, [pc, #132]	@ (800ae9c <HAL_TIM_Base_Init+0x20c>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d009      	beq.n	800ae30 <HAL_TIM_Base_Init+0x1a0>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a1f      	ldr	r2, [pc, #124]	@ (800aea0 <HAL_TIM_Base_Init+0x210>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d004      	beq.n	800ae30 <HAL_TIM_Base_Init+0x1a0>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a1e      	ldr	r2, [pc, #120]	@ (800aea4 <HAL_TIM_Base_Init+0x214>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d101      	bne.n	800ae34 <HAL_TIM_Base_Init+0x1a4>
 800ae30:	2301      	movs	r3, #1
 800ae32:	e000      	b.n	800ae36 <HAL_TIM_Base_Init+0x1a6>
 800ae34:	2300      	movs	r3, #0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d152      	bne.n	800aee0 <HAL_TIM_Base_Init+0x250>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d10f      	bne.n	800ae68 <HAL_TIM_Base_Init+0x1d8>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d006      	beq.n	800ae5e <HAL_TIM_Base_Init+0x1ce>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae58:	d201      	bcs.n	800ae5e <HAL_TIM_Base_Init+0x1ce>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e000      	b.n	800ae60 <HAL_TIM_Base_Init+0x1d0>
 800ae5e:	2300      	movs	r3, #0
 800ae60:	f003 0301 	and.w	r3, r3, #1
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	e042      	b.n	800aeee <HAL_TIM_Base_Init+0x25e>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d006      	beq.n	800ae7e <HAL_TIM_Base_Init+0x1ee>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	4a19      	ldr	r2, [pc, #100]	@ (800aedc <HAL_TIM_Base_Init+0x24c>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d801      	bhi.n	800ae7e <HAL_TIM_Base_Init+0x1ee>
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e000      	b.n	800ae80 <HAL_TIM_Base_Init+0x1f0>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	e032      	b.n	800aeee <HAL_TIM_Base_Init+0x25e>
 800ae88:	40012c00 	.word	0x40012c00
 800ae8c:	50012c00 	.word	0x50012c00
 800ae90:	40000400 	.word	0x40000400
 800ae94:	50000400 	.word	0x50000400
 800ae98:	40000800 	.word	0x40000800
 800ae9c:	50000800 	.word	0x50000800
 800aea0:	40000c00 	.word	0x40000c00
 800aea4:	50000c00 	.word	0x50000c00
 800aea8:	40001000 	.word	0x40001000
 800aeac:	50001000 	.word	0x50001000
 800aeb0:	40001400 	.word	0x40001400
 800aeb4:	50001400 	.word	0x50001400
 800aeb8:	40013400 	.word	0x40013400
 800aebc:	50013400 	.word	0x50013400
 800aec0:	40014000 	.word	0x40014000
 800aec4:	50014000 	.word	0x50014000
 800aec8:	40014400 	.word	0x40014400
 800aecc:	50014400 	.word	0x50014400
 800aed0:	40014800 	.word	0x40014800
 800aed4:	50014800 	.word	0x50014800
 800aed8:	08010110 	.word	0x08010110
 800aedc:	000fffef 	.word	0x000fffef
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	bf14      	ite	ne
 800aee8:	2301      	movne	r3, #1
 800aeea:	2300      	moveq	r3, #0
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d104      	bne.n	800aefc <HAL_TIM_Base_Init+0x26c>
 800aef2:	f240 1125 	movw	r1, #293	@ 0x125
 800aef6:	482f      	ldr	r0, [pc, #188]	@ (800afb4 <HAL_TIM_Base_Init+0x324>)
 800aef8:	f7f6 f87a 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d008      	beq.n	800af16 <HAL_TIM_Base_Init+0x286>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	699b      	ldr	r3, [r3, #24]
 800af08:	2b80      	cmp	r3, #128	@ 0x80
 800af0a:	d004      	beq.n	800af16 <HAL_TIM_Base_Init+0x286>
 800af0c:	f44f 7193 	mov.w	r1, #294	@ 0x126
 800af10:	4828      	ldr	r0, [pc, #160]	@ (800afb4 <HAL_TIM_Base_Init+0x324>)
 800af12:	f7f6 f86d 	bl	8000ff0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d106      	bne.n	800af30 <HAL_TIM_Base_Init+0x2a0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f7f6 fafa 	bl	8001524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2202      	movs	r2, #2
 800af34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	3304      	adds	r3, #4
 800af40:	4619      	mov	r1, r3
 800af42:	4610      	mov	r0, r2
 800af44:	f000 ff94 	bl	800be70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3708      	adds	r7, #8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	08010110 	.word	0x08010110

0800afb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a77      	ldr	r2, [pc, #476]	@ (800b1a4 <HAL_TIM_Base_Start_IT+0x1ec>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d06d      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a76      	ldr	r2, [pc, #472]	@ (800b1a8 <HAL_TIM_Base_Start_IT+0x1f0>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d068      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afdc:	d063      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800afe6:	d05e      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a6f      	ldr	r2, [pc, #444]	@ (800b1ac <HAL_TIM_Base_Start_IT+0x1f4>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d059      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a6e      	ldr	r2, [pc, #440]	@ (800b1b0 <HAL_TIM_Base_Start_IT+0x1f8>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d054      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a6c      	ldr	r2, [pc, #432]	@ (800b1b4 <HAL_TIM_Base_Start_IT+0x1fc>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d04f      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a6b      	ldr	r2, [pc, #428]	@ (800b1b8 <HAL_TIM_Base_Start_IT+0x200>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d04a      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a69      	ldr	r2, [pc, #420]	@ (800b1bc <HAL_TIM_Base_Start_IT+0x204>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d045      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a68      	ldr	r2, [pc, #416]	@ (800b1c0 <HAL_TIM_Base_Start_IT+0x208>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d040      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a66      	ldr	r2, [pc, #408]	@ (800b1c4 <HAL_TIM_Base_Start_IT+0x20c>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d03b      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a65      	ldr	r2, [pc, #404]	@ (800b1c8 <HAL_TIM_Base_Start_IT+0x210>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d036      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a63      	ldr	r2, [pc, #396]	@ (800b1cc <HAL_TIM_Base_Start_IT+0x214>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d031      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a62      	ldr	r2, [pc, #392]	@ (800b1d0 <HAL_TIM_Base_Start_IT+0x218>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d02c      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a60      	ldr	r2, [pc, #384]	@ (800b1d4 <HAL_TIM_Base_Start_IT+0x21c>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d027      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a5f      	ldr	r2, [pc, #380]	@ (800b1d8 <HAL_TIM_Base_Start_IT+0x220>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d022      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a5d      	ldr	r2, [pc, #372]	@ (800b1dc <HAL_TIM_Base_Start_IT+0x224>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d01d      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a5c      	ldr	r2, [pc, #368]	@ (800b1e0 <HAL_TIM_Base_Start_IT+0x228>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d018      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a5a      	ldr	r2, [pc, #360]	@ (800b1e4 <HAL_TIM_Base_Start_IT+0x22c>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d013      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a59      	ldr	r2, [pc, #356]	@ (800b1e8 <HAL_TIM_Base_Start_IT+0x230>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d00e      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a57      	ldr	r2, [pc, #348]	@ (800b1ec <HAL_TIM_Base_Start_IT+0x234>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d009      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a56      	ldr	r2, [pc, #344]	@ (800b1f0 <HAL_TIM_Base_Start_IT+0x238>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d004      	beq.n	800b0a6 <HAL_TIM_Base_Start_IT+0xee>
 800b09c:	f240 11df 	movw	r1, #479	@ 0x1df
 800b0a0:	4854      	ldr	r0, [pc, #336]	@ (800b1f4 <HAL_TIM_Base_Start_IT+0x23c>)
 800b0a2:	f7f5 ffa5 	bl	8000ff0 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d001      	beq.n	800b0b6 <HAL_TIM_Base_Start_IT+0xfe>
  {
    return HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e072      	b.n	800b19c <HAL_TIM_Base_Start_IT+0x1e4>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2202      	movs	r2, #2
 800b0ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68da      	ldr	r2, [r3, #12]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f042 0201 	orr.w	r2, r2, #1
 800b0cc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a34      	ldr	r2, [pc, #208]	@ (800b1a4 <HAL_TIM_Base_Start_IT+0x1ec>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d040      	beq.n	800b15a <HAL_TIM_Base_Start_IT+0x1a2>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a32      	ldr	r2, [pc, #200]	@ (800b1a8 <HAL_TIM_Base_Start_IT+0x1f0>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d03b      	beq.n	800b15a <HAL_TIM_Base_Start_IT+0x1a2>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0ea:	d036      	beq.n	800b15a <HAL_TIM_Base_Start_IT+0x1a2>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b0f4:	d031      	beq.n	800b15a <HAL_TIM_Base_Start_IT+0x1a2>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a2c      	ldr	r2, [pc, #176]	@ (800b1ac <HAL_TIM_Base_Start_IT+0x1f4>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d02c      	beq.n	800b15a <HAL_TIM_Base_Start_IT+0x1a2>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a2a      	ldr	r2, [pc, #168]	@ (800b1b0 <HAL_TIM_Base_Start_IT+0x1f8>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d027      	beq.n	800b15a <HAL_TIM_Base_Start_IT+0x1a2>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a29      	ldr	r2, [pc, #164]	@ (800b1b4 <HAL_TIM_Base_Start_IT+0x1fc>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d022      	beq.n	800b15a <HAL_TIM_Base_Start_IT+0x1a2>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a27      	ldr	r2, [pc, #156]	@ (800b1b8 <HAL_TIM_Base_Start_IT+0x200>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d01d      	beq.n	800b15a <HAL_TIM_Base_Start_IT+0x1a2>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a26      	ldr	r2, [pc, #152]	@ (800b1bc <HAL_TIM_Base_Start_IT+0x204>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d018      	beq.n	800b15a <HAL_TIM_Base_Start_IT+0x1a2>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a24      	ldr	r2, [pc, #144]	@ (800b1c0 <HAL_TIM_Base_Start_IT+0x208>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d013      	beq.n	800b15a <HAL_TIM_Base_Start_IT+0x1a2>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a27      	ldr	r2, [pc, #156]	@ (800b1d4 <HAL_TIM_Base_Start_IT+0x21c>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d00e      	beq.n	800b15a <HAL_TIM_Base_Start_IT+0x1a2>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a25      	ldr	r2, [pc, #148]	@ (800b1d8 <HAL_TIM_Base_Start_IT+0x220>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d009      	beq.n	800b15a <HAL_TIM_Base_Start_IT+0x1a2>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a24      	ldr	r2, [pc, #144]	@ (800b1dc <HAL_TIM_Base_Start_IT+0x224>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d004      	beq.n	800b15a <HAL_TIM_Base_Start_IT+0x1a2>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a22      	ldr	r2, [pc, #136]	@ (800b1e0 <HAL_TIM_Base_Start_IT+0x228>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d115      	bne.n	800b186 <HAL_TIM_Base_Start_IT+0x1ce>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	689a      	ldr	r2, [r3, #8]
 800b160:	4b25      	ldr	r3, [pc, #148]	@ (800b1f8 <HAL_TIM_Base_Start_IT+0x240>)
 800b162:	4013      	ands	r3, r2
 800b164:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2b06      	cmp	r3, #6
 800b16a:	d015      	beq.n	800b198 <HAL_TIM_Base_Start_IT+0x1e0>
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b172:	d011      	beq.n	800b198 <HAL_TIM_Base_Start_IT+0x1e0>
    {
      __HAL_TIM_ENABLE(htim);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f042 0201 	orr.w	r2, r2, #1
 800b182:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b184:	e008      	b.n	800b198 <HAL_TIM_Base_Start_IT+0x1e0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f042 0201 	orr.w	r2, r2, #1
 800b194:	601a      	str	r2, [r3, #0]
 800b196:	e000      	b.n	800b19a <HAL_TIM_Base_Start_IT+0x1e2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b198:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	40012c00 	.word	0x40012c00
 800b1a8:	50012c00 	.word	0x50012c00
 800b1ac:	40000400 	.word	0x40000400
 800b1b0:	50000400 	.word	0x50000400
 800b1b4:	40000800 	.word	0x40000800
 800b1b8:	50000800 	.word	0x50000800
 800b1bc:	40000c00 	.word	0x40000c00
 800b1c0:	50000c00 	.word	0x50000c00
 800b1c4:	40001000 	.word	0x40001000
 800b1c8:	50001000 	.word	0x50001000
 800b1cc:	40001400 	.word	0x40001400
 800b1d0:	50001400 	.word	0x50001400
 800b1d4:	40013400 	.word	0x40013400
 800b1d8:	50013400 	.word	0x50013400
 800b1dc:	40014000 	.word	0x40014000
 800b1e0:	50014000 	.word	0x50014000
 800b1e4:	40014400 	.word	0x40014400
 800b1e8:	50014400 	.word	0x50014400
 800b1ec:	40014800 	.word	0x40014800
 800b1f0:	50014800 	.word	0x50014800
 800b1f4:	08010110 	.word	0x08010110
 800b1f8:	00010007 	.word	0x00010007

0800b1fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d101      	bne.n	800b20e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	e183      	b.n	800b516 <HAL_TIM_PWM_Init+0x31a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a78      	ldr	r2, [pc, #480]	@ (800b3f4 <HAL_TIM_PWM_Init+0x1f8>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d06d      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a76      	ldr	r2, [pc, #472]	@ (800b3f8 <HAL_TIM_PWM_Init+0x1fc>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d068      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b22a:	d063      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b234:	d05e      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a70      	ldr	r2, [pc, #448]	@ (800b3fc <HAL_TIM_PWM_Init+0x200>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d059      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a6e      	ldr	r2, [pc, #440]	@ (800b400 <HAL_TIM_PWM_Init+0x204>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d054      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a6d      	ldr	r2, [pc, #436]	@ (800b404 <HAL_TIM_PWM_Init+0x208>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d04f      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a6b      	ldr	r2, [pc, #428]	@ (800b408 <HAL_TIM_PWM_Init+0x20c>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d04a      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a6a      	ldr	r2, [pc, #424]	@ (800b40c <HAL_TIM_PWM_Init+0x210>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d045      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a68      	ldr	r2, [pc, #416]	@ (800b410 <HAL_TIM_PWM_Init+0x214>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d040      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a67      	ldr	r2, [pc, #412]	@ (800b414 <HAL_TIM_PWM_Init+0x218>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d03b      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a65      	ldr	r2, [pc, #404]	@ (800b418 <HAL_TIM_PWM_Init+0x21c>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d036      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a64      	ldr	r2, [pc, #400]	@ (800b41c <HAL_TIM_PWM_Init+0x220>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d031      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a62      	ldr	r2, [pc, #392]	@ (800b420 <HAL_TIM_PWM_Init+0x224>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d02c      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a61      	ldr	r2, [pc, #388]	@ (800b424 <HAL_TIM_PWM_Init+0x228>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d027      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a5f      	ldr	r2, [pc, #380]	@ (800b428 <HAL_TIM_PWM_Init+0x22c>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d022      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4a5e      	ldr	r2, [pc, #376]	@ (800b42c <HAL_TIM_PWM_Init+0x230>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d01d      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a5c      	ldr	r2, [pc, #368]	@ (800b430 <HAL_TIM_PWM_Init+0x234>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d018      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a5b      	ldr	r2, [pc, #364]	@ (800b434 <HAL_TIM_PWM_Init+0x238>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d013      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a59      	ldr	r2, [pc, #356]	@ (800b438 <HAL_TIM_PWM_Init+0x23c>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d00e      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a58      	ldr	r2, [pc, #352]	@ (800b43c <HAL_TIM_PWM_Init+0x240>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d009      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a56      	ldr	r2, [pc, #344]	@ (800b440 <HAL_TIM_PWM_Init+0x244>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d004      	beq.n	800b2f4 <HAL_TIM_PWM_Init+0xf8>
 800b2ea:	f240 513f 	movw	r1, #1343	@ 0x53f
 800b2ee:	4855      	ldr	r0, [pc, #340]	@ (800b444 <HAL_TIM_PWM_Init+0x248>)
 800b2f0:	f7f5 fe7e 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d014      	beq.n	800b326 <HAL_TIM_PWM_Init+0x12a>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	2b10      	cmp	r3, #16
 800b302:	d010      	beq.n	800b326 <HAL_TIM_PWM_Init+0x12a>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	2b20      	cmp	r3, #32
 800b30a:	d00c      	beq.n	800b326 <HAL_TIM_PWM_Init+0x12a>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	2b40      	cmp	r3, #64	@ 0x40
 800b312:	d008      	beq.n	800b326 <HAL_TIM_PWM_Init+0x12a>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	2b60      	cmp	r3, #96	@ 0x60
 800b31a:	d004      	beq.n	800b326 <HAL_TIM_PWM_Init+0x12a>
 800b31c:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 800b320:	4848      	ldr	r0, [pc, #288]	@ (800b444 <HAL_TIM_PWM_Init+0x248>)
 800b322:	f7f5 fe65 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00e      	beq.n	800b34c <HAL_TIM_PWM_Init+0x150>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	691b      	ldr	r3, [r3, #16]
 800b332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b336:	d009      	beq.n	800b34c <HAL_TIM_PWM_Init+0x150>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	691b      	ldr	r3, [r3, #16]
 800b33c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b340:	d004      	beq.n	800b34c <HAL_TIM_PWM_Init+0x150>
 800b342:	f240 5141 	movw	r1, #1345	@ 0x541
 800b346:	483f      	ldr	r0, [pc, #252]	@ (800b444 <HAL_TIM_PWM_Init+0x248>)
 800b348:	f7f5 fe52 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b354:	d022      	beq.n	800b39c <HAL_TIM_PWM_Init+0x1a0>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b35e:	d01d      	beq.n	800b39c <HAL_TIM_PWM_Init+0x1a0>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a25      	ldr	r2, [pc, #148]	@ (800b3fc <HAL_TIM_PWM_Init+0x200>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d018      	beq.n	800b39c <HAL_TIM_PWM_Init+0x1a0>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a24      	ldr	r2, [pc, #144]	@ (800b400 <HAL_TIM_PWM_Init+0x204>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d013      	beq.n	800b39c <HAL_TIM_PWM_Init+0x1a0>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a22      	ldr	r2, [pc, #136]	@ (800b404 <HAL_TIM_PWM_Init+0x208>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d00e      	beq.n	800b39c <HAL_TIM_PWM_Init+0x1a0>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a21      	ldr	r2, [pc, #132]	@ (800b408 <HAL_TIM_PWM_Init+0x20c>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d009      	beq.n	800b39c <HAL_TIM_PWM_Init+0x1a0>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a1f      	ldr	r2, [pc, #124]	@ (800b40c <HAL_TIM_PWM_Init+0x210>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d004      	beq.n	800b39c <HAL_TIM_PWM_Init+0x1a0>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a1e      	ldr	r2, [pc, #120]	@ (800b410 <HAL_TIM_PWM_Init+0x214>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d101      	bne.n	800b3a0 <HAL_TIM_PWM_Init+0x1a4>
 800b39c:	2301      	movs	r3, #1
 800b39e:	e000      	b.n	800b3a2 <HAL_TIM_PWM_Init+0x1a6>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d152      	bne.n	800b44c <HAL_TIM_PWM_Init+0x250>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d10f      	bne.n	800b3d4 <HAL_TIM_PWM_Init+0x1d8>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d006      	beq.n	800b3ca <HAL_TIM_PWM_Init+0x1ce>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3c4:	d201      	bcs.n	800b3ca <HAL_TIM_PWM_Init+0x1ce>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e000      	b.n	800b3cc <HAL_TIM_PWM_Init+0x1d0>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	f003 0301 	and.w	r3, r3, #1
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	e042      	b.n	800b45a <HAL_TIM_PWM_Init+0x25e>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d006      	beq.n	800b3ea <HAL_TIM_PWM_Init+0x1ee>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	4a19      	ldr	r2, [pc, #100]	@ (800b448 <HAL_TIM_PWM_Init+0x24c>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d801      	bhi.n	800b3ea <HAL_TIM_PWM_Init+0x1ee>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e000      	b.n	800b3ec <HAL_TIM_PWM_Init+0x1f0>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	f003 0301 	and.w	r3, r3, #1
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	e032      	b.n	800b45a <HAL_TIM_PWM_Init+0x25e>
 800b3f4:	40012c00 	.word	0x40012c00
 800b3f8:	50012c00 	.word	0x50012c00
 800b3fc:	40000400 	.word	0x40000400
 800b400:	50000400 	.word	0x50000400
 800b404:	40000800 	.word	0x40000800
 800b408:	50000800 	.word	0x50000800
 800b40c:	40000c00 	.word	0x40000c00
 800b410:	50000c00 	.word	0x50000c00
 800b414:	40001000 	.word	0x40001000
 800b418:	50001000 	.word	0x50001000
 800b41c:	40001400 	.word	0x40001400
 800b420:	50001400 	.word	0x50001400
 800b424:	40013400 	.word	0x40013400
 800b428:	50013400 	.word	0x50013400
 800b42c:	40014000 	.word	0x40014000
 800b430:	50014000 	.word	0x50014000
 800b434:	40014400 	.word	0x40014400
 800b438:	50014400 	.word	0x50014400
 800b43c:	40014800 	.word	0x40014800
 800b440:	50014800 	.word	0x50014800
 800b444:	08010110 	.word	0x08010110
 800b448:	000fffef 	.word	0x000fffef
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	bf14      	ite	ne
 800b454:	2301      	movne	r3, #1
 800b456:	2300      	moveq	r3, #0
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d104      	bne.n	800b468 <HAL_TIM_PWM_Init+0x26c>
 800b45e:	f240 5142 	movw	r1, #1346	@ 0x542
 800b462:	482f      	ldr	r0, [pc, #188]	@ (800b520 <HAL_TIM_PWM_Init+0x324>)
 800b464:	f7f5 fdc4 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	699b      	ldr	r3, [r3, #24]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d008      	beq.n	800b482 <HAL_TIM_PWM_Init+0x286>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	699b      	ldr	r3, [r3, #24]
 800b474:	2b80      	cmp	r3, #128	@ 0x80
 800b476:	d004      	beq.n	800b482 <HAL_TIM_PWM_Init+0x286>
 800b478:	f240 5143 	movw	r1, #1347	@ 0x543
 800b47c:	4828      	ldr	r0, [pc, #160]	@ (800b520 <HAL_TIM_PWM_Init+0x324>)
 800b47e:	f7f5 fdb7 	bl	8000ff0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d106      	bne.n	800b49c <HAL_TIM_PWM_Init+0x2a0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f844 	bl	800b524 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2202      	movs	r2, #2
 800b4a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	3304      	adds	r3, #4
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	f000 fcde 	bl	800be70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2201      	movs	r2, #1
 800b510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	08010110 	.word	0x08010110

0800b524 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b52c:	bf00      	nop
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	f003 0302 	and.w	r3, r3, #2
 800b556:	2b00      	cmp	r3, #0
 800b558:	d020      	beq.n	800b59c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f003 0302 	and.w	r3, r3, #2
 800b560:	2b00      	cmp	r3, #0
 800b562:	d01b      	beq.n	800b59c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f06f 0202 	mvn.w	r2, #2
 800b56c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2201      	movs	r2, #1
 800b572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	699b      	ldr	r3, [r3, #24]
 800b57a:	f003 0303 	and.w	r3, r3, #3
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d003      	beq.n	800b58a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fc56 	bl	800be34 <HAL_TIM_IC_CaptureCallback>
 800b588:	e005      	b.n	800b596 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fc48 	bl	800be20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fc59 	bl	800be48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	f003 0304 	and.w	r3, r3, #4
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d020      	beq.n	800b5e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f003 0304 	and.w	r3, r3, #4
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d01b      	beq.n	800b5e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f06f 0204 	mvn.w	r2, #4
 800b5b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2202      	movs	r2, #2
 800b5be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	699b      	ldr	r3, [r3, #24]
 800b5c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d003      	beq.n	800b5d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 fc30 	bl	800be34 <HAL_TIM_IC_CaptureCallback>
 800b5d4:	e005      	b.n	800b5e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 fc22 	bl	800be20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 fc33 	bl	800be48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	f003 0308 	and.w	r3, r3, #8
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d020      	beq.n	800b634 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f003 0308 	and.w	r3, r3, #8
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d01b      	beq.n	800b634 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f06f 0208 	mvn.w	r2, #8
 800b604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2204      	movs	r2, #4
 800b60a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	69db      	ldr	r3, [r3, #28]
 800b612:	f003 0303 	and.w	r3, r3, #3
 800b616:	2b00      	cmp	r3, #0
 800b618:	d003      	beq.n	800b622 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fc0a 	bl	800be34 <HAL_TIM_IC_CaptureCallback>
 800b620:	e005      	b.n	800b62e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 fbfc 	bl	800be20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 fc0d 	bl	800be48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	f003 0310 	and.w	r3, r3, #16
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d020      	beq.n	800b680 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f003 0310 	and.w	r3, r3, #16
 800b644:	2b00      	cmp	r3, #0
 800b646:	d01b      	beq.n	800b680 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f06f 0210 	mvn.w	r2, #16
 800b650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2208      	movs	r2, #8
 800b656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	69db      	ldr	r3, [r3, #28]
 800b65e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b662:	2b00      	cmp	r3, #0
 800b664:	d003      	beq.n	800b66e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 fbe4 	bl	800be34 <HAL_TIM_IC_CaptureCallback>
 800b66c:	e005      	b.n	800b67a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fbd6 	bl	800be20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 fbe7 	bl	800be48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00c      	beq.n	800b6a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f003 0301 	and.w	r3, r3, #1
 800b690:	2b00      	cmp	r3, #0
 800b692:	d007      	beq.n	800b6a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f06f 0201 	mvn.w	r2, #1
 800b69c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7f5 fc8e 	bl	8000fc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d104      	bne.n	800b6b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00c      	beq.n	800b6d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d007      	beq.n	800b6d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f001 faed 	bl	800ccac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00c      	beq.n	800b6f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d007      	beq.n	800b6f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b6ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f001 fae5 	bl	800ccc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00c      	beq.n	800b71a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b706:	2b00      	cmp	r3, #0
 800b708:	d007      	beq.n	800b71a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 fba1 	bl	800be5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	f003 0320 	and.w	r3, r3, #32
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00c      	beq.n	800b73e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f003 0320 	and.w	r3, r3, #32
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d007      	beq.n	800b73e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f06f 0220 	mvn.w	r2, #32
 800b736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f001 faad 	bl	800cc98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b744:	2b00      	cmp	r3, #0
 800b746:	d00c      	beq.n	800b762 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d007      	beq.n	800b762 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b75a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f001 fab9 	bl	800ccd4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d00c      	beq.n	800b786 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b772:	2b00      	cmp	r3, #0
 800b774:	d007      	beq.n	800b786 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b77e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f001 fab1 	bl	800cce8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00c      	beq.n	800b7aa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b796:	2b00      	cmp	r3, #0
 800b798:	d007      	beq.n	800b7aa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b7a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f001 faa9 	bl	800ccfc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d00c      	beq.n	800b7ce <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d007      	beq.n	800b7ce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b7c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f001 faa1 	bl	800cd10 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b7ce:	bf00      	nop
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
	...

0800b7d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b086      	sub	sp, #24
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d016      	beq.n	800b81c <HAL_TIM_PWM_ConfigChannel+0x44>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2b04      	cmp	r3, #4
 800b7f2:	d013      	beq.n	800b81c <HAL_TIM_PWM_ConfigChannel+0x44>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b08      	cmp	r3, #8
 800b7f8:	d010      	beq.n	800b81c <HAL_TIM_PWM_ConfigChannel+0x44>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2b0c      	cmp	r3, #12
 800b7fe:	d00d      	beq.n	800b81c <HAL_TIM_PWM_ConfigChannel+0x44>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b10      	cmp	r3, #16
 800b804:	d00a      	beq.n	800b81c <HAL_TIM_PWM_ConfigChannel+0x44>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2b14      	cmp	r3, #20
 800b80a:	d007      	beq.n	800b81c <HAL_TIM_PWM_ConfigChannel+0x44>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b3c      	cmp	r3, #60	@ 0x3c
 800b810:	d004      	beq.n	800b81c <HAL_TIM_PWM_ConfigChannel+0x44>
 800b812:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 800b816:	487d      	ldr	r0, [pc, #500]	@ (800ba0c <HAL_TIM_PWM_ConfigChannel+0x234>)
 800b818:	f7f5 fbea 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2b60      	cmp	r3, #96	@ 0x60
 800b822:	d01c      	beq.n	800b85e <HAL_TIM_PWM_ConfigChannel+0x86>
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2b70      	cmp	r3, #112	@ 0x70
 800b82a:	d018      	beq.n	800b85e <HAL_TIM_PWM_ConfigChannel+0x86>
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a77      	ldr	r2, [pc, #476]	@ (800ba10 <HAL_TIM_PWM_ConfigChannel+0x238>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d013      	beq.n	800b85e <HAL_TIM_PWM_ConfigChannel+0x86>
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a76      	ldr	r2, [pc, #472]	@ (800ba14 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d00e      	beq.n	800b85e <HAL_TIM_PWM_ConfigChannel+0x86>
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a74      	ldr	r2, [pc, #464]	@ (800ba18 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d009      	beq.n	800b85e <HAL_TIM_PWM_ConfigChannel+0x86>
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a73      	ldr	r2, [pc, #460]	@ (800ba1c <HAL_TIM_PWM_ConfigChannel+0x244>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d004      	beq.n	800b85e <HAL_TIM_PWM_ConfigChannel+0x86>
 800b854:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 800b858:	486c      	ldr	r0, [pc, #432]	@ (800ba0c <HAL_TIM_PWM_ConfigChannel+0x234>)
 800b85a:	f7f5 fbc9 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d008      	beq.n	800b878 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	d004      	beq.n	800b878 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800b86e:	f241 01f5 	movw	r1, #4341	@ 0x10f5
 800b872:	4866      	ldr	r0, [pc, #408]	@ (800ba0c <HAL_TIM_PWM_ConfigChannel+0x234>)
 800b874:	f7f5 fbbc 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d008      	beq.n	800b892 <HAL_TIM_PWM_ConfigChannel+0xba>
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	2b04      	cmp	r3, #4
 800b886:	d004      	beq.n	800b892 <HAL_TIM_PWM_ConfigChannel+0xba>
 800b888:	f241 01f6 	movw	r1, #4342	@ 0x10f6
 800b88c:	485f      	ldr	r0, [pc, #380]	@ (800ba0c <HAL_TIM_PWM_ConfigChannel+0x234>)
 800b88e:	f7f5 fbaf 	bl	8000ff0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d101      	bne.n	800b8a0 <HAL_TIM_PWM_ConfigChannel+0xc8>
 800b89c:	2302      	movs	r3, #2
 800b89e:	e2a4      	b.n	800bdea <HAL_TIM_PWM_ConfigChannel+0x612>
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2b14      	cmp	r3, #20
 800b8ac:	f200 8295 	bhi.w	800bdda <HAL_TIM_PWM_ConfigChannel+0x602>
 800b8b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b8b8 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800b8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b6:	bf00      	nop
 800b8b8:	0800b90d 	.word	0x0800b90d
 800b8bc:	0800bddb 	.word	0x0800bddb
 800b8c0:	0800bddb 	.word	0x0800bddb
 800b8c4:	0800bddb 	.word	0x0800bddb
 800b8c8:	0800ba61 	.word	0x0800ba61
 800b8cc:	0800bddb 	.word	0x0800bddb
 800b8d0:	0800bddb 	.word	0x0800bddb
 800b8d4:	0800bddb 	.word	0x0800bddb
 800b8d8:	0800bb39 	.word	0x0800bb39
 800b8dc:	0800bddb 	.word	0x0800bddb
 800b8e0:	0800bddb 	.word	0x0800bddb
 800b8e4:	0800bddb 	.word	0x0800bddb
 800b8e8:	0800bc31 	.word	0x0800bc31
 800b8ec:	0800bddb 	.word	0x0800bddb
 800b8f0:	0800bddb 	.word	0x0800bddb
 800b8f4:	0800bddb 	.word	0x0800bddb
 800b8f8:	0800bcf5 	.word	0x0800bcf5
 800b8fc:	0800bddb 	.word	0x0800bddb
 800b900:	0800bddb 	.word	0x0800bddb
 800b904:	0800bddb 	.word	0x0800bddb
 800b908:	0800bd67 	.word	0x0800bd67
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a43      	ldr	r2, [pc, #268]	@ (800ba20 <HAL_TIM_PWM_ConfigChannel+0x248>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d059      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a42      	ldr	r2, [pc, #264]	@ (800ba24 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d054      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b928:	d04f      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b932:	d04a      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a3b      	ldr	r2, [pc, #236]	@ (800ba28 <HAL_TIM_PWM_ConfigChannel+0x250>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d045      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a3a      	ldr	r2, [pc, #232]	@ (800ba2c <HAL_TIM_PWM_ConfigChannel+0x254>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d040      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a38      	ldr	r2, [pc, #224]	@ (800ba30 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d03b      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a37      	ldr	r2, [pc, #220]	@ (800ba34 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d036      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a35      	ldr	r2, [pc, #212]	@ (800ba38 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d031      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4a34      	ldr	r2, [pc, #208]	@ (800ba3c <HAL_TIM_PWM_ConfigChannel+0x264>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d02c      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a32      	ldr	r2, [pc, #200]	@ (800ba40 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d027      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a31      	ldr	r2, [pc, #196]	@ (800ba44 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d022      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a2f      	ldr	r2, [pc, #188]	@ (800ba48 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d01d      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a2e      	ldr	r2, [pc, #184]	@ (800ba4c <HAL_TIM_PWM_ConfigChannel+0x274>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d018      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a2c      	ldr	r2, [pc, #176]	@ (800ba50 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d013      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a2b      	ldr	r2, [pc, #172]	@ (800ba54 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d00e      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a29      	ldr	r2, [pc, #164]	@ (800ba58 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d009      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a28      	ldr	r2, [pc, #160]	@ (800ba5c <HAL_TIM_PWM_ConfigChannel+0x284>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d004      	beq.n	800b9ca <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800b9c0:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 800b9c4:	4811      	ldr	r0, [pc, #68]	@ (800ba0c <HAL_TIM_PWM_ConfigChannel+0x234>)
 800b9c6:	f7f5 fb13 	bl	8000ff0 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68b9      	ldr	r1, [r7, #8]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f000 fb4d 	bl	800c070 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	699a      	ldr	r2, [r3, #24]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f042 0208 	orr.w	r2, r2, #8
 800b9e4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	699a      	ldr	r2, [r3, #24]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f022 0204 	bic.w	r2, r2, #4
 800b9f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	6999      	ldr	r1, [r3, #24]
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	691a      	ldr	r2, [r3, #16]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	430a      	orrs	r2, r1
 800ba06:	619a      	str	r2, [r3, #24]
      break;
 800ba08:	e1ea      	b.n	800bde0 <HAL_TIM_PWM_ConfigChannel+0x608>
 800ba0a:	bf00      	nop
 800ba0c:	08010110 	.word	0x08010110
 800ba10:	00010040 	.word	0x00010040
 800ba14:	00010050 	.word	0x00010050
 800ba18:	00010060 	.word	0x00010060
 800ba1c:	00010070 	.word	0x00010070
 800ba20:	40012c00 	.word	0x40012c00
 800ba24:	50012c00 	.word	0x50012c00
 800ba28:	40000400 	.word	0x40000400
 800ba2c:	50000400 	.word	0x50000400
 800ba30:	40000800 	.word	0x40000800
 800ba34:	50000800 	.word	0x50000800
 800ba38:	40000c00 	.word	0x40000c00
 800ba3c:	50000c00 	.word	0x50000c00
 800ba40:	40013400 	.word	0x40013400
 800ba44:	50013400 	.word	0x50013400
 800ba48:	40014000 	.word	0x40014000
 800ba4c:	50014000 	.word	0x50014000
 800ba50:	40014400 	.word	0x40014400
 800ba54:	50014400 	.word	0x50014400
 800ba58:	40014800 	.word	0x40014800
 800ba5c:	50014800 	.word	0x50014800
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a65      	ldr	r2, [pc, #404]	@ (800bbfc <HAL_TIM_PWM_ConfigChannel+0x424>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d045      	beq.n	800baf6 <HAL_TIM_PWM_ConfigChannel+0x31e>
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a64      	ldr	r2, [pc, #400]	@ (800bc00 <HAL_TIM_PWM_ConfigChannel+0x428>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d040      	beq.n	800baf6 <HAL_TIM_PWM_ConfigChannel+0x31e>
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba7c:	d03b      	beq.n	800baf6 <HAL_TIM_PWM_ConfigChannel+0x31e>
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ba86:	d036      	beq.n	800baf6 <HAL_TIM_PWM_ConfigChannel+0x31e>
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a5d      	ldr	r2, [pc, #372]	@ (800bc04 <HAL_TIM_PWM_ConfigChannel+0x42c>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d031      	beq.n	800baf6 <HAL_TIM_PWM_ConfigChannel+0x31e>
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a5c      	ldr	r2, [pc, #368]	@ (800bc08 <HAL_TIM_PWM_ConfigChannel+0x430>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d02c      	beq.n	800baf6 <HAL_TIM_PWM_ConfigChannel+0x31e>
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a5a      	ldr	r2, [pc, #360]	@ (800bc0c <HAL_TIM_PWM_ConfigChannel+0x434>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d027      	beq.n	800baf6 <HAL_TIM_PWM_ConfigChannel+0x31e>
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a59      	ldr	r2, [pc, #356]	@ (800bc10 <HAL_TIM_PWM_ConfigChannel+0x438>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d022      	beq.n	800baf6 <HAL_TIM_PWM_ConfigChannel+0x31e>
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a57      	ldr	r2, [pc, #348]	@ (800bc14 <HAL_TIM_PWM_ConfigChannel+0x43c>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d01d      	beq.n	800baf6 <HAL_TIM_PWM_ConfigChannel+0x31e>
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a56      	ldr	r2, [pc, #344]	@ (800bc18 <HAL_TIM_PWM_ConfigChannel+0x440>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d018      	beq.n	800baf6 <HAL_TIM_PWM_ConfigChannel+0x31e>
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a54      	ldr	r2, [pc, #336]	@ (800bc1c <HAL_TIM_PWM_ConfigChannel+0x444>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d013      	beq.n	800baf6 <HAL_TIM_PWM_ConfigChannel+0x31e>
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a53      	ldr	r2, [pc, #332]	@ (800bc20 <HAL_TIM_PWM_ConfigChannel+0x448>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d00e      	beq.n	800baf6 <HAL_TIM_PWM_ConfigChannel+0x31e>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a51      	ldr	r2, [pc, #324]	@ (800bc24 <HAL_TIM_PWM_ConfigChannel+0x44c>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d009      	beq.n	800baf6 <HAL_TIM_PWM_ConfigChannel+0x31e>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a50      	ldr	r2, [pc, #320]	@ (800bc28 <HAL_TIM_PWM_ConfigChannel+0x450>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d004      	beq.n	800baf6 <HAL_TIM_PWM_ConfigChannel+0x31e>
 800baec:	f241 1111 	movw	r1, #4369	@ 0x1111
 800baf0:	484e      	ldr	r0, [pc, #312]	@ (800bc2c <HAL_TIM_PWM_ConfigChannel+0x454>)
 800baf2:	f7f5 fa7d 	bl	8000ff0 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68b9      	ldr	r1, [r7, #8]
 800bafc:	4618      	mov	r0, r3
 800bafe:	f000 fba3 	bl	800c248 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	699a      	ldr	r2, [r3, #24]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bb10:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	699a      	ldr	r2, [r3, #24]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb20:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	6999      	ldr	r1, [r3, #24]
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	021a      	lsls	r2, r3, #8
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	430a      	orrs	r2, r1
 800bb34:	619a      	str	r2, [r3, #24]
      break;
 800bb36:	e153      	b.n	800bde0 <HAL_TIM_PWM_ConfigChannel+0x608>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a2f      	ldr	r2, [pc, #188]	@ (800bbfc <HAL_TIM_PWM_ConfigChannel+0x424>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d03b      	beq.n	800bbba <HAL_TIM_PWM_ConfigChannel+0x3e2>
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a2e      	ldr	r2, [pc, #184]	@ (800bc00 <HAL_TIM_PWM_ConfigChannel+0x428>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d036      	beq.n	800bbba <HAL_TIM_PWM_ConfigChannel+0x3e2>
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb54:	d031      	beq.n	800bbba <HAL_TIM_PWM_ConfigChannel+0x3e2>
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb5e:	d02c      	beq.n	800bbba <HAL_TIM_PWM_ConfigChannel+0x3e2>
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a27      	ldr	r2, [pc, #156]	@ (800bc04 <HAL_TIM_PWM_ConfigChannel+0x42c>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d027      	beq.n	800bbba <HAL_TIM_PWM_ConfigChannel+0x3e2>
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a26      	ldr	r2, [pc, #152]	@ (800bc08 <HAL_TIM_PWM_ConfigChannel+0x430>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d022      	beq.n	800bbba <HAL_TIM_PWM_ConfigChannel+0x3e2>
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a24      	ldr	r2, [pc, #144]	@ (800bc0c <HAL_TIM_PWM_ConfigChannel+0x434>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d01d      	beq.n	800bbba <HAL_TIM_PWM_ConfigChannel+0x3e2>
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a23      	ldr	r2, [pc, #140]	@ (800bc10 <HAL_TIM_PWM_ConfigChannel+0x438>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d018      	beq.n	800bbba <HAL_TIM_PWM_ConfigChannel+0x3e2>
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a21      	ldr	r2, [pc, #132]	@ (800bc14 <HAL_TIM_PWM_ConfigChannel+0x43c>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d013      	beq.n	800bbba <HAL_TIM_PWM_ConfigChannel+0x3e2>
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a20      	ldr	r2, [pc, #128]	@ (800bc18 <HAL_TIM_PWM_ConfigChannel+0x440>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d00e      	beq.n	800bbba <HAL_TIM_PWM_ConfigChannel+0x3e2>
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a1e      	ldr	r2, [pc, #120]	@ (800bc1c <HAL_TIM_PWM_ConfigChannel+0x444>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d009      	beq.n	800bbba <HAL_TIM_PWM_ConfigChannel+0x3e2>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a1d      	ldr	r2, [pc, #116]	@ (800bc20 <HAL_TIM_PWM_ConfigChannel+0x448>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d004      	beq.n	800bbba <HAL_TIM_PWM_ConfigChannel+0x3e2>
 800bbb0:	f241 1122 	movw	r1, #4386	@ 0x1122
 800bbb4:	481d      	ldr	r0, [pc, #116]	@ (800bc2c <HAL_TIM_PWM_ConfigChannel+0x454>)
 800bbb6:	f7f5 fa1b 	bl	8000ff0 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	68b9      	ldr	r1, [r7, #8]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f000 fc19 	bl	800c3f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	69da      	ldr	r2, [r3, #28]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f042 0208 	orr.w	r2, r2, #8
 800bbd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	69da      	ldr	r2, [r3, #28]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f022 0204 	bic.w	r2, r2, #4
 800bbe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	69d9      	ldr	r1, [r3, #28]
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	691a      	ldr	r2, [r3, #16]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	430a      	orrs	r2, r1
 800bbf6:	61da      	str	r2, [r3, #28]
      break;
 800bbf8:	e0f2      	b.n	800bde0 <HAL_TIM_PWM_ConfigChannel+0x608>
 800bbfa:	bf00      	nop
 800bbfc:	40012c00 	.word	0x40012c00
 800bc00:	50012c00 	.word	0x50012c00
 800bc04:	40000400 	.word	0x40000400
 800bc08:	50000400 	.word	0x50000400
 800bc0c:	40000800 	.word	0x40000800
 800bc10:	50000800 	.word	0x50000800
 800bc14:	40000c00 	.word	0x40000c00
 800bc18:	50000c00 	.word	0x50000c00
 800bc1c:	40013400 	.word	0x40013400
 800bc20:	50013400 	.word	0x50013400
 800bc24:	40014000 	.word	0x40014000
 800bc28:	50014000 	.word	0x50014000
 800bc2c:	08010110 	.word	0x08010110
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a6f      	ldr	r2, [pc, #444]	@ (800bdf4 <HAL_TIM_PWM_ConfigChannel+0x61c>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d03b      	beq.n	800bcb2 <HAL_TIM_PWM_ConfigChannel+0x4da>
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4a6e      	ldr	r2, [pc, #440]	@ (800bdf8 <HAL_TIM_PWM_ConfigChannel+0x620>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d036      	beq.n	800bcb2 <HAL_TIM_PWM_ConfigChannel+0x4da>
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc4c:	d031      	beq.n	800bcb2 <HAL_TIM_PWM_ConfigChannel+0x4da>
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc56:	d02c      	beq.n	800bcb2 <HAL_TIM_PWM_ConfigChannel+0x4da>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a67      	ldr	r2, [pc, #412]	@ (800bdfc <HAL_TIM_PWM_ConfigChannel+0x624>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d027      	beq.n	800bcb2 <HAL_TIM_PWM_ConfigChannel+0x4da>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4a66      	ldr	r2, [pc, #408]	@ (800be00 <HAL_TIM_PWM_ConfigChannel+0x628>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d022      	beq.n	800bcb2 <HAL_TIM_PWM_ConfigChannel+0x4da>
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a64      	ldr	r2, [pc, #400]	@ (800be04 <HAL_TIM_PWM_ConfigChannel+0x62c>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d01d      	beq.n	800bcb2 <HAL_TIM_PWM_ConfigChannel+0x4da>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a63      	ldr	r2, [pc, #396]	@ (800be08 <HAL_TIM_PWM_ConfigChannel+0x630>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d018      	beq.n	800bcb2 <HAL_TIM_PWM_ConfigChannel+0x4da>
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a61      	ldr	r2, [pc, #388]	@ (800be0c <HAL_TIM_PWM_ConfigChannel+0x634>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d013      	beq.n	800bcb2 <HAL_TIM_PWM_ConfigChannel+0x4da>
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a60      	ldr	r2, [pc, #384]	@ (800be10 <HAL_TIM_PWM_ConfigChannel+0x638>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d00e      	beq.n	800bcb2 <HAL_TIM_PWM_ConfigChannel+0x4da>
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a5e      	ldr	r2, [pc, #376]	@ (800be14 <HAL_TIM_PWM_ConfigChannel+0x63c>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d009      	beq.n	800bcb2 <HAL_TIM_PWM_ConfigChannel+0x4da>
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a5d      	ldr	r2, [pc, #372]	@ (800be18 <HAL_TIM_PWM_ConfigChannel+0x640>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d004      	beq.n	800bcb2 <HAL_TIM_PWM_ConfigChannel+0x4da>
 800bca8:	f241 1133 	movw	r1, #4403	@ 0x1133
 800bcac:	485b      	ldr	r0, [pc, #364]	@ (800be1c <HAL_TIM_PWM_ConfigChannel+0x644>)
 800bcae:	f7f5 f99f 	bl	8000ff0 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	68b9      	ldr	r1, [r7, #8]
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f000 fc75 	bl	800c5a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	69da      	ldr	r2, [r3, #28]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	69da      	ldr	r2, [r3, #28]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bcdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	69d9      	ldr	r1, [r3, #28]
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	691b      	ldr	r3, [r3, #16]
 800bce8:	021a      	lsls	r2, r3, #8
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	430a      	orrs	r2, r1
 800bcf0:	61da      	str	r2, [r3, #28]
      break;
 800bcf2:	e075      	b.n	800bde0 <HAL_TIM_PWM_ConfigChannel+0x608>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a3e      	ldr	r2, [pc, #248]	@ (800bdf4 <HAL_TIM_PWM_ConfigChannel+0x61c>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d013      	beq.n	800bd26 <HAL_TIM_PWM_ConfigChannel+0x54e>
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a3d      	ldr	r2, [pc, #244]	@ (800bdf8 <HAL_TIM_PWM_ConfigChannel+0x620>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d00e      	beq.n	800bd26 <HAL_TIM_PWM_ConfigChannel+0x54e>
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a41      	ldr	r2, [pc, #260]	@ (800be14 <HAL_TIM_PWM_ConfigChannel+0x63c>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d009      	beq.n	800bd26 <HAL_TIM_PWM_ConfigChannel+0x54e>
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a40      	ldr	r2, [pc, #256]	@ (800be18 <HAL_TIM_PWM_ConfigChannel+0x640>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d004      	beq.n	800bd26 <HAL_TIM_PWM_ConfigChannel+0x54e>
 800bd1c:	f241 1144 	movw	r1, #4420	@ 0x1144
 800bd20:	483e      	ldr	r0, [pc, #248]	@ (800be1c <HAL_TIM_PWM_ConfigChannel+0x644>)
 800bd22:	f7f5 f965 	bl	8000ff0 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	68b9      	ldr	r1, [r7, #8]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f000 fd13 	bl	800c758 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f042 0208 	orr.w	r2, r2, #8
 800bd40:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f022 0204 	bic.w	r2, r2, #4
 800bd50:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	691a      	ldr	r2, [r3, #16]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	430a      	orrs	r2, r1
 800bd62:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800bd64:	e03c      	b.n	800bde0 <HAL_TIM_PWM_ConfigChannel+0x608>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a22      	ldr	r2, [pc, #136]	@ (800bdf4 <HAL_TIM_PWM_ConfigChannel+0x61c>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d013      	beq.n	800bd98 <HAL_TIM_PWM_ConfigChannel+0x5c0>
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a20      	ldr	r2, [pc, #128]	@ (800bdf8 <HAL_TIM_PWM_ConfigChannel+0x620>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d00e      	beq.n	800bd98 <HAL_TIM_PWM_ConfigChannel+0x5c0>
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a25      	ldr	r2, [pc, #148]	@ (800be14 <HAL_TIM_PWM_ConfigChannel+0x63c>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d009      	beq.n	800bd98 <HAL_TIM_PWM_ConfigChannel+0x5c0>
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a23      	ldr	r2, [pc, #140]	@ (800be18 <HAL_TIM_PWM_ConfigChannel+0x640>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d004      	beq.n	800bd98 <HAL_TIM_PWM_ConfigChannel+0x5c0>
 800bd8e:	f241 1155 	movw	r1, #4437	@ 0x1155
 800bd92:	4822      	ldr	r0, [pc, #136]	@ (800be1c <HAL_TIM_PWM_ConfigChannel+0x644>)
 800bd94:	f7f5 f92c 	bl	8000ff0 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	68b9      	ldr	r1, [r7, #8]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f000 fd5c 	bl	800c85c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bdb2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bdc2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	691b      	ldr	r3, [r3, #16]
 800bdce:	021a      	lsls	r2, r3, #8
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	430a      	orrs	r2, r1
 800bdd6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800bdd8:	e002      	b.n	800bde0 <HAL_TIM_PWM_ConfigChannel+0x608>
    }

    default:
      status = HAL_ERROR;
 800bdda:	2301      	movs	r3, #1
 800bddc:	75fb      	strb	r3, [r7, #23]
      break;
 800bdde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bde8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3718      	adds	r7, #24
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	40012c00 	.word	0x40012c00
 800bdf8:	50012c00 	.word	0x50012c00
 800bdfc:	40000400 	.word	0x40000400
 800be00:	50000400 	.word	0x50000400
 800be04:	40000800 	.word	0x40000800
 800be08:	50000800 	.word	0x50000800
 800be0c:	40000c00 	.word	0x40000c00
 800be10:	50000c00 	.word	0x50000c00
 800be14:	40013400 	.word	0x40013400
 800be18:	50013400 	.word	0x50013400
 800be1c:	08010110 	.word	0x08010110

0800be20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be28:	bf00      	nop
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be3c:	bf00      	nop
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be50:	bf00      	nop
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be64:	bf00      	nop
 800be66:	370c      	adds	r7, #12
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800be70:	b480      	push	{r7}
 800be72:	b085      	sub	sp, #20
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4a6b      	ldr	r2, [pc, #428]	@ (800c030 <TIM_Base_SetConfig+0x1c0>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d02b      	beq.n	800bee0 <TIM_Base_SetConfig+0x70>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4a6a      	ldr	r2, [pc, #424]	@ (800c034 <TIM_Base_SetConfig+0x1c4>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d027      	beq.n	800bee0 <TIM_Base_SetConfig+0x70>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be96:	d023      	beq.n	800bee0 <TIM_Base_SetConfig+0x70>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be9e:	d01f      	beq.n	800bee0 <TIM_Base_SetConfig+0x70>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4a65      	ldr	r2, [pc, #404]	@ (800c038 <TIM_Base_SetConfig+0x1c8>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d01b      	beq.n	800bee0 <TIM_Base_SetConfig+0x70>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	4a64      	ldr	r2, [pc, #400]	@ (800c03c <TIM_Base_SetConfig+0x1cc>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d017      	beq.n	800bee0 <TIM_Base_SetConfig+0x70>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	4a63      	ldr	r2, [pc, #396]	@ (800c040 <TIM_Base_SetConfig+0x1d0>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d013      	beq.n	800bee0 <TIM_Base_SetConfig+0x70>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a62      	ldr	r2, [pc, #392]	@ (800c044 <TIM_Base_SetConfig+0x1d4>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d00f      	beq.n	800bee0 <TIM_Base_SetConfig+0x70>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a61      	ldr	r2, [pc, #388]	@ (800c048 <TIM_Base_SetConfig+0x1d8>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d00b      	beq.n	800bee0 <TIM_Base_SetConfig+0x70>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4a60      	ldr	r2, [pc, #384]	@ (800c04c <TIM_Base_SetConfig+0x1dc>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d007      	beq.n	800bee0 <TIM_Base_SetConfig+0x70>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4a5f      	ldr	r2, [pc, #380]	@ (800c050 <TIM_Base_SetConfig+0x1e0>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d003      	beq.n	800bee0 <TIM_Base_SetConfig+0x70>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4a5e      	ldr	r2, [pc, #376]	@ (800c054 <TIM_Base_SetConfig+0x1e4>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d108      	bne.n	800bef2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	4313      	orrs	r3, r2
 800bef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	4a4e      	ldr	r2, [pc, #312]	@ (800c030 <TIM_Base_SetConfig+0x1c0>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d043      	beq.n	800bf82 <TIM_Base_SetConfig+0x112>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a4d      	ldr	r2, [pc, #308]	@ (800c034 <TIM_Base_SetConfig+0x1c4>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d03f      	beq.n	800bf82 <TIM_Base_SetConfig+0x112>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf08:	d03b      	beq.n	800bf82 <TIM_Base_SetConfig+0x112>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf10:	d037      	beq.n	800bf82 <TIM_Base_SetConfig+0x112>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4a48      	ldr	r2, [pc, #288]	@ (800c038 <TIM_Base_SetConfig+0x1c8>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d033      	beq.n	800bf82 <TIM_Base_SetConfig+0x112>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	4a47      	ldr	r2, [pc, #284]	@ (800c03c <TIM_Base_SetConfig+0x1cc>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d02f      	beq.n	800bf82 <TIM_Base_SetConfig+0x112>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4a46      	ldr	r2, [pc, #280]	@ (800c040 <TIM_Base_SetConfig+0x1d0>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d02b      	beq.n	800bf82 <TIM_Base_SetConfig+0x112>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4a45      	ldr	r2, [pc, #276]	@ (800c044 <TIM_Base_SetConfig+0x1d4>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d027      	beq.n	800bf82 <TIM_Base_SetConfig+0x112>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4a44      	ldr	r2, [pc, #272]	@ (800c048 <TIM_Base_SetConfig+0x1d8>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d023      	beq.n	800bf82 <TIM_Base_SetConfig+0x112>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4a43      	ldr	r2, [pc, #268]	@ (800c04c <TIM_Base_SetConfig+0x1dc>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d01f      	beq.n	800bf82 <TIM_Base_SetConfig+0x112>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	4a42      	ldr	r2, [pc, #264]	@ (800c050 <TIM_Base_SetConfig+0x1e0>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d01b      	beq.n	800bf82 <TIM_Base_SetConfig+0x112>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	4a41      	ldr	r2, [pc, #260]	@ (800c054 <TIM_Base_SetConfig+0x1e4>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d017      	beq.n	800bf82 <TIM_Base_SetConfig+0x112>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	4a40      	ldr	r2, [pc, #256]	@ (800c058 <TIM_Base_SetConfig+0x1e8>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d013      	beq.n	800bf82 <TIM_Base_SetConfig+0x112>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4a3f      	ldr	r2, [pc, #252]	@ (800c05c <TIM_Base_SetConfig+0x1ec>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d00f      	beq.n	800bf82 <TIM_Base_SetConfig+0x112>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	4a3e      	ldr	r2, [pc, #248]	@ (800c060 <TIM_Base_SetConfig+0x1f0>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d00b      	beq.n	800bf82 <TIM_Base_SetConfig+0x112>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4a3d      	ldr	r2, [pc, #244]	@ (800c064 <TIM_Base_SetConfig+0x1f4>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d007      	beq.n	800bf82 <TIM_Base_SetConfig+0x112>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4a3c      	ldr	r2, [pc, #240]	@ (800c068 <TIM_Base_SetConfig+0x1f8>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d003      	beq.n	800bf82 <TIM_Base_SetConfig+0x112>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4a3b      	ldr	r2, [pc, #236]	@ (800c06c <TIM_Base_SetConfig+0x1fc>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d108      	bne.n	800bf94 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	4313      	orrs	r3, r2
 800bf92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	695b      	ldr	r3, [r3, #20]
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	689a      	ldr	r2, [r3, #8]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4a1e      	ldr	r2, [pc, #120]	@ (800c030 <TIM_Base_SetConfig+0x1c0>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d023      	beq.n	800c002 <TIM_Base_SetConfig+0x192>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	4a1d      	ldr	r2, [pc, #116]	@ (800c034 <TIM_Base_SetConfig+0x1c4>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d01f      	beq.n	800c002 <TIM_Base_SetConfig+0x192>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	4a22      	ldr	r2, [pc, #136]	@ (800c050 <TIM_Base_SetConfig+0x1e0>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d01b      	beq.n	800c002 <TIM_Base_SetConfig+0x192>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4a21      	ldr	r2, [pc, #132]	@ (800c054 <TIM_Base_SetConfig+0x1e4>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d017      	beq.n	800c002 <TIM_Base_SetConfig+0x192>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	4a20      	ldr	r2, [pc, #128]	@ (800c058 <TIM_Base_SetConfig+0x1e8>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d013      	beq.n	800c002 <TIM_Base_SetConfig+0x192>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4a1f      	ldr	r2, [pc, #124]	@ (800c05c <TIM_Base_SetConfig+0x1ec>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d00f      	beq.n	800c002 <TIM_Base_SetConfig+0x192>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	4a1e      	ldr	r2, [pc, #120]	@ (800c060 <TIM_Base_SetConfig+0x1f0>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d00b      	beq.n	800c002 <TIM_Base_SetConfig+0x192>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4a1d      	ldr	r2, [pc, #116]	@ (800c064 <TIM_Base_SetConfig+0x1f4>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d007      	beq.n	800c002 <TIM_Base_SetConfig+0x192>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4a1c      	ldr	r2, [pc, #112]	@ (800c068 <TIM_Base_SetConfig+0x1f8>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d003      	beq.n	800c002 <TIM_Base_SetConfig+0x192>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4a1b      	ldr	r2, [pc, #108]	@ (800c06c <TIM_Base_SetConfig+0x1fc>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d103      	bne.n	800c00a <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	691a      	ldr	r2, [r3, #16]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f043 0204 	orr.w	r2, r3, #4
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2201      	movs	r2, #1
 800c01a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	601a      	str	r2, [r3, #0]
}
 800c022:	bf00      	nop
 800c024:	3714      	adds	r7, #20
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	40012c00 	.word	0x40012c00
 800c034:	50012c00 	.word	0x50012c00
 800c038:	40000400 	.word	0x40000400
 800c03c:	50000400 	.word	0x50000400
 800c040:	40000800 	.word	0x40000800
 800c044:	50000800 	.word	0x50000800
 800c048:	40000c00 	.word	0x40000c00
 800c04c:	50000c00 	.word	0x50000c00
 800c050:	40013400 	.word	0x40013400
 800c054:	50013400 	.word	0x50013400
 800c058:	40014000 	.word	0x40014000
 800c05c:	50014000 	.word	0x50014000
 800c060:	40014400 	.word	0x40014400
 800c064:	50014400 	.word	0x50014400
 800c068:	40014800 	.word	0x40014800
 800c06c:	50014800 	.word	0x50014800

0800c070 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b086      	sub	sp, #24
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6a1b      	ldr	r3, [r3, #32]
 800c084:	f023 0201 	bic.w	r2, r3, #1
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	699b      	ldr	r3, [r3, #24]
 800c096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c09e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f023 0303 	bic.w	r3, r3, #3
 800c0aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	f023 0302 	bic.w	r3, r3, #2
 800c0bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	697a      	ldr	r2, [r7, #20]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4a54      	ldr	r2, [pc, #336]	@ (800c21c <TIM_OC1_SetConfig+0x1ac>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d023      	beq.n	800c118 <TIM_OC1_SetConfig+0xa8>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4a53      	ldr	r2, [pc, #332]	@ (800c220 <TIM_OC1_SetConfig+0x1b0>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d01f      	beq.n	800c118 <TIM_OC1_SetConfig+0xa8>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	4a52      	ldr	r2, [pc, #328]	@ (800c224 <TIM_OC1_SetConfig+0x1b4>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d01b      	beq.n	800c118 <TIM_OC1_SetConfig+0xa8>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4a51      	ldr	r2, [pc, #324]	@ (800c228 <TIM_OC1_SetConfig+0x1b8>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d017      	beq.n	800c118 <TIM_OC1_SetConfig+0xa8>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a50      	ldr	r2, [pc, #320]	@ (800c22c <TIM_OC1_SetConfig+0x1bc>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d013      	beq.n	800c118 <TIM_OC1_SetConfig+0xa8>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a4f      	ldr	r2, [pc, #316]	@ (800c230 <TIM_OC1_SetConfig+0x1c0>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d00f      	beq.n	800c118 <TIM_OC1_SetConfig+0xa8>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a4e      	ldr	r2, [pc, #312]	@ (800c234 <TIM_OC1_SetConfig+0x1c4>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d00b      	beq.n	800c118 <TIM_OC1_SetConfig+0xa8>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4a4d      	ldr	r2, [pc, #308]	@ (800c238 <TIM_OC1_SetConfig+0x1c8>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d007      	beq.n	800c118 <TIM_OC1_SetConfig+0xa8>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4a4c      	ldr	r2, [pc, #304]	@ (800c23c <TIM_OC1_SetConfig+0x1cc>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d003      	beq.n	800c118 <TIM_OC1_SetConfig+0xa8>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4a4b      	ldr	r2, [pc, #300]	@ (800c240 <TIM_OC1_SetConfig+0x1d0>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d119      	bne.n	800c14c <TIM_OC1_SetConfig+0xdc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d008      	beq.n	800c132 <TIM_OC1_SetConfig+0xc2>
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	2b08      	cmp	r3, #8
 800c126:	d004      	beq.n	800c132 <TIM_OC1_SetConfig+0xc2>
 800c128:	f641 41b0 	movw	r1, #7344	@ 0x1cb0
 800c12c:	4845      	ldr	r0, [pc, #276]	@ (800c244 <TIM_OC1_SetConfig+0x1d4>)
 800c12e:	f7f4 ff5f 	bl	8000ff0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	f023 0308 	bic.w	r3, r3, #8
 800c138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	697a      	ldr	r2, [r7, #20]
 800c140:	4313      	orrs	r3, r2
 800c142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	f023 0304 	bic.w	r3, r3, #4
 800c14a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4a33      	ldr	r2, [pc, #204]	@ (800c21c <TIM_OC1_SetConfig+0x1ac>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d023      	beq.n	800c19c <TIM_OC1_SetConfig+0x12c>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	4a32      	ldr	r2, [pc, #200]	@ (800c220 <TIM_OC1_SetConfig+0x1b0>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d01f      	beq.n	800c19c <TIM_OC1_SetConfig+0x12c>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4a31      	ldr	r2, [pc, #196]	@ (800c224 <TIM_OC1_SetConfig+0x1b4>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d01b      	beq.n	800c19c <TIM_OC1_SetConfig+0x12c>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	4a30      	ldr	r2, [pc, #192]	@ (800c228 <TIM_OC1_SetConfig+0x1b8>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d017      	beq.n	800c19c <TIM_OC1_SetConfig+0x12c>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4a2f      	ldr	r2, [pc, #188]	@ (800c22c <TIM_OC1_SetConfig+0x1bc>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d013      	beq.n	800c19c <TIM_OC1_SetConfig+0x12c>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	4a2e      	ldr	r2, [pc, #184]	@ (800c230 <TIM_OC1_SetConfig+0x1c0>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d00f      	beq.n	800c19c <TIM_OC1_SetConfig+0x12c>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	4a2d      	ldr	r2, [pc, #180]	@ (800c234 <TIM_OC1_SetConfig+0x1c4>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d00b      	beq.n	800c19c <TIM_OC1_SetConfig+0x12c>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4a2c      	ldr	r2, [pc, #176]	@ (800c238 <TIM_OC1_SetConfig+0x1c8>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d007      	beq.n	800c19c <TIM_OC1_SetConfig+0x12c>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	4a2b      	ldr	r2, [pc, #172]	@ (800c23c <TIM_OC1_SetConfig+0x1cc>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d003      	beq.n	800c19c <TIM_OC1_SetConfig+0x12c>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	4a2a      	ldr	r2, [pc, #168]	@ (800c240 <TIM_OC1_SetConfig+0x1d0>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d12d      	bne.n	800c1f8 <TIM_OC1_SetConfig+0x188>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	699b      	ldr	r3, [r3, #24]
 800c1a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1a4:	d008      	beq.n	800c1b8 <TIM_OC1_SetConfig+0x148>
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	699b      	ldr	r3, [r3, #24]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d004      	beq.n	800c1b8 <TIM_OC1_SetConfig+0x148>
 800c1ae:	f641 41bd 	movw	r1, #7357	@ 0x1cbd
 800c1b2:	4824      	ldr	r0, [pc, #144]	@ (800c244 <TIM_OC1_SetConfig+0x1d4>)
 800c1b4:	f7f4 ff1c 	bl	8000ff0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	695b      	ldr	r3, [r3, #20]
 800c1bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1c0:	d008      	beq.n	800c1d4 <TIM_OC1_SetConfig+0x164>
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	695b      	ldr	r3, [r3, #20]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d004      	beq.n	800c1d4 <TIM_OC1_SetConfig+0x164>
 800c1ca:	f641 41be 	movw	r1, #7358	@ 0x1cbe
 800c1ce:	481d      	ldr	r0, [pc, #116]	@ (800c244 <TIM_OC1_SetConfig+0x1d4>)
 800c1d0:	f7f4 ff0e 	bl	8000ff0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c1da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c1e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	695b      	ldr	r3, [r3, #20]
 800c1e8:	693a      	ldr	r2, [r7, #16]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	699b      	ldr	r3, [r3, #24]
 800c1f2:	693a      	ldr	r2, [r7, #16]
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	693a      	ldr	r2, [r7, #16]
 800c1fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	68fa      	ldr	r2, [r7, #12]
 800c202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	685a      	ldr	r2, [r3, #4]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	697a      	ldr	r2, [r7, #20]
 800c210:	621a      	str	r2, [r3, #32]
}
 800c212:	bf00      	nop
 800c214:	3718      	adds	r7, #24
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	40012c00 	.word	0x40012c00
 800c220:	50012c00 	.word	0x50012c00
 800c224:	40013400 	.word	0x40013400
 800c228:	50013400 	.word	0x50013400
 800c22c:	40014000 	.word	0x40014000
 800c230:	50014000 	.word	0x50014000
 800c234:	40014400 	.word	0x40014400
 800c238:	50014400 	.word	0x50014400
 800c23c:	40014800 	.word	0x40014800
 800c240:	50014800 	.word	0x50014800
 800c244:	08010110 	.word	0x08010110

0800c248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b086      	sub	sp, #24
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a1b      	ldr	r3, [r3, #32]
 800c256:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a1b      	ldr	r3, [r3, #32]
 800c25c:	f023 0210 	bic.w	r2, r3, #16
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	699b      	ldr	r3, [r3, #24]
 800c26e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c27a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	021b      	lsls	r3, r3, #8
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	4313      	orrs	r3, r2
 800c28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	f023 0320 	bic.w	r3, r3, #32
 800c296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	011b      	lsls	r3, r3, #4
 800c29e:	697a      	ldr	r2, [r7, #20]
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	4a49      	ldr	r2, [pc, #292]	@ (800c3cc <TIM_OC2_SetConfig+0x184>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d00b      	beq.n	800c2c4 <TIM_OC2_SetConfig+0x7c>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	4a48      	ldr	r2, [pc, #288]	@ (800c3d0 <TIM_OC2_SetConfig+0x188>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d007      	beq.n	800c2c4 <TIM_OC2_SetConfig+0x7c>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	4a47      	ldr	r2, [pc, #284]	@ (800c3d4 <TIM_OC2_SetConfig+0x18c>)
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d003      	beq.n	800c2c4 <TIM_OC2_SetConfig+0x7c>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4a46      	ldr	r2, [pc, #280]	@ (800c3d8 <TIM_OC2_SetConfig+0x190>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d11a      	bne.n	800c2fa <TIM_OC2_SetConfig+0xb2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d008      	beq.n	800c2de <TIM_OC2_SetConfig+0x96>
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	2b08      	cmp	r3, #8
 800c2d2:	d004      	beq.n	800c2de <TIM_OC2_SetConfig+0x96>
 800c2d4:	f641 41fc 	movw	r1, #7420	@ 0x1cfc
 800c2d8:	4840      	ldr	r0, [pc, #256]	@ (800c3dc <TIM_OC2_SetConfig+0x194>)
 800c2da:	f7f4 fe89 	bl	8000ff0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c2e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	68db      	ldr	r3, [r3, #12]
 800c2ea:	011b      	lsls	r3, r3, #4
 800c2ec:	697a      	ldr	r2, [r7, #20]
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4a33      	ldr	r2, [pc, #204]	@ (800c3cc <TIM_OC2_SetConfig+0x184>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d023      	beq.n	800c34a <TIM_OC2_SetConfig+0x102>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4a32      	ldr	r2, [pc, #200]	@ (800c3d0 <TIM_OC2_SetConfig+0x188>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d01f      	beq.n	800c34a <TIM_OC2_SetConfig+0x102>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4a31      	ldr	r2, [pc, #196]	@ (800c3d4 <TIM_OC2_SetConfig+0x18c>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d01b      	beq.n	800c34a <TIM_OC2_SetConfig+0x102>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4a30      	ldr	r2, [pc, #192]	@ (800c3d8 <TIM_OC2_SetConfig+0x190>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d017      	beq.n	800c34a <TIM_OC2_SetConfig+0x102>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4a30      	ldr	r2, [pc, #192]	@ (800c3e0 <TIM_OC2_SetConfig+0x198>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d013      	beq.n	800c34a <TIM_OC2_SetConfig+0x102>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4a2f      	ldr	r2, [pc, #188]	@ (800c3e4 <TIM_OC2_SetConfig+0x19c>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d00f      	beq.n	800c34a <TIM_OC2_SetConfig+0x102>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4a2e      	ldr	r2, [pc, #184]	@ (800c3e8 <TIM_OC2_SetConfig+0x1a0>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d00b      	beq.n	800c34a <TIM_OC2_SetConfig+0x102>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4a2d      	ldr	r2, [pc, #180]	@ (800c3ec <TIM_OC2_SetConfig+0x1a4>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d007      	beq.n	800c34a <TIM_OC2_SetConfig+0x102>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4a2c      	ldr	r2, [pc, #176]	@ (800c3f0 <TIM_OC2_SetConfig+0x1a8>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d003      	beq.n	800c34a <TIM_OC2_SetConfig+0x102>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4a2b      	ldr	r2, [pc, #172]	@ (800c3f4 <TIM_OC2_SetConfig+0x1ac>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d12f      	bne.n	800c3aa <TIM_OC2_SetConfig+0x162>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	699b      	ldr	r3, [r3, #24]
 800c34e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c352:	d008      	beq.n	800c366 <TIM_OC2_SetConfig+0x11e>
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	699b      	ldr	r3, [r3, #24]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d004      	beq.n	800c366 <TIM_OC2_SetConfig+0x11e>
 800c35c:	f641 5109 	movw	r1, #7433	@ 0x1d09
 800c360:	481e      	ldr	r0, [pc, #120]	@ (800c3dc <TIM_OC2_SetConfig+0x194>)
 800c362:	f7f4 fe45 	bl	8000ff0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	695b      	ldr	r3, [r3, #20]
 800c36a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c36e:	d008      	beq.n	800c382 <TIM_OC2_SetConfig+0x13a>
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	695b      	ldr	r3, [r3, #20]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d004      	beq.n	800c382 <TIM_OC2_SetConfig+0x13a>
 800c378:	f641 510a 	movw	r1, #7434	@ 0x1d0a
 800c37c:	4817      	ldr	r0, [pc, #92]	@ (800c3dc <TIM_OC2_SetConfig+0x194>)
 800c37e:	f7f4 fe37 	bl	8000ff0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	695b      	ldr	r3, [r3, #20]
 800c396:	009b      	lsls	r3, r3, #2
 800c398:	693a      	ldr	r2, [r7, #16]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	699b      	ldr	r3, [r3, #24]
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	693a      	ldr	r2, [r7, #16]
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	693a      	ldr	r2, [r7, #16]
 800c3ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	685a      	ldr	r2, [r3, #4]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	697a      	ldr	r2, [r7, #20]
 800c3c2:	621a      	str	r2, [r3, #32]
}
 800c3c4:	bf00      	nop
 800c3c6:	3718      	adds	r7, #24
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	40012c00 	.word	0x40012c00
 800c3d0:	50012c00 	.word	0x50012c00
 800c3d4:	40013400 	.word	0x40013400
 800c3d8:	50013400 	.word	0x50013400
 800c3dc:	08010110 	.word	0x08010110
 800c3e0:	40014000 	.word	0x40014000
 800c3e4:	50014000 	.word	0x50014000
 800c3e8:	40014400 	.word	0x40014400
 800c3ec:	50014400 	.word	0x50014400
 800c3f0:	40014800 	.word	0x40014800
 800c3f4:	50014800 	.word	0x50014800

0800c3f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6a1b      	ldr	r3, [r3, #32]
 800c406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6a1b      	ldr	r3, [r3, #32]
 800c40c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	69db      	ldr	r3, [r3, #28]
 800c41e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c42a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f023 0303 	bic.w	r3, r3, #3
 800c432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	021b      	lsls	r3, r3, #8
 800c44c:	697a      	ldr	r2, [r7, #20]
 800c44e:	4313      	orrs	r3, r2
 800c450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4a49      	ldr	r2, [pc, #292]	@ (800c57c <TIM_OC3_SetConfig+0x184>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d00b      	beq.n	800c472 <TIM_OC3_SetConfig+0x7a>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4a48      	ldr	r2, [pc, #288]	@ (800c580 <TIM_OC3_SetConfig+0x188>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d007      	beq.n	800c472 <TIM_OC3_SetConfig+0x7a>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4a47      	ldr	r2, [pc, #284]	@ (800c584 <TIM_OC3_SetConfig+0x18c>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d003      	beq.n	800c472 <TIM_OC3_SetConfig+0x7a>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4a46      	ldr	r2, [pc, #280]	@ (800c588 <TIM_OC3_SetConfig+0x190>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d11a      	bne.n	800c4a8 <TIM_OC3_SetConfig+0xb0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d008      	beq.n	800c48c <TIM_OC3_SetConfig+0x94>
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	2b08      	cmp	r3, #8
 800c480:	d004      	beq.n	800c48c <TIM_OC3_SetConfig+0x94>
 800c482:	f641 5147 	movw	r1, #7495	@ 0x1d47
 800c486:	4841      	ldr	r0, [pc, #260]	@ (800c58c <TIM_OC3_SetConfig+0x194>)
 800c488:	f7f4 fdb2 	bl	8000ff0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	021b      	lsls	r3, r3, #8
 800c49a:	697a      	ldr	r2, [r7, #20]
 800c49c:	4313      	orrs	r3, r2
 800c49e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c4a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4a34      	ldr	r2, [pc, #208]	@ (800c57c <TIM_OC3_SetConfig+0x184>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d023      	beq.n	800c4f8 <TIM_OC3_SetConfig+0x100>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	4a33      	ldr	r2, [pc, #204]	@ (800c580 <TIM_OC3_SetConfig+0x188>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d01f      	beq.n	800c4f8 <TIM_OC3_SetConfig+0x100>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	4a32      	ldr	r2, [pc, #200]	@ (800c584 <TIM_OC3_SetConfig+0x18c>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d01b      	beq.n	800c4f8 <TIM_OC3_SetConfig+0x100>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4a31      	ldr	r2, [pc, #196]	@ (800c588 <TIM_OC3_SetConfig+0x190>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d017      	beq.n	800c4f8 <TIM_OC3_SetConfig+0x100>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	4a31      	ldr	r2, [pc, #196]	@ (800c590 <TIM_OC3_SetConfig+0x198>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d013      	beq.n	800c4f8 <TIM_OC3_SetConfig+0x100>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4a30      	ldr	r2, [pc, #192]	@ (800c594 <TIM_OC3_SetConfig+0x19c>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d00f      	beq.n	800c4f8 <TIM_OC3_SetConfig+0x100>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a2f      	ldr	r2, [pc, #188]	@ (800c598 <TIM_OC3_SetConfig+0x1a0>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d00b      	beq.n	800c4f8 <TIM_OC3_SetConfig+0x100>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4a2e      	ldr	r2, [pc, #184]	@ (800c59c <TIM_OC3_SetConfig+0x1a4>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d007      	beq.n	800c4f8 <TIM_OC3_SetConfig+0x100>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4a2d      	ldr	r2, [pc, #180]	@ (800c5a0 <TIM_OC3_SetConfig+0x1a8>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d003      	beq.n	800c4f8 <TIM_OC3_SetConfig+0x100>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4a2c      	ldr	r2, [pc, #176]	@ (800c5a4 <TIM_OC3_SetConfig+0x1ac>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d12f      	bne.n	800c558 <TIM_OC3_SetConfig+0x160>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	699b      	ldr	r3, [r3, #24]
 800c4fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c500:	d008      	beq.n	800c514 <TIM_OC3_SetConfig+0x11c>
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	699b      	ldr	r3, [r3, #24]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d004      	beq.n	800c514 <TIM_OC3_SetConfig+0x11c>
 800c50a:	f641 5154 	movw	r1, #7508	@ 0x1d54
 800c50e:	481f      	ldr	r0, [pc, #124]	@ (800c58c <TIM_OC3_SetConfig+0x194>)
 800c510:	f7f4 fd6e 	bl	8000ff0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	695b      	ldr	r3, [r3, #20]
 800c518:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c51c:	d008      	beq.n	800c530 <TIM_OC3_SetConfig+0x138>
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	695b      	ldr	r3, [r3, #20]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d004      	beq.n	800c530 <TIM_OC3_SetConfig+0x138>
 800c526:	f641 5155 	movw	r1, #7509	@ 0x1d55
 800c52a:	4818      	ldr	r0, [pc, #96]	@ (800c58c <TIM_OC3_SetConfig+0x194>)
 800c52c:	f7f4 fd60 	bl	8000ff0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c53e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	695b      	ldr	r3, [r3, #20]
 800c544:	011b      	lsls	r3, r3, #4
 800c546:	693a      	ldr	r2, [r7, #16]
 800c548:	4313      	orrs	r3, r2
 800c54a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	699b      	ldr	r3, [r3, #24]
 800c550:	011b      	lsls	r3, r3, #4
 800c552:	693a      	ldr	r2, [r7, #16]
 800c554:	4313      	orrs	r3, r2
 800c556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	693a      	ldr	r2, [r7, #16]
 800c55c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	685a      	ldr	r2, [r3, #4]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	697a      	ldr	r2, [r7, #20]
 800c570:	621a      	str	r2, [r3, #32]
}
 800c572:	bf00      	nop
 800c574:	3718      	adds	r7, #24
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	40012c00 	.word	0x40012c00
 800c580:	50012c00 	.word	0x50012c00
 800c584:	40013400 	.word	0x40013400
 800c588:	50013400 	.word	0x50013400
 800c58c:	08010110 	.word	0x08010110
 800c590:	40014000 	.word	0x40014000
 800c594:	50014000 	.word	0x50014000
 800c598:	40014400 	.word	0x40014400
 800c59c:	50014400 	.word	0x50014400
 800c5a0:	40014800 	.word	0x40014800
 800c5a4:	50014800 	.word	0x50014800

0800c5a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b086      	sub	sp, #24
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6a1b      	ldr	r3, [r3, #32]
 800c5b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a1b      	ldr	r3, [r3, #32]
 800c5bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	69db      	ldr	r3, [r3, #28]
 800c5ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c5d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c5e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	021b      	lsls	r3, r3, #8
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c5f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	031b      	lsls	r3, r3, #12
 800c5fe:	697a      	ldr	r2, [r7, #20]
 800c600:	4313      	orrs	r3, r2
 800c602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	4a49      	ldr	r2, [pc, #292]	@ (800c72c <TIM_OC4_SetConfig+0x184>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d00b      	beq.n	800c624 <TIM_OC4_SetConfig+0x7c>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4a48      	ldr	r2, [pc, #288]	@ (800c730 <TIM_OC4_SetConfig+0x188>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d007      	beq.n	800c624 <TIM_OC4_SetConfig+0x7c>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	4a47      	ldr	r2, [pc, #284]	@ (800c734 <TIM_OC4_SetConfig+0x18c>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d003      	beq.n	800c624 <TIM_OC4_SetConfig+0x7c>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4a46      	ldr	r2, [pc, #280]	@ (800c738 <TIM_OC4_SetConfig+0x190>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d11a      	bne.n	800c65a <TIM_OC4_SetConfig+0xb2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d008      	beq.n	800c63e <TIM_OC4_SetConfig+0x96>
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	2b08      	cmp	r3, #8
 800c632:	d004      	beq.n	800c63e <TIM_OC4_SetConfig+0x96>
 800c634:	f641 5193 	movw	r1, #7571	@ 0x1d93
 800c638:	4840      	ldr	r0, [pc, #256]	@ (800c73c <TIM_OC4_SetConfig+0x194>)
 800c63a:	f7f4 fcd9 	bl	8000ff0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	68db      	ldr	r3, [r3, #12]
 800c64a:	031b      	lsls	r3, r3, #12
 800c64c:	697a      	ldr	r2, [r7, #20]
 800c64e:	4313      	orrs	r3, r2
 800c650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4a33      	ldr	r2, [pc, #204]	@ (800c72c <TIM_OC4_SetConfig+0x184>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d023      	beq.n	800c6aa <TIM_OC4_SetConfig+0x102>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a32      	ldr	r2, [pc, #200]	@ (800c730 <TIM_OC4_SetConfig+0x188>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d01f      	beq.n	800c6aa <TIM_OC4_SetConfig+0x102>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a31      	ldr	r2, [pc, #196]	@ (800c734 <TIM_OC4_SetConfig+0x18c>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d01b      	beq.n	800c6aa <TIM_OC4_SetConfig+0x102>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4a30      	ldr	r2, [pc, #192]	@ (800c738 <TIM_OC4_SetConfig+0x190>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d017      	beq.n	800c6aa <TIM_OC4_SetConfig+0x102>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4a30      	ldr	r2, [pc, #192]	@ (800c740 <TIM_OC4_SetConfig+0x198>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d013      	beq.n	800c6aa <TIM_OC4_SetConfig+0x102>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a2f      	ldr	r2, [pc, #188]	@ (800c744 <TIM_OC4_SetConfig+0x19c>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d00f      	beq.n	800c6aa <TIM_OC4_SetConfig+0x102>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4a2e      	ldr	r2, [pc, #184]	@ (800c748 <TIM_OC4_SetConfig+0x1a0>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d00b      	beq.n	800c6aa <TIM_OC4_SetConfig+0x102>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4a2d      	ldr	r2, [pc, #180]	@ (800c74c <TIM_OC4_SetConfig+0x1a4>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d007      	beq.n	800c6aa <TIM_OC4_SetConfig+0x102>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4a2c      	ldr	r2, [pc, #176]	@ (800c750 <TIM_OC4_SetConfig+0x1a8>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d003      	beq.n	800c6aa <TIM_OC4_SetConfig+0x102>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4a2b      	ldr	r2, [pc, #172]	@ (800c754 <TIM_OC4_SetConfig+0x1ac>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d12f      	bne.n	800c70a <TIM_OC4_SetConfig+0x162>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	699b      	ldr	r3, [r3, #24]
 800c6ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6b2:	d008      	beq.n	800c6c6 <TIM_OC4_SetConfig+0x11e>
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	699b      	ldr	r3, [r3, #24]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d004      	beq.n	800c6c6 <TIM_OC4_SetConfig+0x11e>
 800c6bc:	f44f 51ed 	mov.w	r1, #7584	@ 0x1da0
 800c6c0:	481e      	ldr	r0, [pc, #120]	@ (800c73c <TIM_OC4_SetConfig+0x194>)
 800c6c2:	f7f4 fc95 	bl	8000ff0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	695b      	ldr	r3, [r3, #20]
 800c6ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6ce:	d008      	beq.n	800c6e2 <TIM_OC4_SetConfig+0x13a>
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	695b      	ldr	r3, [r3, #20]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d004      	beq.n	800c6e2 <TIM_OC4_SetConfig+0x13a>
 800c6d8:	f641 51a1 	movw	r1, #7585	@ 0x1da1
 800c6dc:	4817      	ldr	r0, [pc, #92]	@ (800c73c <TIM_OC4_SetConfig+0x194>)
 800c6de:	f7f4 fc87 	bl	8000ff0 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c6e8:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c6f0:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	695b      	ldr	r3, [r3, #20]
 800c6f6:	019b      	lsls	r3, r3, #6
 800c6f8:	693a      	ldr	r2, [r7, #16]
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	699b      	ldr	r3, [r3, #24]
 800c702:	019b      	lsls	r3, r3, #6
 800c704:	693a      	ldr	r2, [r7, #16]
 800c706:	4313      	orrs	r3, r2
 800c708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	693a      	ldr	r2, [r7, #16]
 800c70e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	68fa      	ldr	r2, [r7, #12]
 800c714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	685a      	ldr	r2, [r3, #4]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	697a      	ldr	r2, [r7, #20]
 800c722:	621a      	str	r2, [r3, #32]
}
 800c724:	bf00      	nop
 800c726:	3718      	adds	r7, #24
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	40012c00 	.word	0x40012c00
 800c730:	50012c00 	.word	0x50012c00
 800c734:	40013400 	.word	0x40013400
 800c738:	50013400 	.word	0x50013400
 800c73c:	08010110 	.word	0x08010110
 800c740:	40014000 	.word	0x40014000
 800c744:	50014000 	.word	0x50014000
 800c748:	40014400 	.word	0x40014400
 800c74c:	50014400 	.word	0x50014400
 800c750:	40014800 	.word	0x40014800
 800c754:	50014800 	.word	0x50014800

0800c758 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c758:	b480      	push	{r7}
 800c75a:	b087      	sub	sp, #28
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6a1b      	ldr	r3, [r3, #32]
 800c76c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c78a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	4313      	orrs	r3, r2
 800c794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c79c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	041b      	lsls	r3, r3, #16
 800c7a4:	693a      	ldr	r2, [r7, #16]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	4a21      	ldr	r2, [pc, #132]	@ (800c834 <TIM_OC5_SetConfig+0xdc>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d023      	beq.n	800c7fa <TIM_OC5_SetConfig+0xa2>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	4a20      	ldr	r2, [pc, #128]	@ (800c838 <TIM_OC5_SetConfig+0xe0>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d01f      	beq.n	800c7fa <TIM_OC5_SetConfig+0xa2>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4a1f      	ldr	r2, [pc, #124]	@ (800c83c <TIM_OC5_SetConfig+0xe4>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d01b      	beq.n	800c7fa <TIM_OC5_SetConfig+0xa2>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4a1e      	ldr	r2, [pc, #120]	@ (800c840 <TIM_OC5_SetConfig+0xe8>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d017      	beq.n	800c7fa <TIM_OC5_SetConfig+0xa2>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c844 <TIM_OC5_SetConfig+0xec>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d013      	beq.n	800c7fa <TIM_OC5_SetConfig+0xa2>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	4a1c      	ldr	r2, [pc, #112]	@ (800c848 <TIM_OC5_SetConfig+0xf0>)
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d00f      	beq.n	800c7fa <TIM_OC5_SetConfig+0xa2>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	4a1b      	ldr	r2, [pc, #108]	@ (800c84c <TIM_OC5_SetConfig+0xf4>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d00b      	beq.n	800c7fa <TIM_OC5_SetConfig+0xa2>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	4a1a      	ldr	r2, [pc, #104]	@ (800c850 <TIM_OC5_SetConfig+0xf8>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d007      	beq.n	800c7fa <TIM_OC5_SetConfig+0xa2>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4a19      	ldr	r2, [pc, #100]	@ (800c854 <TIM_OC5_SetConfig+0xfc>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d003      	beq.n	800c7fa <TIM_OC5_SetConfig+0xa2>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4a18      	ldr	r2, [pc, #96]	@ (800c858 <TIM_OC5_SetConfig+0x100>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d109      	bne.n	800c80e <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c800:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	695b      	ldr	r3, [r3, #20]
 800c806:	021b      	lsls	r3, r3, #8
 800c808:	697a      	ldr	r2, [r7, #20]
 800c80a:	4313      	orrs	r3, r2
 800c80c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	697a      	ldr	r2, [r7, #20]
 800c812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	68fa      	ldr	r2, [r7, #12]
 800c818:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	685a      	ldr	r2, [r3, #4]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	693a      	ldr	r2, [r7, #16]
 800c826:	621a      	str	r2, [r3, #32]
}
 800c828:	bf00      	nop
 800c82a:	371c      	adds	r7, #28
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr
 800c834:	40012c00 	.word	0x40012c00
 800c838:	50012c00 	.word	0x50012c00
 800c83c:	40013400 	.word	0x40013400
 800c840:	50013400 	.word	0x50013400
 800c844:	40014000 	.word	0x40014000
 800c848:	50014000 	.word	0x50014000
 800c84c:	40014400 	.word	0x40014400
 800c850:	50014400 	.word	0x50014400
 800c854:	40014800 	.word	0x40014800
 800c858:	50014800 	.word	0x50014800

0800c85c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b087      	sub	sp, #28
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6a1b      	ldr	r3, [r3, #32]
 800c86a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a1b      	ldr	r3, [r3, #32]
 800c870:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c88a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c88e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	021b      	lsls	r3, r3, #8
 800c896:	68fa      	ldr	r2, [r7, #12]
 800c898:	4313      	orrs	r3, r2
 800c89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c8a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	051b      	lsls	r3, r3, #20
 800c8aa:	693a      	ldr	r2, [r7, #16]
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	4a22      	ldr	r2, [pc, #136]	@ (800c93c <TIM_OC6_SetConfig+0xe0>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d023      	beq.n	800c900 <TIM_OC6_SetConfig+0xa4>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4a21      	ldr	r2, [pc, #132]	@ (800c940 <TIM_OC6_SetConfig+0xe4>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d01f      	beq.n	800c900 <TIM_OC6_SetConfig+0xa4>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a20      	ldr	r2, [pc, #128]	@ (800c944 <TIM_OC6_SetConfig+0xe8>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d01b      	beq.n	800c900 <TIM_OC6_SetConfig+0xa4>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4a1f      	ldr	r2, [pc, #124]	@ (800c948 <TIM_OC6_SetConfig+0xec>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d017      	beq.n	800c900 <TIM_OC6_SetConfig+0xa4>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a1e      	ldr	r2, [pc, #120]	@ (800c94c <TIM_OC6_SetConfig+0xf0>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d013      	beq.n	800c900 <TIM_OC6_SetConfig+0xa4>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4a1d      	ldr	r2, [pc, #116]	@ (800c950 <TIM_OC6_SetConfig+0xf4>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d00f      	beq.n	800c900 <TIM_OC6_SetConfig+0xa4>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	4a1c      	ldr	r2, [pc, #112]	@ (800c954 <TIM_OC6_SetConfig+0xf8>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d00b      	beq.n	800c900 <TIM_OC6_SetConfig+0xa4>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	4a1b      	ldr	r2, [pc, #108]	@ (800c958 <TIM_OC6_SetConfig+0xfc>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d007      	beq.n	800c900 <TIM_OC6_SetConfig+0xa4>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	4a1a      	ldr	r2, [pc, #104]	@ (800c95c <TIM_OC6_SetConfig+0x100>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d003      	beq.n	800c900 <TIM_OC6_SetConfig+0xa4>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4a19      	ldr	r2, [pc, #100]	@ (800c960 <TIM_OC6_SetConfig+0x104>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d109      	bne.n	800c914 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c906:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	695b      	ldr	r3, [r3, #20]
 800c90c:	029b      	lsls	r3, r3, #10
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	4313      	orrs	r3, r2
 800c912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	697a      	ldr	r2, [r7, #20]
 800c918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	685a      	ldr	r2, [r3, #4]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	693a      	ldr	r2, [r7, #16]
 800c92c:	621a      	str	r2, [r3, #32]
}
 800c92e:	bf00      	nop
 800c930:	371c      	adds	r7, #28
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	40012c00 	.word	0x40012c00
 800c940:	50012c00 	.word	0x50012c00
 800c944:	40013400 	.word	0x40013400
 800c948:	50013400 	.word	0x50013400
 800c94c:	40014000 	.word	0x40014000
 800c950:	50014000 	.word	0x50014000
 800c954:	40014400 	.word	0x40014400
 800c958:	50014400 	.word	0x50014400
 800c95c:	40014800 	.word	0x40014800
 800c960:	50014800 	.word	0x50014800

0800c964 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c96e:	2300      	movs	r3, #0
 800c970:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a5d      	ldr	r2, [pc, #372]	@ (800caec <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d031      	beq.n	800c9e0 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a5b      	ldr	r2, [pc, #364]	@ (800caf0 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d02c      	beq.n	800c9e0 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a5a      	ldr	r2, [pc, #360]	@ (800caf4 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d027      	beq.n	800c9e0 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a58      	ldr	r2, [pc, #352]	@ (800caf8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d022      	beq.n	800c9e0 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4a57      	ldr	r2, [pc, #348]	@ (800cafc <HAL_TIMEx_ConfigBreakDeadTime+0x198>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d01d      	beq.n	800c9e0 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a55      	ldr	r2, [pc, #340]	@ (800cb00 <HAL_TIMEx_ConfigBreakDeadTime+0x19c>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d018      	beq.n	800c9e0 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a54      	ldr	r2, [pc, #336]	@ (800cb04 <HAL_TIMEx_ConfigBreakDeadTime+0x1a0>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d013      	beq.n	800c9e0 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a52      	ldr	r2, [pc, #328]	@ (800cb08 <HAL_TIMEx_ConfigBreakDeadTime+0x1a4>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d00e      	beq.n	800c9e0 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a51      	ldr	r2, [pc, #324]	@ (800cb0c <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d009      	beq.n	800c9e0 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a4f      	ldr	r2, [pc, #316]	@ (800cb10 <HAL_TIMEx_ConfigBreakDeadTime+0x1ac>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d004      	beq.n	800c9e0 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
 800c9d6:	f640 0186 	movw	r1, #2182	@ 0x886
 800c9da:	484e      	ldr	r0, [pc, #312]	@ (800cb14 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800c9dc:	f7f4 fb08 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c9e8:	d008      	beq.n	800c9fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d004      	beq.n	800c9fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c9f2:	f640 0187 	movw	r1, #2183	@ 0x887
 800c9f6:	4847      	ldr	r0, [pc, #284]	@ (800cb14 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800c9f8:	f7f4 fafa 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca04:	d008      	beq.n	800ca18 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d004      	beq.n	800ca18 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ca0e:	f640 0188 	movw	r1, #2184	@ 0x888
 800ca12:	4840      	ldr	r0, [pc, #256]	@ (800cb14 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800ca14:	f7f4 faec 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d013      	beq.n	800ca48 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	689b      	ldr	r3, [r3, #8]
 800ca24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca28:	d00e      	beq.n	800ca48 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	689b      	ldr	r3, [r3, #8]
 800ca2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca32:	d009      	beq.n	800ca48 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	689b      	ldr	r3, [r3, #8]
 800ca38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca3c:	d004      	beq.n	800ca48 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>
 800ca3e:	f640 0189 	movw	r1, #2185	@ 0x889
 800ca42:	4834      	ldr	r0, [pc, #208]	@ (800cb14 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800ca44:	f7f4 fad4 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	2bff      	cmp	r3, #255	@ 0xff
 800ca4e:	d904      	bls.n	800ca5a <HAL_TIMEx_ConfigBreakDeadTime+0xf6>
 800ca50:	f640 018a 	movw	r1, #2186	@ 0x88a
 800ca54:	482f      	ldr	r0, [pc, #188]	@ (800cb14 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800ca56:	f7f4 facb 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca62:	d008      	beq.n	800ca76 <HAL_TIMEx_ConfigBreakDeadTime+0x112>
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	691b      	ldr	r3, [r3, #16]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d004      	beq.n	800ca76 <HAL_TIMEx_ConfigBreakDeadTime+0x112>
 800ca6c:	f640 018b 	movw	r1, #2187	@ 0x88b
 800ca70:	4828      	ldr	r0, [pc, #160]	@ (800cb14 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800ca72:	f7f4 fabd 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	695b      	ldr	r3, [r3, #20]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d009      	beq.n	800ca92 <HAL_TIMEx_ConfigBreakDeadTime+0x12e>
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	695b      	ldr	r3, [r3, #20]
 800ca82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca86:	d004      	beq.n	800ca92 <HAL_TIMEx_ConfigBreakDeadTime+0x12e>
 800ca88:	f640 018c 	movw	r1, #2188	@ 0x88c
 800ca8c:	4821      	ldr	r0, [pc, #132]	@ (800cb14 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800ca8e:	f7f4 faaf 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	699b      	ldr	r3, [r3, #24]
 800ca96:	2b0f      	cmp	r3, #15
 800ca98:	d904      	bls.n	800caa4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>
 800ca9a:	f640 018d 	movw	r1, #2189	@ 0x88d
 800ca9e:	481d      	ldr	r0, [pc, #116]	@ (800cb14 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800caa0:	f7f4 faa6 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800caac:	d008      	beq.n	800cac0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d004      	beq.n	800cac0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>
 800cab6:	f640 018e 	movw	r1, #2190	@ 0x88e
 800caba:	4816      	ldr	r0, [pc, #88]	@ (800cb14 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800cabc:	f7f4 fa98 	bl	8000ff0 <assert_failed>
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	69db      	ldr	r3, [r3, #28]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d009      	beq.n	800cadc <HAL_TIMEx_ConfigBreakDeadTime+0x178>
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	69db      	ldr	r3, [r3, #28]
 800cacc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cad0:	d004      	beq.n	800cadc <HAL_TIMEx_ConfigBreakDeadTime+0x178>
 800cad2:	f640 018f 	movw	r1, #2191	@ 0x88f
 800cad6:	480f      	ldr	r0, [pc, #60]	@ (800cb14 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800cad8:	f7f4 fa8a 	bl	8000ff0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d118      	bne.n	800cb18 <HAL_TIMEx_ConfigBreakDeadTime+0x1b4>
 800cae6:	2302      	movs	r3, #2
 800cae8:	e0c7      	b.n	800cc7a <HAL_TIMEx_ConfigBreakDeadTime+0x316>
 800caea:	bf00      	nop
 800caec:	40012c00 	.word	0x40012c00
 800caf0:	50012c00 	.word	0x50012c00
 800caf4:	40013400 	.word	0x40013400
 800caf8:	50013400 	.word	0x50013400
 800cafc:	40014000 	.word	0x40014000
 800cb00:	50014000 	.word	0x50014000
 800cb04:	40014400 	.word	0x40014400
 800cb08:	50014400 	.word	0x50014400
 800cb0c:	40014800 	.word	0x40014800
 800cb10:	50014800 	.word	0x50014800
 800cb14:	08010148 	.word	0x08010148
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	4313      	orrs	r3, r2
 800cb48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	4313      	orrs	r3, r2
 800cb64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	695b      	ldr	r3, [r3, #20]
 800cb70:	4313      	orrs	r3, r2
 800cb72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	699b      	ldr	r3, [r3, #24]
 800cb8c:	041b      	lsls	r3, r3, #16
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	69db      	ldr	r3, [r3, #28]
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a37      	ldr	r2, [pc, #220]	@ (800cc84 <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d00e      	beq.n	800cbc8 <HAL_TIMEx_ConfigBreakDeadTime+0x264>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4a36      	ldr	r2, [pc, #216]	@ (800cc88 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d009      	beq.n	800cbc8 <HAL_TIMEx_ConfigBreakDeadTime+0x264>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a34      	ldr	r2, [pc, #208]	@ (800cc8c <HAL_TIMEx_ConfigBreakDeadTime+0x328>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d004      	beq.n	800cbc8 <HAL_TIMEx_ConfigBreakDeadTime+0x264>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	4a33      	ldr	r2, [pc, #204]	@ (800cc90 <HAL_TIMEx_ConfigBreakDeadTime+0x32c>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d14f      	bne.n	800cc68 <HAL_TIMEx_ConfigBreakDeadTime+0x304>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	6a1b      	ldr	r3, [r3, #32]
 800cbcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cbd0:	d008      	beq.n	800cbe4 <HAL_TIMEx_ConfigBreakDeadTime+0x280>
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	6a1b      	ldr	r3, [r3, #32]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d004      	beq.n	800cbe4 <HAL_TIMEx_ConfigBreakDeadTime+0x280>
 800cbda:	f640 01a5 	movw	r1, #2213	@ 0x8a5
 800cbde:	482d      	ldr	r0, [pc, #180]	@ (800cc94 <HAL_TIMEx_ConfigBreakDeadTime+0x330>)
 800cbe0:	f7f4 fa06 	bl	8000ff0 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d009      	beq.n	800cc00 <HAL_TIMEx_ConfigBreakDeadTime+0x29c>
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cbf4:	d004      	beq.n	800cc00 <HAL_TIMEx_ConfigBreakDeadTime+0x29c>
 800cbf6:	f640 01a6 	movw	r1, #2214	@ 0x8a6
 800cbfa:	4826      	ldr	r0, [pc, #152]	@ (800cc94 <HAL_TIMEx_ConfigBreakDeadTime+0x330>)
 800cbfc:	f7f4 f9f8 	bl	8000ff0 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc04:	2b0f      	cmp	r3, #15
 800cc06:	d904      	bls.n	800cc12 <HAL_TIMEx_ConfigBreakDeadTime+0x2ae>
 800cc08:	f640 01a7 	movw	r1, #2215	@ 0x8a7
 800cc0c:	4821      	ldr	r0, [pc, #132]	@ (800cc94 <HAL_TIMEx_ConfigBreakDeadTime+0x330>)
 800cc0e:	f7f4 f9ef 	bl	8000ff0 <assert_failed>
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d009      	beq.n	800cc2e <HAL_TIMEx_ConfigBreakDeadTime+0x2ca>
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc22:	d004      	beq.n	800cc2e <HAL_TIMEx_ConfigBreakDeadTime+0x2ca>
 800cc24:	f640 01a8 	movw	r1, #2216	@ 0x8a8
 800cc28:	481a      	ldr	r0, [pc, #104]	@ (800cc94 <HAL_TIMEx_ConfigBreakDeadTime+0x330>)
 800cc2a:	f7f4 f9e1 	bl	8000ff0 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc38:	051b      	lsls	r3, r3, #20
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	6a1b      	ldr	r3, [r3, #32]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc56:	4313      	orrs	r3, r2
 800cc58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc64:	4313      	orrs	r3, r2
 800cc66:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2200      	movs	r2, #0
 800cc74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cc78:	2300      	movs	r3, #0
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3710      	adds	r7, #16
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	40012c00 	.word	0x40012c00
 800cc88:	50012c00 	.word	0x50012c00
 800cc8c:	40013400 	.word	0x40013400
 800cc90:	50013400 	.word	0x50013400
 800cc94:	08010148 	.word	0x08010148

0800cc98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cca0:	bf00      	nop
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ccb4:	bf00      	nop
 800ccb6:	370c      	adds	r7, #12
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ccc8:	bf00      	nop
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b083      	sub	sp, #12
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ccdc:	bf00      	nop
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ccf0:	bf00      	nop
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800cd04:	bf00      	nop
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cd18:	bf00      	nop
 800cd1a:	370c      	adds	r7, #12
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d101      	bne.n	800cd36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd32:	2301      	movs	r3, #1
 800cd34:	e0c9      	b.n	800ceca <HAL_UART_Init+0x1a6>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	699b      	ldr	r3, [r3, #24]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d041      	beq.n	800cdc2 <HAL_UART_Init+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4a64      	ldr	r2, [pc, #400]	@ (800ced4 <HAL_UART_Init+0x1b0>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d07d      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a62      	ldr	r2, [pc, #392]	@ (800ced8 <HAL_UART_Init+0x1b4>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d078      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4a61      	ldr	r2, [pc, #388]	@ (800cedc <HAL_UART_Init+0x1b8>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d073      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a5f      	ldr	r2, [pc, #380]	@ (800cee0 <HAL_UART_Init+0x1bc>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d06e      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a5e      	ldr	r2, [pc, #376]	@ (800cee4 <HAL_UART_Init+0x1c0>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d069      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a5c      	ldr	r2, [pc, #368]	@ (800cee8 <HAL_UART_Init+0x1c4>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d064      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a5b      	ldr	r2, [pc, #364]	@ (800ceec <HAL_UART_Init+0x1c8>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d05f      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a59      	ldr	r2, [pc, #356]	@ (800cef0 <HAL_UART_Init+0x1cc>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d05a      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a58      	ldr	r2, [pc, #352]	@ (800cef4 <HAL_UART_Init+0x1d0>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d055      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
 800cda0:	d050      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a54      	ldr	r2, [pc, #336]	@ (800cef8 <HAL_UART_Init+0x1d4>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d04b      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a52      	ldr	r2, [pc, #328]	@ (800cefc <HAL_UART_Init+0x1d8>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d046      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cdb6:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 800cdba:	4851      	ldr	r0, [pc, #324]	@ (800cf00 <HAL_UART_Init+0x1dc>)
 800cdbc:	f7f4 f918 	bl	8000ff0 <assert_failed>
 800cdc0:	e040      	b.n	800ce44 <HAL_UART_Init+0x120>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a43      	ldr	r2, [pc, #268]	@ (800ced4 <HAL_UART_Init+0x1b0>)
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d03b      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a41      	ldr	r2, [pc, #260]	@ (800ced8 <HAL_UART_Init+0x1b4>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d036      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4a40      	ldr	r2, [pc, #256]	@ (800cedc <HAL_UART_Init+0x1b8>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d031      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a3e      	ldr	r2, [pc, #248]	@ (800cee0 <HAL_UART_Init+0x1bc>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d02c      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4a3d      	ldr	r2, [pc, #244]	@ (800cee4 <HAL_UART_Init+0x1c0>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d027      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a3b      	ldr	r2, [pc, #236]	@ (800cee8 <HAL_UART_Init+0x1c4>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d022      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	4a3a      	ldr	r2, [pc, #232]	@ (800ceec <HAL_UART_Init+0x1c8>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d01d      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a38      	ldr	r2, [pc, #224]	@ (800cef0 <HAL_UART_Init+0x1cc>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d018      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	4a37      	ldr	r2, [pc, #220]	@ (800cef4 <HAL_UART_Init+0x1d0>)
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d013      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
 800ce24:	d00e      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a33      	ldr	r2, [pc, #204]	@ (800cef8 <HAL_UART_Init+0x1d4>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d009      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a31      	ldr	r2, [pc, #196]	@ (800cefc <HAL_UART_Init+0x1d8>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d004      	beq.n	800ce44 <HAL_UART_Init+0x120>
 800ce3a:	f240 1145 	movw	r1, #325	@ 0x145
 800ce3e:	4830      	ldr	r0, [pc, #192]	@ (800cf00 <HAL_UART_Init+0x1dc>)
 800ce40:	f7f4 f8d6 	bl	8000ff0 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d106      	bne.n	800ce5c <HAL_UART_Init+0x138>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f7f4 fc98 	bl	800178c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2224      	movs	r2, #36	@ 0x24
 800ce60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f022 0201 	bic.w	r2, r2, #1
 800ce72:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d002      	beq.n	800ce82 <HAL_UART_Init+0x15e>
  {
    UART_AdvFeatureConfig(huart);
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 fe59 	bl	800db34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 fbd4 	bl	800d630 <UART_SetConfig>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d101      	bne.n	800ce92 <HAL_UART_Init+0x16e>
  {
    return HAL_ERROR;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e01b      	b.n	800ceca <HAL_UART_Init+0x1a6>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	685a      	ldr	r2, [r3, #4]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cea0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	689a      	ldr	r2, [r3, #8]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ceb0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f042 0201 	orr.w	r2, r2, #1
 800cec0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 ffb6 	bl	800de34 <UART_CheckIdleState>
 800cec8:	4603      	mov	r3, r0
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3708      	adds	r7, #8
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
 800ced2:	bf00      	nop
 800ced4:	40013800 	.word	0x40013800
 800ced8:	50013800 	.word	0x50013800
 800cedc:	40004400 	.word	0x40004400
 800cee0:	50004400 	.word	0x50004400
 800cee4:	40004800 	.word	0x40004800
 800cee8:	50004800 	.word	0x50004800
 800ceec:	40004c00 	.word	0x40004c00
 800cef0:	50004c00 	.word	0x50004c00
 800cef4:	40005000 	.word	0x40005000
 800cef8:	46002400 	.word	0x46002400
 800cefc:	56002400 	.word	0x56002400
 800cf00:	08010184 	.word	0x08010184

0800cf04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b08a      	sub	sp, #40	@ 0x28
 800cf08:	af02      	add	r7, sp, #8
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	603b      	str	r3, [r7, #0]
 800cf10:	4613      	mov	r3, r2
 800cf12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf1a:	2b20      	cmp	r3, #32
 800cf1c:	f040 808b 	bne.w	800d036 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d002      	beq.n	800cf2c <HAL_UART_Transmit+0x28>
 800cf26:	88fb      	ldrh	r3, [r7, #6]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d101      	bne.n	800cf30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e083      	b.n	800d038 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	689b      	ldr	r3, [r3, #8]
 800cf36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf3a:	2b80      	cmp	r3, #128	@ 0x80
 800cf3c:	d107      	bne.n	800cf4e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	689a      	ldr	r2, [r3, #8]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cf4c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2200      	movs	r2, #0
 800cf52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2221      	movs	r2, #33	@ 0x21
 800cf5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf5e:	f7f4 fd49 	bl	80019f4 <HAL_GetTick>
 800cf62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	88fa      	ldrh	r2, [r7, #6]
 800cf68:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	88fa      	ldrh	r2, [r7, #6]
 800cf70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf7c:	d108      	bne.n	800cf90 <HAL_UART_Transmit+0x8c>
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	691b      	ldr	r3, [r3, #16]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d104      	bne.n	800cf90 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800cf86:	2300      	movs	r3, #0
 800cf88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	61bb      	str	r3, [r7, #24]
 800cf8e:	e003      	b.n	800cf98 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf94:	2300      	movs	r3, #0
 800cf96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cf98:	e030      	b.n	800cffc <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	9300      	str	r3, [sp, #0]
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	2180      	movs	r1, #128	@ 0x80
 800cfa4:	68f8      	ldr	r0, [r7, #12]
 800cfa6:	f000 ffef 	bl	800df88 <UART_WaitOnFlagUntilTimeout>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d005      	beq.n	800cfbc <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2220      	movs	r2, #32
 800cfb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cfb8:	2303      	movs	r3, #3
 800cfba:	e03d      	b.n	800d038 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d10b      	bne.n	800cfda <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	881b      	ldrh	r3, [r3, #0]
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cfd0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	3302      	adds	r3, #2
 800cfd6:	61bb      	str	r3, [r7, #24]
 800cfd8:	e007      	b.n	800cfea <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cfda:	69fb      	ldr	r3, [r7, #28]
 800cfdc:	781a      	ldrb	r2, [r3, #0]
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	3b01      	subs	r3, #1
 800cff4:	b29a      	uxth	r2, r3
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d002:	b29b      	uxth	r3, r3
 800d004:	2b00      	cmp	r3, #0
 800d006:	d1c8      	bne.n	800cf9a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	2200      	movs	r2, #0
 800d010:	2140      	movs	r1, #64	@ 0x40
 800d012:	68f8      	ldr	r0, [r7, #12]
 800d014:	f000 ffb8 	bl	800df88 <UART_WaitOnFlagUntilTimeout>
 800d018:	4603      	mov	r3, r0
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d005      	beq.n	800d02a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2220      	movs	r2, #32
 800d022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d026:	2303      	movs	r3, #3
 800d028:	e006      	b.n	800d038 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2220      	movs	r2, #32
 800d02e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d032:	2300      	movs	r3, #0
 800d034:	e000      	b.n	800d038 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800d036:	2302      	movs	r3, #2
  }
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3720      	adds	r7, #32
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b0ae      	sub	sp, #184	@ 0xb8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	69db      	ldr	r3, [r3, #28]
 800d04e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	689b      	ldr	r3, [r3, #8]
 800d062:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d066:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d06a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d06e:	4013      	ands	r3, r2
 800d070:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800d074:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d11b      	bne.n	800d0b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d07c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d080:	f003 0320 	and.w	r3, r3, #32
 800d084:	2b00      	cmp	r3, #0
 800d086:	d015      	beq.n	800d0b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d088:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d08c:	f003 0320 	and.w	r3, r3, #32
 800d090:	2b00      	cmp	r3, #0
 800d092:	d105      	bne.n	800d0a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d009      	beq.n	800d0b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	f000 8297 	beq.w	800d5d8 <HAL_UART_IRQHandler+0x598>
      {
        huart->RxISR(huart);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	4798      	blx	r3
      }
      return;
 800d0b2:	e291      	b.n	800d5d8 <HAL_UART_IRQHandler+0x598>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d0b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f000 80fd 	beq.w	800d2b8 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d0be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d0c2:	4b7a      	ldr	r3, [pc, #488]	@ (800d2ac <HAL_UART_IRQHandler+0x26c>)
 800d0c4:	4013      	ands	r3, r2
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d106      	bne.n	800d0d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d0ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d0ce:	4b78      	ldr	r3, [pc, #480]	@ (800d2b0 <HAL_UART_IRQHandler+0x270>)
 800d0d0:	4013      	ands	r3, r2
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f000 80f0 	beq.w	800d2b8 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d0d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d0dc:	f003 0301 	and.w	r3, r3, #1
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d011      	beq.n	800d108 <HAL_UART_IRQHandler+0xc8>
 800d0e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d0e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d00b      	beq.n	800d108 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0fe:	f043 0201 	orr.w	r2, r3, #1
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d108:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d10c:	f003 0302 	and.w	r3, r3, #2
 800d110:	2b00      	cmp	r3, #0
 800d112:	d011      	beq.n	800d138 <HAL_UART_IRQHandler+0xf8>
 800d114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d118:	f003 0301 	and.w	r3, r3, #1
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00b      	beq.n	800d138 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2202      	movs	r2, #2
 800d126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d12e:	f043 0204 	orr.w	r2, r3, #4
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d138:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d13c:	f003 0304 	and.w	r3, r3, #4
 800d140:	2b00      	cmp	r3, #0
 800d142:	d011      	beq.n	800d168 <HAL_UART_IRQHandler+0x128>
 800d144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d148:	f003 0301 	and.w	r3, r3, #1
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d00b      	beq.n	800d168 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2204      	movs	r2, #4
 800d156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d15e:	f043 0202 	orr.w	r2, r3, #2
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d168:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d16c:	f003 0308 	and.w	r3, r3, #8
 800d170:	2b00      	cmp	r3, #0
 800d172:	d017      	beq.n	800d1a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d174:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d178:	f003 0320 	and.w	r3, r3, #32
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d105      	bne.n	800d18c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d180:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d184:	4b49      	ldr	r3, [pc, #292]	@ (800d2ac <HAL_UART_IRQHandler+0x26c>)
 800d186:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00b      	beq.n	800d1a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2208      	movs	r2, #8
 800d192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d19a:	f043 0208 	orr.w	r2, r3, #8
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d1a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d1a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d012      	beq.n	800d1d6 <HAL_UART_IRQHandler+0x196>
 800d1b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d1b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d00c      	beq.n	800d1d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d1c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1cc:	f043 0220 	orr.w	r2, r3, #32
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	f000 81fd 	beq.w	800d5dc <HAL_UART_IRQHandler+0x59c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d1e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d1e6:	f003 0320 	and.w	r3, r3, #32
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d013      	beq.n	800d216 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d1ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d1f2:	f003 0320 	and.w	r3, r3, #32
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d105      	bne.n	800d206 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d1fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d202:	2b00      	cmp	r3, #0
 800d204:	d007      	beq.n	800d216 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d003      	beq.n	800d216 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d21c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	689b      	ldr	r3, [r3, #8]
 800d226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d22a:	2b40      	cmp	r3, #64	@ 0x40
 800d22c:	d005      	beq.n	800d23a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d22e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d232:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d236:	2b00      	cmp	r3, #0
 800d238:	d02e      	beq.n	800d298 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 ff11 	bl	800e062 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	689b      	ldr	r3, [r3, #8]
 800d246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d24a:	2b40      	cmp	r3, #64	@ 0x40
 800d24c:	d120      	bne.n	800d290 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d254:	2b00      	cmp	r3, #0
 800d256:	d017      	beq.n	800d288 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d25e:	4a15      	ldr	r2, [pc, #84]	@ (800d2b4 <HAL_UART_IRQHandler+0x274>)
 800d260:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d268:	4618      	mov	r0, r3
 800d26a:	f7f6 fc7f 	bl	8003b6c <HAL_DMA_Abort_IT>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d019      	beq.n	800d2a8 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d27a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d27c:	687a      	ldr	r2, [r7, #4]
 800d27e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d282:	4610      	mov	r0, r2
 800d284:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d286:	e00f      	b.n	800d2a8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 f9bb 	bl	800d604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d28e:	e00b      	b.n	800d2a8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f000 f9b7 	bl	800d604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d296:	e007      	b.n	800d2a8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 f9b3 	bl	800d604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d2a6:	e199      	b.n	800d5dc <HAL_UART_IRQHandler+0x59c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2a8:	bf00      	nop
    return;
 800d2aa:	e197      	b.n	800d5dc <HAL_UART_IRQHandler+0x59c>
 800d2ac:	10000001 	.word	0x10000001
 800d2b0:	04000120 	.word	0x04000120
 800d2b4:	0800e12f 	.word	0x0800e12f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	f040 8142 	bne.w	800d546 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d2c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d2c6:	f003 0310 	and.w	r3, r3, #16
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	f000 813b 	beq.w	800d546 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d2d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d2d4:	f003 0310 	and.w	r3, r3, #16
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f000 8134 	beq.w	800d546 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2210      	movs	r2, #16
 800d2e4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	689b      	ldr	r3, [r3, #8]
 800d2ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2f0:	2b40      	cmp	r3, #64	@ 0x40
 800d2f2:	f040 80aa 	bne.w	800d44a <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d300:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800d304:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f000 8084 	beq.w	800d416 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d314:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800d318:	429a      	cmp	r2, r3
 800d31a:	d27c      	bcs.n	800d416 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800d322:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d32c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d32e:	2b81      	cmp	r3, #129	@ 0x81
 800d330:	d060      	beq.n	800d3f4 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d338:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d33a:	e853 3f00 	ldrex	r3, [r3]
 800d33e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d340:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d342:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d346:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	461a      	mov	r2, r3
 800d350:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d354:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d358:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d35a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d35c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d360:	e841 2300 	strex	r3, r2, [r1]
 800d364:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d366:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d1e2      	bne.n	800d332 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	3308      	adds	r3, #8
 800d372:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d374:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d376:	e853 3f00 	ldrex	r3, [r3]
 800d37a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d37c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d37e:	f023 0301 	bic.w	r3, r3, #1
 800d382:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	3308      	adds	r3, #8
 800d38c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d390:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d392:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d394:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d396:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d398:	e841 2300 	strex	r3, r2, [r1]
 800d39c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d39e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1e3      	bne.n	800d36c <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2220      	movs	r2, #32
 800d3a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3ba:	e853 3f00 	ldrex	r3, [r3]
 800d3be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d3c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3c2:	f023 0310 	bic.w	r3, r3, #16
 800d3c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d3d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d3d6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d3da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d3dc:	e841 2300 	strex	r3, r2, [r1]
 800d3e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d3e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1e4      	bne.n	800d3b2 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7f6 fb40 	bl	8003a74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2202      	movs	r2, #2
 800d3f8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d406:	b29b      	uxth	r3, r3
 800d408:	1ad3      	subs	r3, r2, r3
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	4619      	mov	r1, r3
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 f902 	bl	800d618 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d414:	e0e4      	b.n	800d5e0 <HAL_UART_IRQHandler+0x5a0>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d41c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800d420:	429a      	cmp	r2, r3
 800d422:	f040 80dd 	bne.w	800d5e0 <HAL_UART_IRQHandler+0x5a0>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d42c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d42e:	2b81      	cmp	r3, #129	@ 0x81
 800d430:	f040 80d6 	bne.w	800d5e0 <HAL_UART_IRQHandler+0x5a0>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2202      	movs	r2, #2
 800d438:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d440:	4619      	mov	r1, r3
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f000 f8e8 	bl	800d618 <HAL_UARTEx_RxEventCallback>
      return;
 800d448:	e0ca      	b.n	800d5e0 <HAL_UART_IRQHandler+0x5a0>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d456:	b29b      	uxth	r3, r3
 800d458:	1ad3      	subs	r3, r2, r3
 800d45a:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d464:	b29b      	uxth	r3, r3
 800d466:	2b00      	cmp	r3, #0
 800d468:	f000 80bc 	beq.w	800d5e4 <HAL_UART_IRQHandler+0x5a4>
          && (nb_rx_data > 0U))
 800d46c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800d470:	2b00      	cmp	r3, #0
 800d472:	f000 80b7 	beq.w	800d5e4 <HAL_UART_IRQHandler+0x5a4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47e:	e853 3f00 	ldrex	r3, [r3]
 800d482:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d486:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d48a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	461a      	mov	r2, r3
 800d494:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d498:	647b      	str	r3, [r7, #68]	@ 0x44
 800d49a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d49c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d49e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d4a0:	e841 2300 	strex	r3, r2, [r1]
 800d4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d4a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d1e4      	bne.n	800d476 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	3308      	adds	r3, #8
 800d4b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b6:	e853 3f00 	ldrex	r3, [r3]
 800d4ba:	623b      	str	r3, [r7, #32]
   return(result);
 800d4bc:	6a3b      	ldr	r3, [r7, #32]
 800d4be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d4c2:	f023 0301 	bic.w	r3, r3, #1
 800d4c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	3308      	adds	r3, #8
 800d4d0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d4d4:	633a      	str	r2, [r7, #48]	@ 0x30
 800d4d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4dc:	e841 2300 	strex	r3, r2, [r1]
 800d4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d1e1      	bne.n	800d4ac <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2220      	movs	r2, #32
 800d4ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	e853 3f00 	ldrex	r3, [r3]
 800d508:	60fb      	str	r3, [r7, #12]
   return(result);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f023 0310 	bic.w	r3, r3, #16
 800d510:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	461a      	mov	r2, r3
 800d51a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d51e:	61fb      	str	r3, [r7, #28]
 800d520:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d522:	69b9      	ldr	r1, [r7, #24]
 800d524:	69fa      	ldr	r2, [r7, #28]
 800d526:	e841 2300 	strex	r3, r2, [r1]
 800d52a:	617b      	str	r3, [r7, #20]
   return(result);
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d1e4      	bne.n	800d4fc <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2202      	movs	r2, #2
 800d536:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d538:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800d53c:	4619      	mov	r1, r3
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 f86a 	bl	800d618 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d544:	e04e      	b.n	800d5e4 <HAL_UART_IRQHandler+0x5a4>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d546:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d54a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d014      	beq.n	800d57c <HAL_UART_IRQHandler+0x53c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d552:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d105      	bne.n	800d56a <HAL_UART_IRQHandler+0x52a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d55e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d562:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d566:	2b00      	cmp	r3, #0
 800d568:	d008      	beq.n	800d57c <HAL_UART_IRQHandler+0x53c>
  {
    if (huart->TxISR != NULL)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d03a      	beq.n	800d5e8 <HAL_UART_IRQHandler+0x5a8>
    {
      huart->TxISR(huart);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	4798      	blx	r3
    }
    return;
 800d57a:	e035      	b.n	800d5e8 <HAL_UART_IRQHandler+0x5a8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d57c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d584:	2b00      	cmp	r3, #0
 800d586:	d009      	beq.n	800d59c <HAL_UART_IRQHandler+0x55c>
 800d588:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d58c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d590:	2b00      	cmp	r3, #0
 800d592:	d003      	beq.n	800d59c <HAL_UART_IRQHandler+0x55c>
  {
    UART_EndTransmit_IT(huart);
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 fddc 	bl	800e152 <UART_EndTransmit_IT>
    return;
 800d59a:	e026      	b.n	800d5ea <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d59c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d5a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d009      	beq.n	800d5bc <HAL_UART_IRQHandler+0x57c>
 800d5a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d5ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d003      	beq.n	800d5bc <HAL_UART_IRQHandler+0x57c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f000 fe01 	bl	800e1bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d5ba:	e016      	b.n	800d5ea <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d5bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d5c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d010      	beq.n	800d5ea <HAL_UART_IRQHandler+0x5aa>
 800d5c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	da0c      	bge.n	800d5ea <HAL_UART_IRQHandler+0x5aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 fde9 	bl	800e1a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d5d6:	e008      	b.n	800d5ea <HAL_UART_IRQHandler+0x5aa>
      return;
 800d5d8:	bf00      	nop
 800d5da:	e006      	b.n	800d5ea <HAL_UART_IRQHandler+0x5aa>
    return;
 800d5dc:	bf00      	nop
 800d5de:	e004      	b.n	800d5ea <HAL_UART_IRQHandler+0x5aa>
      return;
 800d5e0:	bf00      	nop
 800d5e2:	e002      	b.n	800d5ea <HAL_UART_IRQHandler+0x5aa>
      return;
 800d5e4:	bf00      	nop
 800d5e6:	e000      	b.n	800d5ea <HAL_UART_IRQHandler+0x5aa>
    return;
 800d5e8:	bf00      	nop
  }
}
 800d5ea:	37b8      	adds	r7, #184	@ 0xb8
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d5f8:	bf00      	nop
 800d5fa:	370c      	adds	r7, #12
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d60c:	bf00      	nop
 800d60e:	370c      	adds	r7, #12
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr

0800d618 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d618:	b480      	push	{r7}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	460b      	mov	r3, r1
 800d622:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d624:	bf00      	nop
 800d626:	370c      	adds	r7, #12
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d634:	b094      	sub	sp, #80	@ 0x50
 800d636:	af00      	add	r7, sp, #0
 800d638:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d63a:	2300      	movs	r3, #0
 800d63c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800d640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d642:	685a      	ldr	r2, [r3, #4]
 800d644:	4b19      	ldr	r3, [pc, #100]	@ (800d6ac <UART_SetConfig+0x7c>)
 800d646:	429a      	cmp	r2, r3
 800d648:	d904      	bls.n	800d654 <UART_SetConfig+0x24>
 800d64a:	f640 416a 	movw	r1, #3178	@ 0xc6a
 800d64e:	4818      	ldr	r0, [pc, #96]	@ (800d6b0 <UART_SetConfig+0x80>)
 800d650:	f7f3 fcce 	bl	8000ff0 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800d654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d65c:	d00d      	beq.n	800d67a <UART_SetConfig+0x4a>
 800d65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d660:	689b      	ldr	r3, [r3, #8]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d009      	beq.n	800d67a <UART_SetConfig+0x4a>
 800d666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d66e:	d004      	beq.n	800d67a <UART_SetConfig+0x4a>
 800d670:	f640 416b 	movw	r1, #3179	@ 0xc6b
 800d674:	480e      	ldr	r0, [pc, #56]	@ (800d6b0 <UART_SetConfig+0x80>)
 800d676:	f7f3 fcbb 	bl	8000ff0 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800d67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	4b0d      	ldr	r3, [pc, #52]	@ (800d6b4 <UART_SetConfig+0x84>)
 800d680:	429a      	cmp	r2, r3
 800d682:	d004      	beq.n	800d68e <UART_SetConfig+0x5e>
 800d684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	4b0b      	ldr	r3, [pc, #44]	@ (800d6b8 <UART_SetConfig+0x88>)
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d116      	bne.n	800d6bc <UART_SetConfig+0x8c>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800d68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d690:	68db      	ldr	r3, [r3, #12]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d038      	beq.n	800d708 <UART_SetConfig+0xd8>
 800d696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d69e:	d033      	beq.n	800d708 <UART_SetConfig+0xd8>
 800d6a0:	f640 416e 	movw	r1, #3182	@ 0xc6e
 800d6a4:	4802      	ldr	r0, [pc, #8]	@ (800d6b0 <UART_SetConfig+0x80>)
 800d6a6:	f7f3 fca3 	bl	8000ff0 <assert_failed>
 800d6aa:	e02d      	b.n	800d708 <UART_SetConfig+0xd8>
 800d6ac:	01312cff 	.word	0x01312cff
 800d6b0:	08010184 	.word	0x08010184
 800d6b4:	46002400 	.word	0x46002400
 800d6b8:	56002400 	.word	0x56002400
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800d6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6be:	68db      	ldr	r3, [r3, #12]
 800d6c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d6c4:	d012      	beq.n	800d6ec <UART_SetConfig+0xbc>
 800d6c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c8:	68db      	ldr	r3, [r3, #12]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00e      	beq.n	800d6ec <UART_SetConfig+0xbc>
 800d6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d6d6:	d009      	beq.n	800d6ec <UART_SetConfig+0xbc>
 800d6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d6e0:	d004      	beq.n	800d6ec <UART_SetConfig+0xbc>
 800d6e2:	f640 4172 	movw	r1, #3186	@ 0xc72
 800d6e6:	4885      	ldr	r0, [pc, #532]	@ (800d8fc <UART_SetConfig+0x2cc>)
 800d6e8:	f7f3 fc82 	bl	8000ff0 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800d6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ee:	6a1b      	ldr	r3, [r3, #32]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d009      	beq.n	800d708 <UART_SetConfig+0xd8>
 800d6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f6:	6a1b      	ldr	r3, [r3, #32]
 800d6f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d6fc:	d004      	beq.n	800d708 <UART_SetConfig+0xd8>
 800d6fe:	f640 4173 	movw	r1, #3187	@ 0xc73
 800d702:	487e      	ldr	r0, [pc, #504]	@ (800d8fc <UART_SetConfig+0x2cc>)
 800d704:	f7f3 fc74 	bl	8000ff0 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800d708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d70a:	691b      	ldr	r3, [r3, #16]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00e      	beq.n	800d72e <UART_SetConfig+0xfe>
 800d710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d718:	d009      	beq.n	800d72e <UART_SetConfig+0xfe>
 800d71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d71c:	691b      	ldr	r3, [r3, #16]
 800d71e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d722:	d004      	beq.n	800d72e <UART_SetConfig+0xfe>
 800d724:	f640 4176 	movw	r1, #3190	@ 0xc76
 800d728:	4874      	ldr	r0, [pc, #464]	@ (800d8fc <UART_SetConfig+0x2cc>)
 800d72a:	f7f3 fc61 	bl	8000ff0 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800d72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d730:	695b      	ldr	r3, [r3, #20]
 800d732:	f023 030c 	bic.w	r3, r3, #12
 800d736:	2b00      	cmp	r3, #0
 800d738:	d103      	bne.n	800d742 <UART_SetConfig+0x112>
 800d73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d73c:	695b      	ldr	r3, [r3, #20]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d104      	bne.n	800d74c <UART_SetConfig+0x11c>
 800d742:	f640 4177 	movw	r1, #3191	@ 0xc77
 800d746:	486d      	ldr	r0, [pc, #436]	@ (800d8fc <UART_SetConfig+0x2cc>)
 800d748:	f7f3 fc52 	bl	8000ff0 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800d74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d74e:	699b      	ldr	r3, [r3, #24]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d013      	beq.n	800d77c <UART_SetConfig+0x14c>
 800d754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d756:	699b      	ldr	r3, [r3, #24]
 800d758:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d75c:	d00e      	beq.n	800d77c <UART_SetConfig+0x14c>
 800d75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d760:	699b      	ldr	r3, [r3, #24]
 800d762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d766:	d009      	beq.n	800d77c <UART_SetConfig+0x14c>
 800d768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d76a:	699b      	ldr	r3, [r3, #24]
 800d76c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d770:	d004      	beq.n	800d77c <UART_SetConfig+0x14c>
 800d772:	f640 4178 	movw	r1, #3192	@ 0xc78
 800d776:	4861      	ldr	r0, [pc, #388]	@ (800d8fc <UART_SetConfig+0x2cc>)
 800d778:	f7f3 fc3a 	bl	8000ff0 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800d77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d77e:	69db      	ldr	r3, [r3, #28]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d009      	beq.n	800d798 <UART_SetConfig+0x168>
 800d784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d786:	69db      	ldr	r3, [r3, #28]
 800d788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d78c:	d004      	beq.n	800d798 <UART_SetConfig+0x168>
 800d78e:	f640 4179 	movw	r1, #3193	@ 0xc79
 800d792:	485a      	ldr	r0, [pc, #360]	@ (800d8fc <UART_SetConfig+0x2cc>)
 800d794:	f7f3 fc2c 	bl	8000ff0 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 800d798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d79a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d030      	beq.n	800d802 <UART_SetConfig+0x1d2>
 800d7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d02c      	beq.n	800d802 <UART_SetConfig+0x1d2>
 800d7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ac:	2b02      	cmp	r3, #2
 800d7ae:	d028      	beq.n	800d802 <UART_SetConfig+0x1d2>
 800d7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7b4:	2b03      	cmp	r3, #3
 800d7b6:	d024      	beq.n	800d802 <UART_SetConfig+0x1d2>
 800d7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7bc:	2b04      	cmp	r3, #4
 800d7be:	d020      	beq.n	800d802 <UART_SetConfig+0x1d2>
 800d7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7c4:	2b05      	cmp	r3, #5
 800d7c6:	d01c      	beq.n	800d802 <UART_SetConfig+0x1d2>
 800d7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7cc:	2b06      	cmp	r3, #6
 800d7ce:	d018      	beq.n	800d802 <UART_SetConfig+0x1d2>
 800d7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7d4:	2b07      	cmp	r3, #7
 800d7d6:	d014      	beq.n	800d802 <UART_SetConfig+0x1d2>
 800d7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7dc:	2b08      	cmp	r3, #8
 800d7de:	d010      	beq.n	800d802 <UART_SetConfig+0x1d2>
 800d7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7e4:	2b09      	cmp	r3, #9
 800d7e6:	d00c      	beq.n	800d802 <UART_SetConfig+0x1d2>
 800d7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ec:	2b0a      	cmp	r3, #10
 800d7ee:	d008      	beq.n	800d802 <UART_SetConfig+0x1d2>
 800d7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7f4:	2b0b      	cmp	r3, #11
 800d7f6:	d004      	beq.n	800d802 <UART_SetConfig+0x1d2>
 800d7f8:	f640 417a 	movw	r1, #3194	@ 0xc7a
 800d7fc:	483f      	ldr	r0, [pc, #252]	@ (800d8fc <UART_SetConfig+0x2cc>)
 800d7fe:	f7f3 fbf7 	bl	8000ff0 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d804:	689a      	ldr	r2, [r3, #8]
 800d806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d808:	691b      	ldr	r3, [r3, #16]
 800d80a:	431a      	orrs	r2, r3
 800d80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d80e:	695b      	ldr	r3, [r3, #20]
 800d810:	431a      	orrs	r2, r3
 800d812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d814:	69db      	ldr	r3, [r3, #28]
 800d816:	4313      	orrs	r3, r2
 800d818:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4937      	ldr	r1, [pc, #220]	@ (800d900 <UART_SetConfig+0x2d0>)
 800d822:	4019      	ands	r1, r3
 800d824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d82a:	430b      	orrs	r3, r1
 800d82c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d83a:	68d9      	ldr	r1, [r3, #12]
 800d83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	ea40 0301 	orr.w	r3, r0, r1
 800d844:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d848:	699b      	ldr	r3, [r3, #24]
 800d84a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d84c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	4b2c      	ldr	r3, [pc, #176]	@ (800d904 <UART_SetConfig+0x2d4>)
 800d852:	429a      	cmp	r2, r3
 800d854:	d009      	beq.n	800d86a <UART_SetConfig+0x23a>
 800d856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	4b2b      	ldr	r3, [pc, #172]	@ (800d908 <UART_SetConfig+0x2d8>)
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d004      	beq.n	800d86a <UART_SetConfig+0x23a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d862:	6a1a      	ldr	r2, [r3, #32]
 800d864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d866:	4313      	orrs	r3, r2
 800d868:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	689b      	ldr	r3, [r3, #8]
 800d870:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d874:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d87e:	430b      	orrs	r3, r1
 800d880:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d888:	f023 000f 	bic.w	r0, r3, #15
 800d88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d88e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	ea40 0301 	orr.w	r3, r0, r1
 800d898:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89c:	681a      	ldr	r2, [r3, #0]
 800d89e:	4b1b      	ldr	r3, [pc, #108]	@ (800d90c <UART_SetConfig+0x2dc>)
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d102      	bne.n	800d8aa <UART_SetConfig+0x27a>
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8a8:	e03c      	b.n	800d924 <UART_SetConfig+0x2f4>
 800d8aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	4b18      	ldr	r3, [pc, #96]	@ (800d910 <UART_SetConfig+0x2e0>)
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d102      	bne.n	800d8ba <UART_SetConfig+0x28a>
 800d8b4:	2302      	movs	r3, #2
 800d8b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8b8:	e034      	b.n	800d924 <UART_SetConfig+0x2f4>
 800d8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	4b15      	ldr	r3, [pc, #84]	@ (800d914 <UART_SetConfig+0x2e4>)
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d102      	bne.n	800d8ca <UART_SetConfig+0x29a>
 800d8c4:	2304      	movs	r3, #4
 800d8c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8c8:	e02c      	b.n	800d924 <UART_SetConfig+0x2f4>
 800d8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8cc:	681a      	ldr	r2, [r3, #0]
 800d8ce:	4b12      	ldr	r3, [pc, #72]	@ (800d918 <UART_SetConfig+0x2e8>)
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d102      	bne.n	800d8da <UART_SetConfig+0x2aa>
 800d8d4:	2308      	movs	r3, #8
 800d8d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8d8:	e024      	b.n	800d924 <UART_SetConfig+0x2f4>
 800d8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	4b0f      	ldr	r3, [pc, #60]	@ (800d91c <UART_SetConfig+0x2ec>)
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d102      	bne.n	800d8ea <UART_SetConfig+0x2ba>
 800d8e4:	2310      	movs	r3, #16
 800d8e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8e8:	e01c      	b.n	800d924 <UART_SetConfig+0x2f4>
 800d8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ec:	681a      	ldr	r2, [r3, #0]
 800d8ee:	4b05      	ldr	r3, [pc, #20]	@ (800d904 <UART_SetConfig+0x2d4>)
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d115      	bne.n	800d920 <UART_SetConfig+0x2f0>
 800d8f4:	2320      	movs	r3, #32
 800d8f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8f8:	e014      	b.n	800d924 <UART_SetConfig+0x2f4>
 800d8fa:	bf00      	nop
 800d8fc:	08010184 	.word	0x08010184
 800d900:	cfff69f3 	.word	0xcfff69f3
 800d904:	46002400 	.word	0x46002400
 800d908:	56002400 	.word	0x56002400
 800d90c:	40013800 	.word	0x40013800
 800d910:	40004400 	.word	0x40004400
 800d914:	40004800 	.word	0x40004800
 800d918:	40004c00 	.word	0x40004c00
 800d91c:	40005000 	.word	0x40005000
 800d920:	2300      	movs	r3, #0
 800d922:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d926:	681a      	ldr	r2, [r3, #0]
 800d928:	4b7f      	ldr	r3, [pc, #508]	@ (800db28 <UART_SetConfig+0x4f8>)
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d004      	beq.n	800d938 <UART_SetConfig+0x308>
 800d92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d930:	681a      	ldr	r2, [r3, #0]
 800d932:	4b7e      	ldr	r3, [pc, #504]	@ (800db2c <UART_SetConfig+0x4fc>)
 800d934:	429a      	cmp	r2, r3
 800d936:	d172      	bne.n	800da1e <UART_SetConfig+0x3ee>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d93a:	2200      	movs	r2, #0
 800d93c:	623b      	str	r3, [r7, #32]
 800d93e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d940:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d944:	f7fb fdfa 	bl	800953c <HAL_RCCEx_GetPeriphCLKFreq>
 800d948:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d94a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f000 80d6 	beq.w	800dafe <UART_SetConfig+0x4ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d956:	4a76      	ldr	r2, [pc, #472]	@ (800db30 <UART_SetConfig+0x500>)
 800d958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d95c:	461a      	mov	r2, r3
 800d95e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d960:	fbb3 f3f2 	udiv	r3, r3, r2
 800d964:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d968:	685a      	ldr	r2, [r3, #4]
 800d96a:	4613      	mov	r3, r2
 800d96c:	005b      	lsls	r3, r3, #1
 800d96e:	4413      	add	r3, r2
 800d970:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d972:	429a      	cmp	r2, r3
 800d974:	d305      	bcc.n	800d982 <UART_SetConfig+0x352>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d97c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d97e:	429a      	cmp	r2, r3
 800d980:	d903      	bls.n	800d98a <UART_SetConfig+0x35a>
      {
        ret = HAL_ERROR;
 800d982:	2301      	movs	r3, #1
 800d984:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d988:	e048      	b.n	800da1c <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d98a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d98c:	2200      	movs	r2, #0
 800d98e:	61bb      	str	r3, [r7, #24]
 800d990:	61fa      	str	r2, [r7, #28]
 800d992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d996:	4a66      	ldr	r2, [pc, #408]	@ (800db30 <UART_SetConfig+0x500>)
 800d998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d99c:	b29b      	uxth	r3, r3
 800d99e:	2200      	movs	r2, #0
 800d9a0:	613b      	str	r3, [r7, #16]
 800d9a2:	617a      	str	r2, [r7, #20]
 800d9a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d9a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d9ac:	f7f2 fd6a 	bl	8000484 <__aeabi_uldivmod>
 800d9b0:	4602      	mov	r2, r0
 800d9b2:	460b      	mov	r3, r1
 800d9b4:	4610      	mov	r0, r2
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	f04f 0200 	mov.w	r2, #0
 800d9bc:	f04f 0300 	mov.w	r3, #0
 800d9c0:	020b      	lsls	r3, r1, #8
 800d9c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d9c6:	0202      	lsls	r2, r0, #8
 800d9c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d9ca:	6849      	ldr	r1, [r1, #4]
 800d9cc:	0849      	lsrs	r1, r1, #1
 800d9ce:	2000      	movs	r0, #0
 800d9d0:	460c      	mov	r4, r1
 800d9d2:	4605      	mov	r5, r0
 800d9d4:	eb12 0804 	adds.w	r8, r2, r4
 800d9d8:	eb43 0905 	adc.w	r9, r3, r5
 800d9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	60bb      	str	r3, [r7, #8]
 800d9e4:	60fa      	str	r2, [r7, #12]
 800d9e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d9ea:	4640      	mov	r0, r8
 800d9ec:	4649      	mov	r1, r9
 800d9ee:	f7f2 fd49 	bl	8000484 <__aeabi_uldivmod>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d9fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800da00:	d308      	bcc.n	800da14 <UART_SetConfig+0x3e4>
 800da02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da08:	d204      	bcs.n	800da14 <UART_SetConfig+0x3e4>
        {
          huart->Instance->BRR = usartdiv;
 800da0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da10:	60da      	str	r2, [r3, #12]
 800da12:	e003      	b.n	800da1c <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 800da14:	2301      	movs	r3, #1
 800da16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800da1a:	e070      	b.n	800dafe <UART_SetConfig+0x4ce>
 800da1c:	e06f      	b.n	800dafe <UART_SetConfig+0x4ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800da1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da20:	69db      	ldr	r3, [r3, #28]
 800da22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800da26:	d13c      	bne.n	800daa2 <UART_SetConfig+0x472>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800da28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da2a:	2200      	movs	r2, #0
 800da2c:	603b      	str	r3, [r7, #0]
 800da2e:	607a      	str	r2, [r7, #4]
 800da30:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da34:	f7fb fd82 	bl	800953c <HAL_RCCEx_GetPeriphCLKFreq>
 800da38:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800da3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d05e      	beq.n	800dafe <UART_SetConfig+0x4ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da44:	4a3a      	ldr	r2, [pc, #232]	@ (800db30 <UART_SetConfig+0x500>)
 800da46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da4a:	461a      	mov	r2, r3
 800da4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800da52:	005a      	lsls	r2, r3, #1
 800da54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da56:	685b      	ldr	r3, [r3, #4]
 800da58:	085b      	lsrs	r3, r3, #1
 800da5a:	441a      	add	r2, r3
 800da5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	fbb2 f3f3 	udiv	r3, r2, r3
 800da64:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da68:	2b0f      	cmp	r3, #15
 800da6a:	d916      	bls.n	800da9a <UART_SetConfig+0x46a>
 800da6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da72:	d212      	bcs.n	800da9a <UART_SetConfig+0x46a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da76:	b29b      	uxth	r3, r3
 800da78:	f023 030f 	bic.w	r3, r3, #15
 800da7c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da80:	085b      	lsrs	r3, r3, #1
 800da82:	b29b      	uxth	r3, r3
 800da84:	f003 0307 	and.w	r3, r3, #7
 800da88:	b29a      	uxth	r2, r3
 800da8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800da8c:	4313      	orrs	r3, r2
 800da8e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800da90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800da96:	60da      	str	r2, [r3, #12]
 800da98:	e031      	b.n	800dafe <UART_SetConfig+0x4ce>
      }
      else
      {
        ret = HAL_ERROR;
 800da9a:	2301      	movs	r3, #1
 800da9c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800daa0:	e02d      	b.n	800dafe <UART_SetConfig+0x4ce>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800daa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800daa4:	2200      	movs	r2, #0
 800daa6:	469a      	mov	sl, r3
 800daa8:	4693      	mov	fp, r2
 800daaa:	4650      	mov	r0, sl
 800daac:	4659      	mov	r1, fp
 800daae:	f7fb fd45 	bl	800953c <HAL_RCCEx_GetPeriphCLKFreq>
 800dab2:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800dab4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d021      	beq.n	800dafe <UART_SetConfig+0x4ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800daba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dabc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dabe:	4a1c      	ldr	r2, [pc, #112]	@ (800db30 <UART_SetConfig+0x500>)
 800dac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dac4:	461a      	mov	r2, r3
 800dac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dac8:	fbb3 f2f2 	udiv	r2, r3, r2
 800dacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	085b      	lsrs	r3, r3, #1
 800dad2:	441a      	add	r2, r3
 800dad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dae0:	2b0f      	cmp	r3, #15
 800dae2:	d909      	bls.n	800daf8 <UART_SetConfig+0x4c8>
 800dae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800daea:	d205      	bcs.n	800daf8 <UART_SetConfig+0x4c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800daec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daee:	b29a      	uxth	r2, r3
 800daf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	60da      	str	r2, [r3, #12]
 800daf6:	e002      	b.n	800dafe <UART_SetConfig+0x4ce>
      }
      else
      {
        ret = HAL_ERROR;
 800daf8:	2301      	movs	r3, #1
 800dafa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dafe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db00:	2201      	movs	r2, #1
 800db02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800db06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db08:	2201      	movs	r2, #1
 800db0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db10:	2200      	movs	r2, #0
 800db12:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800db14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db16:	2200      	movs	r2, #0
 800db18:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800db1a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3750      	adds	r7, #80	@ 0x50
 800db22:	46bd      	mov	sp, r7
 800db24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800db28:	46002400 	.word	0x46002400
 800db2c:	56002400 	.word	0x56002400
 800db30:	080102d4 	.word	0x080102d4

0800db34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db40:	2bff      	cmp	r3, #255	@ 0xff
 800db42:	d904      	bls.n	800db4e <UART_AdvFeatureConfig+0x1a>
 800db44:	f640 41ff 	movw	r1, #3327	@ 0xcff
 800db48:	4884      	ldr	r0, [pc, #528]	@ (800dd5c <UART_AdvFeatureConfig+0x228>)
 800db4a:	f7f3 fa51 	bl	8000ff0 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db52:	f003 0308 	and.w	r3, r3, #8
 800db56:	2b00      	cmp	r3, #0
 800db58:	d018      	beq.n	800db8c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d009      	beq.n	800db76 <UART_AdvFeatureConfig+0x42>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800db6a:	d004      	beq.n	800db76 <UART_AdvFeatureConfig+0x42>
 800db6c:	f640 5104 	movw	r1, #3332	@ 0xd04
 800db70:	487a      	ldr	r0, [pc, #488]	@ (800dd5c <UART_AdvFeatureConfig+0x228>)
 800db72:	f7f3 fa3d 	bl	8000ff0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	430a      	orrs	r2, r1
 800db8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db90:	f003 0301 	and.w	r3, r3, #1
 800db94:	2b00      	cmp	r3, #0
 800db96:	d018      	beq.n	800dbca <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d009      	beq.n	800dbb4 <UART_AdvFeatureConfig+0x80>
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dba4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dba8:	d004      	beq.n	800dbb4 <UART_AdvFeatureConfig+0x80>
 800dbaa:	f640 510b 	movw	r1, #3339	@ 0xd0b
 800dbae:	486b      	ldr	r0, [pc, #428]	@ (800dd5c <UART_AdvFeatureConfig+0x228>)
 800dbb0:	f7f3 fa1e 	bl	8000ff0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	430a      	orrs	r2, r1
 800dbc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbce:	f003 0302 	and.w	r3, r3, #2
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d018      	beq.n	800dc08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d009      	beq.n	800dbf2 <UART_AdvFeatureConfig+0xbe>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbe6:	d004      	beq.n	800dbf2 <UART_AdvFeatureConfig+0xbe>
 800dbe8:	f640 5112 	movw	r1, #3346	@ 0xd12
 800dbec:	485b      	ldr	r0, [pc, #364]	@ (800dd5c <UART_AdvFeatureConfig+0x228>)
 800dbee:	f7f3 f9ff 	bl	8000ff0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	430a      	orrs	r2, r1
 800dc06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc0c:	f003 0304 	and.w	r3, r3, #4
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d018      	beq.n	800dc46 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d009      	beq.n	800dc30 <UART_AdvFeatureConfig+0xfc>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dc24:	d004      	beq.n	800dc30 <UART_AdvFeatureConfig+0xfc>
 800dc26:	f640 5119 	movw	r1, #3353	@ 0xd19
 800dc2a:	484c      	ldr	r0, [pc, #304]	@ (800dd5c <UART_AdvFeatureConfig+0x228>)
 800dc2c:	f7f3 f9e0 	bl	8000ff0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	430a      	orrs	r2, r1
 800dc44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc4a:	f003 0310 	and.w	r3, r3, #16
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d018      	beq.n	800dc84 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d009      	beq.n	800dc6e <UART_AdvFeatureConfig+0x13a>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc62:	d004      	beq.n	800dc6e <UART_AdvFeatureConfig+0x13a>
 800dc64:	f44f 6152 	mov.w	r1, #3360	@ 0xd20
 800dc68:	483c      	ldr	r0, [pc, #240]	@ (800dd5c <UART_AdvFeatureConfig+0x228>)
 800dc6a:	f7f3 f9c1 	bl	8000ff0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	430a      	orrs	r2, r1
 800dc82:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc88:	f003 0320 	and.w	r3, r3, #32
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d018      	beq.n	800dcc2 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d009      	beq.n	800dcac <UART_AdvFeatureConfig+0x178>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dca0:	d004      	beq.n	800dcac <UART_AdvFeatureConfig+0x178>
 800dca2:	f640 5128 	movw	r1, #3368	@ 0xd28
 800dca6:	482d      	ldr	r0, [pc, #180]	@ (800dd5c <UART_AdvFeatureConfig+0x228>)
 800dca8:	f7f3 f9a2 	bl	8000ff0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	689b      	ldr	r3, [r3, #8]
 800dcb2:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	430a      	orrs	r2, r1
 800dcc0:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	f000 808d 	beq.w	800ddea <UART_AdvFeatureConfig+0x2b6>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4a22      	ldr	r2, [pc, #136]	@ (800dd60 <UART_AdvFeatureConfig+0x22c>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d031      	beq.n	800dd3e <UART_AdvFeatureConfig+0x20a>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	4a21      	ldr	r2, [pc, #132]	@ (800dd64 <UART_AdvFeatureConfig+0x230>)
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d02c      	beq.n	800dd3e <UART_AdvFeatureConfig+0x20a>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4a1f      	ldr	r2, [pc, #124]	@ (800dd68 <UART_AdvFeatureConfig+0x234>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d027      	beq.n	800dd3e <UART_AdvFeatureConfig+0x20a>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4a1e      	ldr	r2, [pc, #120]	@ (800dd6c <UART_AdvFeatureConfig+0x238>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d022      	beq.n	800dd3e <UART_AdvFeatureConfig+0x20a>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a1c      	ldr	r2, [pc, #112]	@ (800dd70 <UART_AdvFeatureConfig+0x23c>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d01d      	beq.n	800dd3e <UART_AdvFeatureConfig+0x20a>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4a1b      	ldr	r2, [pc, #108]	@ (800dd74 <UART_AdvFeatureConfig+0x240>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d018      	beq.n	800dd3e <UART_AdvFeatureConfig+0x20a>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a19      	ldr	r2, [pc, #100]	@ (800dd78 <UART_AdvFeatureConfig+0x244>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d013      	beq.n	800dd3e <UART_AdvFeatureConfig+0x20a>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	4a18      	ldr	r2, [pc, #96]	@ (800dd7c <UART_AdvFeatureConfig+0x248>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d00e      	beq.n	800dd3e <UART_AdvFeatureConfig+0x20a>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4a16      	ldr	r2, [pc, #88]	@ (800dd80 <UART_AdvFeatureConfig+0x24c>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d009      	beq.n	800dd3e <UART_AdvFeatureConfig+0x20a>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
 800dd32:	d004      	beq.n	800dd3e <UART_AdvFeatureConfig+0x20a>
 800dd34:	f44f 6153 	mov.w	r1, #3376	@ 0xd30
 800dd38:	4808      	ldr	r0, [pc, #32]	@ (800dd5c <UART_AdvFeatureConfig+0x228>)
 800dd3a:	f7f3 f959 	bl	8000ff0 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d01e      	beq.n	800dd84 <UART_AdvFeatureConfig+0x250>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd4e:	d019      	beq.n	800dd84 <UART_AdvFeatureConfig+0x250>
 800dd50:	f640 5131 	movw	r1, #3377	@ 0xd31
 800dd54:	4801      	ldr	r0, [pc, #4]	@ (800dd5c <UART_AdvFeatureConfig+0x228>)
 800dd56:	f7f3 f94b 	bl	8000ff0 <assert_failed>
 800dd5a:	e013      	b.n	800dd84 <UART_AdvFeatureConfig+0x250>
 800dd5c:	08010184 	.word	0x08010184
 800dd60:	40013800 	.word	0x40013800
 800dd64:	50013800 	.word	0x50013800
 800dd68:	40004400 	.word	0x40004400
 800dd6c:	50004400 	.word	0x50004400
 800dd70:	40004800 	.word	0x40004800
 800dd74:	50004800 	.word	0x50004800
 800dd78:	40004c00 	.word	0x40004c00
 800dd7c:	50004c00 	.word	0x50004c00
 800dd80:	40005000 	.word	0x40005000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	430a      	orrs	r2, r1
 800dd98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dda2:	d122      	bne.n	800ddea <UART_AdvFeatureConfig+0x2b6>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d013      	beq.n	800ddd4 <UART_AdvFeatureConfig+0x2a0>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ddb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ddb4:	d00e      	beq.n	800ddd4 <UART_AdvFeatureConfig+0x2a0>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ddba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ddbe:	d009      	beq.n	800ddd4 <UART_AdvFeatureConfig+0x2a0>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ddc4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ddc8:	d004      	beq.n	800ddd4 <UART_AdvFeatureConfig+0x2a0>
 800ddca:	f640 5136 	movw	r1, #3382	@ 0xd36
 800ddce:	4818      	ldr	r0, [pc, #96]	@ (800de30 <UART_AdvFeatureConfig+0x2fc>)
 800ddd0:	f7f3 f90e 	bl	8000ff0 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	430a      	orrs	r2, r1
 800dde8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d018      	beq.n	800de28 <UART_AdvFeatureConfig+0x2f4>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d009      	beq.n	800de12 <UART_AdvFeatureConfig+0x2de>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de02:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800de06:	d004      	beq.n	800de12 <UART_AdvFeatureConfig+0x2de>
 800de08:	f640 513e 	movw	r1, #3390	@ 0xd3e
 800de0c:	4808      	ldr	r0, [pc, #32]	@ (800de30 <UART_AdvFeatureConfig+0x2fc>)
 800de0e:	f7f3 f8ef 	bl	8000ff0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	430a      	orrs	r2, r1
 800de26:	605a      	str	r2, [r3, #4]
  }
}
 800de28:	bf00      	nop
 800de2a:	3708      	adds	r7, #8
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	08010184 	.word	0x08010184

0800de34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b098      	sub	sp, #96	@ 0x60
 800de38:	af02      	add	r7, sp, #8
 800de3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2200      	movs	r2, #0
 800de40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800de44:	f7f3 fdd6 	bl	80019f4 <HAL_GetTick>
 800de48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f003 0308 	and.w	r3, r3, #8
 800de54:	2b08      	cmp	r3, #8
 800de56:	d12f      	bne.n	800deb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de60:	2200      	movs	r2, #0
 800de62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 f88e 	bl	800df88 <UART_WaitOnFlagUntilTimeout>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d022      	beq.n	800deb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de7a:	e853 3f00 	ldrex	r3, [r3]
 800de7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800de80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de86:	653b      	str	r3, [r7, #80]	@ 0x50
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	461a      	mov	r2, r3
 800de8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de90:	647b      	str	r3, [r7, #68]	@ 0x44
 800de92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800de96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800de98:	e841 2300 	strex	r3, r2, [r1]
 800de9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800de9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d1e6      	bne.n	800de72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2220      	movs	r2, #32
 800dea8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2200      	movs	r2, #0
 800deb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800deb4:	2303      	movs	r3, #3
 800deb6:	e063      	b.n	800df80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f003 0304 	and.w	r3, r3, #4
 800dec2:	2b04      	cmp	r3, #4
 800dec4:	d149      	bne.n	800df5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dec6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800deca:	9300      	str	r3, [sp, #0]
 800decc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dece:	2200      	movs	r2, #0
 800ded0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 f857 	bl	800df88 <UART_WaitOnFlagUntilTimeout>
 800deda:	4603      	mov	r3, r0
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d03c      	beq.n	800df5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee8:	e853 3f00 	ldrex	r3, [r3]
 800deec:	623b      	str	r3, [r7, #32]
   return(result);
 800deee:	6a3b      	ldr	r3, [r7, #32]
 800def0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800def4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	461a      	mov	r2, r3
 800defc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800defe:	633b      	str	r3, [r7, #48]	@ 0x30
 800df00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800df04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df06:	e841 2300 	strex	r3, r2, [r1]
 800df0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800df0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1e6      	bne.n	800dee0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	3308      	adds	r3, #8
 800df18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	e853 3f00 	ldrex	r3, [r3]
 800df20:	60fb      	str	r3, [r7, #12]
   return(result);
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f023 0301 	bic.w	r3, r3, #1
 800df28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	3308      	adds	r3, #8
 800df30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df32:	61fa      	str	r2, [r7, #28]
 800df34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df36:	69b9      	ldr	r1, [r7, #24]
 800df38:	69fa      	ldr	r2, [r7, #28]
 800df3a:	e841 2300 	strex	r3, r2, [r1]
 800df3e:	617b      	str	r3, [r7, #20]
   return(result);
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d1e5      	bne.n	800df12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2220      	movs	r2, #32
 800df4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2200      	movs	r2, #0
 800df52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800df56:	2303      	movs	r3, #3
 800df58:	e012      	b.n	800df80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2220      	movs	r2, #32
 800df5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2220      	movs	r2, #32
 800df66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2200      	movs	r2, #0
 800df6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2200      	movs	r2, #0
 800df74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2200      	movs	r2, #0
 800df7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800df7e:	2300      	movs	r3, #0
}
 800df80:	4618      	mov	r0, r3
 800df82:	3758      	adds	r7, #88	@ 0x58
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	603b      	str	r3, [r7, #0]
 800df94:	4613      	mov	r3, r2
 800df96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df98:	e04f      	b.n	800e03a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df9a:	69bb      	ldr	r3, [r7, #24]
 800df9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfa0:	d04b      	beq.n	800e03a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dfa2:	f7f3 fd27 	bl	80019f4 <HAL_GetTick>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	1ad3      	subs	r3, r2, r3
 800dfac:	69ba      	ldr	r2, [r7, #24]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d302      	bcc.n	800dfb8 <UART_WaitOnFlagUntilTimeout+0x30>
 800dfb2:	69bb      	ldr	r3, [r7, #24]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d101      	bne.n	800dfbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dfb8:	2303      	movs	r3, #3
 800dfba:	e04e      	b.n	800e05a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f003 0304 	and.w	r3, r3, #4
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d037      	beq.n	800e03a <UART_WaitOnFlagUntilTimeout+0xb2>
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	2b80      	cmp	r3, #128	@ 0x80
 800dfce:	d034      	beq.n	800e03a <UART_WaitOnFlagUntilTimeout+0xb2>
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	2b40      	cmp	r3, #64	@ 0x40
 800dfd4:	d031      	beq.n	800e03a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	69db      	ldr	r3, [r3, #28]
 800dfdc:	f003 0308 	and.w	r3, r3, #8
 800dfe0:	2b08      	cmp	r3, #8
 800dfe2:	d110      	bne.n	800e006 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	2208      	movs	r2, #8
 800dfea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dfec:	68f8      	ldr	r0, [r7, #12]
 800dfee:	f000 f838 	bl	800e062 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2208      	movs	r2, #8
 800dff6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2200      	movs	r2, #0
 800dffe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e002:	2301      	movs	r3, #1
 800e004:	e029      	b.n	800e05a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	69db      	ldr	r3, [r3, #28]
 800e00c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e010:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e014:	d111      	bne.n	800e03a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e01e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e020:	68f8      	ldr	r0, [r7, #12]
 800e022:	f000 f81e 	bl	800e062 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2220      	movs	r2, #32
 800e02a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2200      	movs	r2, #0
 800e032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e036:	2303      	movs	r3, #3
 800e038:	e00f      	b.n	800e05a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	69da      	ldr	r2, [r3, #28]
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	4013      	ands	r3, r2
 800e044:	68ba      	ldr	r2, [r7, #8]
 800e046:	429a      	cmp	r2, r3
 800e048:	bf0c      	ite	eq
 800e04a:	2301      	moveq	r3, #1
 800e04c:	2300      	movne	r3, #0
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	461a      	mov	r2, r3
 800e052:	79fb      	ldrb	r3, [r7, #7]
 800e054:	429a      	cmp	r2, r3
 800e056:	d0a0      	beq.n	800df9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e062:	b480      	push	{r7}
 800e064:	b095      	sub	sp, #84	@ 0x54
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e072:	e853 3f00 	ldrex	r3, [r3]
 800e076:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e07a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e07e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	461a      	mov	r2, r3
 800e086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e088:	643b      	str	r3, [r7, #64]	@ 0x40
 800e08a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e08c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e08e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e090:	e841 2300 	strex	r3, r2, [r1]
 800e094:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d1e6      	bne.n	800e06a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	3308      	adds	r3, #8
 800e0a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0a4:	6a3b      	ldr	r3, [r7, #32]
 800e0a6:	e853 3f00 	ldrex	r3, [r3]
 800e0aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e0b2:	f023 0301 	bic.w	r3, r3, #1
 800e0b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	3308      	adds	r3, #8
 800e0be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e0c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e0c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e0c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e0c8:	e841 2300 	strex	r3, r2, [r1]
 800e0cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d1e3      	bne.n	800e09c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d118      	bne.n	800e10e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	e853 3f00 	ldrex	r3, [r3]
 800e0e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	f023 0310 	bic.w	r3, r3, #16
 800e0f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0fa:	61bb      	str	r3, [r7, #24]
 800e0fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0fe:	6979      	ldr	r1, [r7, #20]
 800e100:	69ba      	ldr	r2, [r7, #24]
 800e102:	e841 2300 	strex	r3, r2, [r1]
 800e106:	613b      	str	r3, [r7, #16]
   return(result);
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d1e6      	bne.n	800e0dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2220      	movs	r2, #32
 800e112:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2200      	movs	r2, #0
 800e120:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e122:	bf00      	nop
 800e124:	3754      	adds	r7, #84	@ 0x54
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr

0800e12e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b084      	sub	sp, #16
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e13a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2200      	movs	r2, #0
 800e140:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e144:	68f8      	ldr	r0, [r7, #12]
 800e146:	f7ff fa5d 	bl	800d604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e14a:	bf00      	nop
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}

0800e152 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e152:	b580      	push	{r7, lr}
 800e154:	b088      	sub	sp, #32
 800e156:	af00      	add	r7, sp, #0
 800e158:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	e853 3f00 	ldrex	r3, [r3]
 800e166:	60bb      	str	r3, [r7, #8]
   return(result);
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e16e:	61fb      	str	r3, [r7, #28]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	461a      	mov	r2, r3
 800e176:	69fb      	ldr	r3, [r7, #28]
 800e178:	61bb      	str	r3, [r7, #24]
 800e17a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e17c:	6979      	ldr	r1, [r7, #20]
 800e17e:	69ba      	ldr	r2, [r7, #24]
 800e180:	e841 2300 	strex	r3, r2, [r1]
 800e184:	613b      	str	r3, [r7, #16]
   return(result);
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1e6      	bne.n	800e15a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2220      	movs	r2, #32
 800e190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2200      	movs	r2, #0
 800e198:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f7ff fa28 	bl	800d5f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1a0:	bf00      	nop
 800e1a2:	3720      	adds	r7, #32
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e1b0:	bf00      	nop
 800e1b2:	370c      	adds	r7, #12
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr

0800e1bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b083      	sub	sp, #12
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e1c4:	bf00      	nop
 800e1c6:	370c      	adds	r7, #12
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4a38      	ldr	r2, [pc, #224]	@ (800e2c0 <HAL_UARTEx_DisableFifoMode+0xf0>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d03b      	beq.n	800e25a <HAL_UARTEx_DisableFifoMode+0x8a>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4a37      	ldr	r2, [pc, #220]	@ (800e2c4 <HAL_UARTEx_DisableFifoMode+0xf4>)
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	d036      	beq.n	800e25a <HAL_UARTEx_DisableFifoMode+0x8a>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4a35      	ldr	r2, [pc, #212]	@ (800e2c8 <HAL_UARTEx_DisableFifoMode+0xf8>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d031      	beq.n	800e25a <HAL_UARTEx_DisableFifoMode+0x8a>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	4a34      	ldr	r2, [pc, #208]	@ (800e2cc <HAL_UARTEx_DisableFifoMode+0xfc>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d02c      	beq.n	800e25a <HAL_UARTEx_DisableFifoMode+0x8a>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4a32      	ldr	r2, [pc, #200]	@ (800e2d0 <HAL_UARTEx_DisableFifoMode+0x100>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d027      	beq.n	800e25a <HAL_UARTEx_DisableFifoMode+0x8a>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	4a31      	ldr	r2, [pc, #196]	@ (800e2d4 <HAL_UARTEx_DisableFifoMode+0x104>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d022      	beq.n	800e25a <HAL_UARTEx_DisableFifoMode+0x8a>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4a2f      	ldr	r2, [pc, #188]	@ (800e2d8 <HAL_UARTEx_DisableFifoMode+0x108>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d01d      	beq.n	800e25a <HAL_UARTEx_DisableFifoMode+0x8a>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	4a2e      	ldr	r2, [pc, #184]	@ (800e2dc <HAL_UARTEx_DisableFifoMode+0x10c>)
 800e224:	4293      	cmp	r3, r2
 800e226:	d018      	beq.n	800e25a <HAL_UARTEx_DisableFifoMode+0x8a>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4a2c      	ldr	r2, [pc, #176]	@ (800e2e0 <HAL_UARTEx_DisableFifoMode+0x110>)
 800e22e:	4293      	cmp	r3, r2
 800e230:	d013      	beq.n	800e25a <HAL_UARTEx_DisableFifoMode+0x8a>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
 800e23a:	d00e      	beq.n	800e25a <HAL_UARTEx_DisableFifoMode+0x8a>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4a28      	ldr	r2, [pc, #160]	@ (800e2e4 <HAL_UARTEx_DisableFifoMode+0x114>)
 800e242:	4293      	cmp	r3, r2
 800e244:	d009      	beq.n	800e25a <HAL_UARTEx_DisableFifoMode+0x8a>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4a27      	ldr	r2, [pc, #156]	@ (800e2e8 <HAL_UARTEx_DisableFifoMode+0x118>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d004      	beq.n	800e25a <HAL_UARTEx_DisableFifoMode+0x8a>
 800e250:	f240 2121 	movw	r1, #545	@ 0x221
 800e254:	4825      	ldr	r0, [pc, #148]	@ (800e2ec <HAL_UARTEx_DisableFifoMode+0x11c>)
 800e256:	f7f2 fecb 	bl	8000ff0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e260:	2b01      	cmp	r3, #1
 800e262:	d101      	bne.n	800e268 <HAL_UARTEx_DisableFifoMode+0x98>
 800e264:	2302      	movs	r3, #2
 800e266:	e027      	b.n	800e2b8 <HAL_UARTEx_DisableFifoMode+0xe8>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2201      	movs	r2, #1
 800e26c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2224      	movs	r2, #36	@ 0x24
 800e274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f022 0201 	bic.w	r2, r2, #1
 800e28e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e296:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	68fa      	ldr	r2, [r7, #12]
 800e2a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2220      	movs	r2, #32
 800e2aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e2b6:	2300      	movs	r3, #0
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3710      	adds	r7, #16
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	40013800 	.word	0x40013800
 800e2c4:	50013800 	.word	0x50013800
 800e2c8:	40004400 	.word	0x40004400
 800e2cc:	50004400 	.word	0x50004400
 800e2d0:	40004800 	.word	0x40004800
 800e2d4:	50004800 	.word	0x50004800
 800e2d8:	40004c00 	.word	0x40004c00
 800e2dc:	50004c00 	.word	0x50004c00
 800e2e0:	40005000 	.word	0x40005000
 800e2e4:	46002400 	.word	0x46002400
 800e2e8:	56002400 	.word	0x56002400
 800e2ec:	080101c0 	.word	0x080101c0

0800e2f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b084      	sub	sp, #16
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	4a4a      	ldr	r2, [pc, #296]	@ (800e428 <HAL_UARTEx_SetTxFifoThreshold+0x138>)
 800e300:	4293      	cmp	r3, r2
 800e302:	d03b      	beq.n	800e37c <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4a48      	ldr	r2, [pc, #288]	@ (800e42c <HAL_UARTEx_SetTxFifoThreshold+0x13c>)
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d036      	beq.n	800e37c <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	4a47      	ldr	r2, [pc, #284]	@ (800e430 <HAL_UARTEx_SetTxFifoThreshold+0x140>)
 800e314:	4293      	cmp	r3, r2
 800e316:	d031      	beq.n	800e37c <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a45      	ldr	r2, [pc, #276]	@ (800e434 <HAL_UARTEx_SetTxFifoThreshold+0x144>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d02c      	beq.n	800e37c <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4a44      	ldr	r2, [pc, #272]	@ (800e438 <HAL_UARTEx_SetTxFifoThreshold+0x148>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d027      	beq.n	800e37c <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4a42      	ldr	r2, [pc, #264]	@ (800e43c <HAL_UARTEx_SetTxFifoThreshold+0x14c>)
 800e332:	4293      	cmp	r3, r2
 800e334:	d022      	beq.n	800e37c <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4a41      	ldr	r2, [pc, #260]	@ (800e440 <HAL_UARTEx_SetTxFifoThreshold+0x150>)
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d01d      	beq.n	800e37c <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4a3f      	ldr	r2, [pc, #252]	@ (800e444 <HAL_UARTEx_SetTxFifoThreshold+0x154>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d018      	beq.n	800e37c <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4a3e      	ldr	r2, [pc, #248]	@ (800e448 <HAL_UARTEx_SetTxFifoThreshold+0x158>)
 800e350:	4293      	cmp	r3, r2
 800e352:	d013      	beq.n	800e37c <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
 800e35c:	d00e      	beq.n	800e37c <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	4a3a      	ldr	r2, [pc, #232]	@ (800e44c <HAL_UARTEx_SetTxFifoThreshold+0x15c>)
 800e364:	4293      	cmp	r3, r2
 800e366:	d009      	beq.n	800e37c <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a38      	ldr	r2, [pc, #224]	@ (800e450 <HAL_UARTEx_SetTxFifoThreshold+0x160>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d004      	beq.n	800e37c <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e372:	f240 214f 	movw	r1, #591	@ 0x24f
 800e376:	4837      	ldr	r0, [pc, #220]	@ (800e454 <HAL_UARTEx_SetTxFifoThreshold+0x164>)
 800e378:	f7f2 fe3a 	bl	8000ff0 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d018      	beq.n	800e3b4 <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e388:	d014      	beq.n	800e3b4 <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e390:	d010      	beq.n	800e3b4 <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800e398:	d00c      	beq.n	800e3b4 <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e3a0:	d008      	beq.n	800e3b4 <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 800e3a8:	d004      	beq.n	800e3b4 <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 800e3aa:	f44f 7114 	mov.w	r1, #592	@ 0x250
 800e3ae:	4829      	ldr	r0, [pc, #164]	@ (800e454 <HAL_UARTEx_SetTxFifoThreshold+0x164>)
 800e3b0:	f7f2 fe1e 	bl	8000ff0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e3ba:	2b01      	cmp	r3, #1
 800e3bc:	d101      	bne.n	800e3c2 <HAL_UARTEx_SetTxFifoThreshold+0xd2>
 800e3be:	2302      	movs	r3, #2
 800e3c0:	e02d      	b.n	800e41e <HAL_UARTEx_SetTxFifoThreshold+0x12e>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2224      	movs	r2, #36	@ 0x24
 800e3ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	681a      	ldr	r2, [r3, #0]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f022 0201 	bic.w	r2, r2, #1
 800e3e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	689b      	ldr	r3, [r3, #8]
 800e3f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	683a      	ldr	r2, [r7, #0]
 800e3fa:	430a      	orrs	r2, r1
 800e3fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f000 f8de 	bl	800e5c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	68fa      	ldr	r2, [r7, #12]
 800e40a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2220      	movs	r2, #32
 800e410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2200      	movs	r2, #0
 800e418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e41c:	2300      	movs	r3, #0
}
 800e41e:	4618      	mov	r0, r3
 800e420:	3710      	adds	r7, #16
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop
 800e428:	40013800 	.word	0x40013800
 800e42c:	50013800 	.word	0x50013800
 800e430:	40004400 	.word	0x40004400
 800e434:	50004400 	.word	0x50004400
 800e438:	40004800 	.word	0x40004800
 800e43c:	50004800 	.word	0x50004800
 800e440:	40004c00 	.word	0x40004c00
 800e444:	50004c00 	.word	0x50004c00
 800e448:	40005000 	.word	0x40005000
 800e44c:	46002400 	.word	0x46002400
 800e450:	56002400 	.word	0x56002400
 800e454:	080101c0 	.word	0x080101c0

0800e458 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	4a4a      	ldr	r2, [pc, #296]	@ (800e590 <HAL_UARTEx_SetRxFifoThreshold+0x138>)
 800e468:	4293      	cmp	r3, r2
 800e46a:	d03b      	beq.n	800e4e4 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4a48      	ldr	r2, [pc, #288]	@ (800e594 <HAL_UARTEx_SetRxFifoThreshold+0x13c>)
 800e472:	4293      	cmp	r3, r2
 800e474:	d036      	beq.n	800e4e4 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	4a47      	ldr	r2, [pc, #284]	@ (800e598 <HAL_UARTEx_SetRxFifoThreshold+0x140>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d031      	beq.n	800e4e4 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	4a45      	ldr	r2, [pc, #276]	@ (800e59c <HAL_UARTEx_SetRxFifoThreshold+0x144>)
 800e486:	4293      	cmp	r3, r2
 800e488:	d02c      	beq.n	800e4e4 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	4a44      	ldr	r2, [pc, #272]	@ (800e5a0 <HAL_UARTEx_SetRxFifoThreshold+0x148>)
 800e490:	4293      	cmp	r3, r2
 800e492:	d027      	beq.n	800e4e4 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4a42      	ldr	r2, [pc, #264]	@ (800e5a4 <HAL_UARTEx_SetRxFifoThreshold+0x14c>)
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d022      	beq.n	800e4e4 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	4a41      	ldr	r2, [pc, #260]	@ (800e5a8 <HAL_UARTEx_SetRxFifoThreshold+0x150>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d01d      	beq.n	800e4e4 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4a3f      	ldr	r2, [pc, #252]	@ (800e5ac <HAL_UARTEx_SetRxFifoThreshold+0x154>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d018      	beq.n	800e4e4 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	4a3e      	ldr	r2, [pc, #248]	@ (800e5b0 <HAL_UARTEx_SetRxFifoThreshold+0x158>)
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d013      	beq.n	800e4e4 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
 800e4c4:	d00e      	beq.n	800e4e4 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4a3a      	ldr	r2, [pc, #232]	@ (800e5b4 <HAL_UARTEx_SetRxFifoThreshold+0x15c>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d009      	beq.n	800e4e4 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	4a38      	ldr	r2, [pc, #224]	@ (800e5b8 <HAL_UARTEx_SetRxFifoThreshold+0x160>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d004      	beq.n	800e4e4 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e4da:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800e4de:	4837      	ldr	r0, [pc, #220]	@ (800e5bc <HAL_UARTEx_SetRxFifoThreshold+0x164>)
 800e4e0:	f7f2 fd86 	bl	8000ff0 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d018      	beq.n	800e51c <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e4f0:	d014      	beq.n	800e51c <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e4f8:	d010      	beq.n	800e51c <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 800e500:	d00c      	beq.n	800e51c <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e508:	d008      	beq.n	800e51c <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 800e510:	d004      	beq.n	800e51c <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 800e512:	f240 2181 	movw	r1, #641	@ 0x281
 800e516:	4829      	ldr	r0, [pc, #164]	@ (800e5bc <HAL_UARTEx_SetRxFifoThreshold+0x164>)
 800e518:	f7f2 fd6a 	bl	8000ff0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e522:	2b01      	cmp	r3, #1
 800e524:	d101      	bne.n	800e52a <HAL_UARTEx_SetRxFifoThreshold+0xd2>
 800e526:	2302      	movs	r3, #2
 800e528:	e02d      	b.n	800e586 <HAL_UARTEx_SetRxFifoThreshold+0x12e>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2201      	movs	r2, #1
 800e52e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2224      	movs	r2, #36	@ 0x24
 800e536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	681a      	ldr	r2, [r3, #0]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	f022 0201 	bic.w	r2, r2, #1
 800e550:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	689b      	ldr	r3, [r3, #8]
 800e558:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	683a      	ldr	r2, [r7, #0]
 800e562:	430a      	orrs	r2, r1
 800e564:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f000 f82a 	bl	800e5c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	68fa      	ldr	r2, [r7, #12]
 800e572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2220      	movs	r2, #32
 800e578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2200      	movs	r2, #0
 800e580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e584:	2300      	movs	r3, #0
}
 800e586:	4618      	mov	r0, r3
 800e588:	3710      	adds	r7, #16
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	40013800 	.word	0x40013800
 800e594:	50013800 	.word	0x50013800
 800e598:	40004400 	.word	0x40004400
 800e59c:	50004400 	.word	0x50004400
 800e5a0:	40004800 	.word	0x40004800
 800e5a4:	50004800 	.word	0x50004800
 800e5a8:	40004c00 	.word	0x40004c00
 800e5ac:	50004c00 	.word	0x50004c00
 800e5b0:	40005000 	.word	0x40005000
 800e5b4:	46002400 	.word	0x46002400
 800e5b8:	56002400 	.word	0x56002400
 800e5bc:	080101c0 	.word	0x080101c0

0800e5c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d108      	bne.n	800e5e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e5e0:	e031      	b.n	800e646 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e5e2:	2308      	movs	r3, #8
 800e5e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e5e6:	2308      	movs	r3, #8
 800e5e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	689b      	ldr	r3, [r3, #8]
 800e5f0:	0e5b      	lsrs	r3, r3, #25
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	f003 0307 	and.w	r3, r3, #7
 800e5f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	689b      	ldr	r3, [r3, #8]
 800e600:	0f5b      	lsrs	r3, r3, #29
 800e602:	b2db      	uxtb	r3, r3
 800e604:	f003 0307 	and.w	r3, r3, #7
 800e608:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e60a:	7bbb      	ldrb	r3, [r7, #14]
 800e60c:	7b3a      	ldrb	r2, [r7, #12]
 800e60e:	4911      	ldr	r1, [pc, #68]	@ (800e654 <UARTEx_SetNbDataToProcess+0x94>)
 800e610:	5c8a      	ldrb	r2, [r1, r2]
 800e612:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e616:	7b3a      	ldrb	r2, [r7, #12]
 800e618:	490f      	ldr	r1, [pc, #60]	@ (800e658 <UARTEx_SetNbDataToProcess+0x98>)
 800e61a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e61c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e620:	b29a      	uxth	r2, r3
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e628:	7bfb      	ldrb	r3, [r7, #15]
 800e62a:	7b7a      	ldrb	r2, [r7, #13]
 800e62c:	4909      	ldr	r1, [pc, #36]	@ (800e654 <UARTEx_SetNbDataToProcess+0x94>)
 800e62e:	5c8a      	ldrb	r2, [r1, r2]
 800e630:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e634:	7b7a      	ldrb	r2, [r7, #13]
 800e636:	4908      	ldr	r1, [pc, #32]	@ (800e658 <UARTEx_SetNbDataToProcess+0x98>)
 800e638:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e63a:	fb93 f3f2 	sdiv	r3, r3, r2
 800e63e:	b29a      	uxth	r2, r3
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e646:	bf00      	nop
 800e648:	3714      	adds	r7, #20
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr
 800e652:	bf00      	nop
 800e654:	080102ec 	.word	0x080102ec
 800e658:	080102f4 	.word	0x080102f4

0800e65c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b096      	sub	sp, #88	@ 0x58
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e664:	f3ef 8310 	mrs	r3, PRIMASK
 800e668:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 800e66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800e66c:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800e66e:	b672      	cpsid	i
#endif
    return(int_posture);
 800e670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800e672:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d005      	beq.n	800e688 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	334c      	adds	r3, #76	@ 0x4c
 800e680:	4618      	mov	r0, r3
 800e682:	f000 f95f 	bl	800e944 <_tx_timer_system_deactivate>
 800e686:	e002      	b.n	800e68e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800e68e:	4b6c      	ldr	r3, [pc, #432]	@ (800e840 <_tx_thread_system_resume+0x1e4>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	3b01      	subs	r3, #1
 800e694:	4a6a      	ldr	r2, [pc, #424]	@ (800e840 <_tx_thread_system_resume+0x1e4>)
 800e696:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	f040 8083 	bne.w	800e7a8 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	f000 8097 	beq.w	800e7da <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d172      	bne.n	800e79a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6be:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800e6c0:	4a60      	ldr	r2, [pc, #384]	@ (800e844 <_tx_thread_system_resume+0x1e8>)
 800e6c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800e6ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d154      	bne.n	800e77a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800e6d0:	495c      	ldr	r1, [pc, #368]	@ (800e844 <_tx_thread_system_resume+0x1e8>)
 800e6d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	687a      	ldr	r2, [r7, #4]
 800e6e4:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e6ee:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800e6f0:	4b55      	ldr	r3, [pc, #340]	@ (800e848 <_tx_thread_system_resume+0x1ec>)
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	4a53      	ldr	r2, [pc, #332]	@ (800e848 <_tx_thread_system_resume+0x1ec>)
 800e6fa:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800e6fc:	4b53      	ldr	r3, [pc, #332]	@ (800e84c <_tx_thread_system_resume+0x1f0>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e702:	429a      	cmp	r2, r3
 800e704:	d269      	bcs.n	800e7da <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800e706:	4a51      	ldr	r2, [pc, #324]	@ (800e84c <_tx_thread_system_resume+0x1f0>)
 800e708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e70a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800e70c:	4b50      	ldr	r3, [pc, #320]	@ (800e850 <_tx_thread_system_resume+0x1f4>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800e712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e714:	2b00      	cmp	r3, #0
 800e716:	d103      	bne.n	800e720 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800e718:	4a4d      	ldr	r2, [pc, #308]	@ (800e850 <_tx_thread_system_resume+0x1f4>)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6013      	str	r3, [r2, #0]
 800e71e:	e05c      	b.n	800e7da <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800e720:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e724:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e726:	429a      	cmp	r2, r3
 800e728:	d257      	bcs.n	800e7da <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800e72a:	4a49      	ldr	r2, [pc, #292]	@ (800e850 <_tx_thread_system_resume+0x1f4>)
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6013      	str	r3, [r2, #0]
 800e730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e736:	f383 8810 	msr	PRIMASK, r3
}
 800e73a:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e73c:	4b40      	ldr	r3, [pc, #256]	@ (800e840 <_tx_thread_system_resume+0x1e4>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800e742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e744:	2b00      	cmp	r3, #0
 800e746:	d174      	bne.n	800e832 <_tx_thread_system_resume+0x1d6>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e748:	4b42      	ldr	r3, [pc, #264]	@ (800e854 <_tx_thread_system_resume+0x1f8>)
 800e74a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e74e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e750:	f3ef 8305 	mrs	r3, IPSR
 800e754:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800e756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (_tx_ipsr_get() == 0)
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d10c      	bne.n	800e776 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e75c:	f3ef 8310 	mrs	r3, PRIMASK
 800e760:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800e762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
        interrupt_save = __get_interrupt_posture();
 800e764:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e766:	b662      	cpsie	i
}
 800e768:	bf00      	nop
 800e76a:	6a3b      	ldr	r3, [r7, #32]
 800e76c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	f383 8810 	msr	PRIMASK, r3
}
 800e774:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800e776:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800e778:	e05b      	b.n	800e832 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800e77a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e77c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e77e:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800e780:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800e786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e790:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e796:	621a      	str	r2, [r3, #32]
 800e798:	e01f      	b.n	800e7da <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2200      	movs	r2, #0
 800e79e:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2203      	movs	r2, #3
 800e7a4:	631a      	str	r2, [r3, #48]	@ 0x30
 800e7a6:	e018      	b.n	800e7da <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7ac:	2b01      	cmp	r3, #1
 800e7ae:	d014      	beq.n	800e7da <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7b4:	2b02      	cmp	r3, #2
 800e7b6:	d010      	beq.n	800e7da <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d106      	bne.n	800e7ce <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	631a      	str	r2, [r3, #48]	@ 0x30
 800e7cc:	e005      	b.n	800e7da <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2203      	movs	r2, #3
 800e7d8:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800e7da:	4b1f      	ldr	r3, [pc, #124]	@ (800e858 <_tx_thread_system_resume+0x1fc>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e7e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7e2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	f383 8810 	msr	PRIMASK, r3
}
 800e7ea:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800e7ec:	4b18      	ldr	r3, [pc, #96]	@ (800e850 <_tx_thread_system_resume+0x1f4>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d020      	beq.n	800e838 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e7f6:	4b12      	ldr	r3, [pc, #72]	@ (800e840 <_tx_thread_system_resume+0x1e4>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800e7fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d11a      	bne.n	800e838 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e802:	4b14      	ldr	r3, [pc, #80]	@ (800e854 <_tx_thread_system_resume+0x1f8>)
 800e804:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e808:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e80a:	f3ef 8305 	mrs	r3, IPSR
 800e80e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e810:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800e812:	2b00      	cmp	r3, #0
 800e814:	d10f      	bne.n	800e836 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e816:	f3ef 8310 	mrs	r3, PRIMASK
 800e81a:	613b      	str	r3, [r7, #16]
    return(posture);
 800e81c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800e81e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e820:	b662      	cpsie	i
}
 800e822:	bf00      	nop
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	f383 8810 	msr	PRIMASK, r3
}
 800e82e:	bf00      	nop
}
 800e830:	e001      	b.n	800e836 <_tx_thread_system_resume+0x1da>
                                return;
 800e832:	bf00      	nop
 800e834:	e000      	b.n	800e838 <_tx_thread_system_resume+0x1dc>
 800e836:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800e838:	3758      	adds	r7, #88	@ 0x58
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
 800e83e:	bf00      	nop
 800e840:	2000052c 	.word	0x2000052c
 800e844:	200004ac 	.word	0x200004ac
 800e848:	200004a4 	.word	0x200004a4
 800e84c:	200004a8 	.word	0x200004a8
 800e850:	200004a0 	.word	0x200004a0
 800e854:	e000ed04 	.word	0xe000ed04
 800e858:	2000049c 	.word	0x2000049c

0800e85c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b087      	sub	sp, #28
 800e860:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800e862:	4b21      	ldr	r3, [pc, #132]	@ (800e8e8 <_tx_thread_time_slice+0x8c>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e868:	f3ef 8310 	mrs	r3, PRIMASK
 800e86c:	60fb      	str	r3, [r7, #12]
    return(posture);
 800e86e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800e870:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e872:	b672      	cpsid	i
    return(int_posture);
 800e874:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800e876:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800e878:	4b1c      	ldr	r3, [pc, #112]	@ (800e8ec <_tx_thread_time_slice+0x90>)
 800e87a:	2200      	movs	r2, #0
 800e87c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d024      	beq.n	800e8ce <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d120      	bne.n	800e8ce <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	69da      	ldr	r2, [r3, #28]
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	699b      	ldr	r3, [r3, #24]
 800e898:	4a15      	ldr	r2, [pc, #84]	@ (800e8f0 <_tx_thread_time_slice+0x94>)
 800e89a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	6a1b      	ldr	r3, [r3, #32]
 800e8a0:	697a      	ldr	r2, [r7, #20]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d013      	beq.n	800e8ce <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d10d      	bne.n	800e8ce <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8b6:	697a      	ldr	r2, [r7, #20]
 800e8b8:	6a12      	ldr	r2, [r2, #32]
 800e8ba:	490e      	ldr	r1, [pc, #56]	@ (800e8f4 <_tx_thread_time_slice+0x98>)
 800e8bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800e8c0:	4b0d      	ldr	r3, [pc, #52]	@ (800e8f8 <_tx_thread_time_slice+0x9c>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	4a0b      	ldr	r2, [pc, #44]	@ (800e8f4 <_tx_thread_time_slice+0x98>)
 800e8c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8ca:	4a0c      	ldr	r2, [pc, #48]	@ (800e8fc <_tx_thread_time_slice+0xa0>)
 800e8cc:	6013      	str	r3, [r2, #0]
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f383 8810 	msr	PRIMASK, r3
}
 800e8d8:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800e8da:	bf00      	nop
 800e8dc:	371c      	adds	r7, #28
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e4:	4770      	bx	lr
 800e8e6:	bf00      	nop
 800e8e8:	2000049c 	.word	0x2000049c
 800e8ec:	20000534 	.word	0x20000534
 800e8f0:	200005f8 	.word	0x200005f8
 800e8f4:	200004ac 	.word	0x200004ac
 800e8f8:	200004a8 	.word	0x200004a8
 800e8fc:	200004a0 	.word	0x200004a0

0800e900 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b084      	sub	sp, #16
 800e904:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e906:	f3ef 8310 	mrs	r3, PRIMASK
 800e90a:	607b      	str	r3, [r7, #4]
    return(posture);
 800e90c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800e90e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e910:	b672      	cpsid	i
    return(int_posture);
 800e912:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800e914:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800e916:	4b09      	ldr	r3, [pc, #36]	@ (800e93c <_tx_timer_expiration_process+0x3c>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	3301      	adds	r3, #1
 800e91c:	4a07      	ldr	r2, [pc, #28]	@ (800e93c <_tx_timer_expiration_process+0x3c>)
 800e91e:	6013      	str	r3, [r2, #0]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	f383 8810 	msr	PRIMASK, r3
}
 800e92a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800e92c:	4804      	ldr	r0, [pc, #16]	@ (800e940 <_tx_timer_expiration_process+0x40>)
 800e92e:	f7ff fe95 	bl	800e65c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800e932:	bf00      	nop
 800e934:	3710      	adds	r7, #16
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	2000052c 	.word	0x2000052c
 800e940:	20000548 	.word	0x20000548

0800e944 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800e944:	b480      	push	{r7}
 800e946:	b087      	sub	sp, #28
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	699b      	ldr	r3, [r3, #24]
 800e950:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d026      	beq.n	800e9a6 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	691b      	ldr	r3, [r3, #16]
 800e95c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	429a      	cmp	r2, r3
 800e964:	d108      	bne.n	800e978 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	429a      	cmp	r2, r3
 800e96e:	d117      	bne.n	800e9a0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	2200      	movs	r2, #0
 800e974:	601a      	str	r2, [r3, #0]
 800e976:	e013      	b.n	800e9a0 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	695b      	ldr	r3, [r3, #20]
 800e97c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	68fa      	ldr	r2, [r7, #12]
 800e982:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	693a      	ldr	r2, [r7, #16]
 800e988:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	429a      	cmp	r2, r3
 800e992:	d105      	bne.n	800e9a0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	697a      	ldr	r2, [r7, #20]
 800e998:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	693a      	ldr	r2, [r7, #16]
 800e99e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	619a      	str	r2, [r3, #24]
    }
}
 800e9a6:	bf00      	nop
 800e9a8:	371c      	adds	r7, #28
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr
	...

0800e9b4 <sbrk_aligned>:
 800e9b4:	b570      	push	{r4, r5, r6, lr}
 800e9b6:	4e0f      	ldr	r6, [pc, #60]	@ (800e9f4 <sbrk_aligned+0x40>)
 800e9b8:	460c      	mov	r4, r1
 800e9ba:	4605      	mov	r5, r0
 800e9bc:	6831      	ldr	r1, [r6, #0]
 800e9be:	b911      	cbnz	r1, 800e9c6 <sbrk_aligned+0x12>
 800e9c0:	f000 fb3a 	bl	800f038 <_sbrk_r>
 800e9c4:	6030      	str	r0, [r6, #0]
 800e9c6:	4621      	mov	r1, r4
 800e9c8:	4628      	mov	r0, r5
 800e9ca:	f000 fb35 	bl	800f038 <_sbrk_r>
 800e9ce:	1c43      	adds	r3, r0, #1
 800e9d0:	d103      	bne.n	800e9da <sbrk_aligned+0x26>
 800e9d2:	f04f 34ff 	mov.w	r4, #4294967295
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	bd70      	pop	{r4, r5, r6, pc}
 800e9da:	1cc4      	adds	r4, r0, #3
 800e9dc:	f024 0403 	bic.w	r4, r4, #3
 800e9e0:	42a0      	cmp	r0, r4
 800e9e2:	d0f8      	beq.n	800e9d6 <sbrk_aligned+0x22>
 800e9e4:	1a21      	subs	r1, r4, r0
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	f000 fb26 	bl	800f038 <_sbrk_r>
 800e9ec:	3001      	adds	r0, #1
 800e9ee:	d1f2      	bne.n	800e9d6 <sbrk_aligned+0x22>
 800e9f0:	e7ef      	b.n	800e9d2 <sbrk_aligned+0x1e>
 800e9f2:	bf00      	nop
 800e9f4:	200005fc 	.word	0x200005fc

0800e9f8 <_malloc_r>:
 800e9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9fc:	1ccd      	adds	r5, r1, #3
 800e9fe:	4606      	mov	r6, r0
 800ea00:	f025 0503 	bic.w	r5, r5, #3
 800ea04:	3508      	adds	r5, #8
 800ea06:	2d0c      	cmp	r5, #12
 800ea08:	bf38      	it	cc
 800ea0a:	250c      	movcc	r5, #12
 800ea0c:	2d00      	cmp	r5, #0
 800ea0e:	db01      	blt.n	800ea14 <_malloc_r+0x1c>
 800ea10:	42a9      	cmp	r1, r5
 800ea12:	d904      	bls.n	800ea1e <_malloc_r+0x26>
 800ea14:	230c      	movs	r3, #12
 800ea16:	6033      	str	r3, [r6, #0]
 800ea18:	2000      	movs	r0, #0
 800ea1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eaf4 <_malloc_r+0xfc>
 800ea22:	f000 f869 	bl	800eaf8 <__malloc_lock>
 800ea26:	f8d8 3000 	ldr.w	r3, [r8]
 800ea2a:	461c      	mov	r4, r3
 800ea2c:	bb44      	cbnz	r4, 800ea80 <_malloc_r+0x88>
 800ea2e:	4629      	mov	r1, r5
 800ea30:	4630      	mov	r0, r6
 800ea32:	f7ff ffbf 	bl	800e9b4 <sbrk_aligned>
 800ea36:	1c43      	adds	r3, r0, #1
 800ea38:	4604      	mov	r4, r0
 800ea3a:	d158      	bne.n	800eaee <_malloc_r+0xf6>
 800ea3c:	f8d8 4000 	ldr.w	r4, [r8]
 800ea40:	4627      	mov	r7, r4
 800ea42:	2f00      	cmp	r7, #0
 800ea44:	d143      	bne.n	800eace <_malloc_r+0xd6>
 800ea46:	2c00      	cmp	r4, #0
 800ea48:	d04b      	beq.n	800eae2 <_malloc_r+0xea>
 800ea4a:	6823      	ldr	r3, [r4, #0]
 800ea4c:	4639      	mov	r1, r7
 800ea4e:	4630      	mov	r0, r6
 800ea50:	eb04 0903 	add.w	r9, r4, r3
 800ea54:	f000 faf0 	bl	800f038 <_sbrk_r>
 800ea58:	4581      	cmp	r9, r0
 800ea5a:	d142      	bne.n	800eae2 <_malloc_r+0xea>
 800ea5c:	6821      	ldr	r1, [r4, #0]
 800ea5e:	4630      	mov	r0, r6
 800ea60:	1a6d      	subs	r5, r5, r1
 800ea62:	4629      	mov	r1, r5
 800ea64:	f7ff ffa6 	bl	800e9b4 <sbrk_aligned>
 800ea68:	3001      	adds	r0, #1
 800ea6a:	d03a      	beq.n	800eae2 <_malloc_r+0xea>
 800ea6c:	6823      	ldr	r3, [r4, #0]
 800ea6e:	442b      	add	r3, r5
 800ea70:	6023      	str	r3, [r4, #0]
 800ea72:	f8d8 3000 	ldr.w	r3, [r8]
 800ea76:	685a      	ldr	r2, [r3, #4]
 800ea78:	bb62      	cbnz	r2, 800ead4 <_malloc_r+0xdc>
 800ea7a:	f8c8 7000 	str.w	r7, [r8]
 800ea7e:	e00f      	b.n	800eaa0 <_malloc_r+0xa8>
 800ea80:	6822      	ldr	r2, [r4, #0]
 800ea82:	1b52      	subs	r2, r2, r5
 800ea84:	d420      	bmi.n	800eac8 <_malloc_r+0xd0>
 800ea86:	2a0b      	cmp	r2, #11
 800ea88:	d917      	bls.n	800eaba <_malloc_r+0xc2>
 800ea8a:	1961      	adds	r1, r4, r5
 800ea8c:	42a3      	cmp	r3, r4
 800ea8e:	6025      	str	r5, [r4, #0]
 800ea90:	bf18      	it	ne
 800ea92:	6059      	strne	r1, [r3, #4]
 800ea94:	6863      	ldr	r3, [r4, #4]
 800ea96:	bf08      	it	eq
 800ea98:	f8c8 1000 	streq.w	r1, [r8]
 800ea9c:	5162      	str	r2, [r4, r5]
 800ea9e:	604b      	str	r3, [r1, #4]
 800eaa0:	4630      	mov	r0, r6
 800eaa2:	f000 f82f 	bl	800eb04 <__malloc_unlock>
 800eaa6:	f104 000b 	add.w	r0, r4, #11
 800eaaa:	1d23      	adds	r3, r4, #4
 800eaac:	f020 0007 	bic.w	r0, r0, #7
 800eab0:	1ac2      	subs	r2, r0, r3
 800eab2:	bf1c      	itt	ne
 800eab4:	1a1b      	subne	r3, r3, r0
 800eab6:	50a3      	strne	r3, [r4, r2]
 800eab8:	e7af      	b.n	800ea1a <_malloc_r+0x22>
 800eaba:	6862      	ldr	r2, [r4, #4]
 800eabc:	42a3      	cmp	r3, r4
 800eabe:	bf0c      	ite	eq
 800eac0:	f8c8 2000 	streq.w	r2, [r8]
 800eac4:	605a      	strne	r2, [r3, #4]
 800eac6:	e7eb      	b.n	800eaa0 <_malloc_r+0xa8>
 800eac8:	4623      	mov	r3, r4
 800eaca:	6864      	ldr	r4, [r4, #4]
 800eacc:	e7ae      	b.n	800ea2c <_malloc_r+0x34>
 800eace:	463c      	mov	r4, r7
 800ead0:	687f      	ldr	r7, [r7, #4]
 800ead2:	e7b6      	b.n	800ea42 <_malloc_r+0x4a>
 800ead4:	461a      	mov	r2, r3
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	42a3      	cmp	r3, r4
 800eada:	d1fb      	bne.n	800ead4 <_malloc_r+0xdc>
 800eadc:	2300      	movs	r3, #0
 800eade:	6053      	str	r3, [r2, #4]
 800eae0:	e7de      	b.n	800eaa0 <_malloc_r+0xa8>
 800eae2:	230c      	movs	r3, #12
 800eae4:	4630      	mov	r0, r6
 800eae6:	6033      	str	r3, [r6, #0]
 800eae8:	f000 f80c 	bl	800eb04 <__malloc_unlock>
 800eaec:	e794      	b.n	800ea18 <_malloc_r+0x20>
 800eaee:	6005      	str	r5, [r0, #0]
 800eaf0:	e7d6      	b.n	800eaa0 <_malloc_r+0xa8>
 800eaf2:	bf00      	nop
 800eaf4:	20000600 	.word	0x20000600

0800eaf8 <__malloc_lock>:
 800eaf8:	4801      	ldr	r0, [pc, #4]	@ (800eb00 <__malloc_lock+0x8>)
 800eafa:	f000 baea 	b.w	800f0d2 <__retarget_lock_acquire_recursive>
 800eafe:	bf00      	nop
 800eb00:	20000744 	.word	0x20000744

0800eb04 <__malloc_unlock>:
 800eb04:	4801      	ldr	r0, [pc, #4]	@ (800eb0c <__malloc_unlock+0x8>)
 800eb06:	f000 bae5 	b.w	800f0d4 <__retarget_lock_release_recursive>
 800eb0a:	bf00      	nop
 800eb0c:	20000744 	.word	0x20000744

0800eb10 <std>:
 800eb10:	2300      	movs	r3, #0
 800eb12:	b510      	push	{r4, lr}
 800eb14:	4604      	mov	r4, r0
 800eb16:	6083      	str	r3, [r0, #8]
 800eb18:	8181      	strh	r1, [r0, #12]
 800eb1a:	4619      	mov	r1, r3
 800eb1c:	6643      	str	r3, [r0, #100]	@ 0x64
 800eb1e:	81c2      	strh	r2, [r0, #14]
 800eb20:	2208      	movs	r2, #8
 800eb22:	6183      	str	r3, [r0, #24]
 800eb24:	e9c0 3300 	strd	r3, r3, [r0]
 800eb28:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb2c:	305c      	adds	r0, #92	@ 0x5c
 800eb2e:	f000 fa47 	bl	800efc0 <memset>
 800eb32:	4b0d      	ldr	r3, [pc, #52]	@ (800eb68 <std+0x58>)
 800eb34:	6224      	str	r4, [r4, #32]
 800eb36:	6263      	str	r3, [r4, #36]	@ 0x24
 800eb38:	4b0c      	ldr	r3, [pc, #48]	@ (800eb6c <std+0x5c>)
 800eb3a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800eb3c:	4b0c      	ldr	r3, [pc, #48]	@ (800eb70 <std+0x60>)
 800eb3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800eb40:	4b0c      	ldr	r3, [pc, #48]	@ (800eb74 <std+0x64>)
 800eb42:	6323      	str	r3, [r4, #48]	@ 0x30
 800eb44:	4b0c      	ldr	r3, [pc, #48]	@ (800eb78 <std+0x68>)
 800eb46:	429c      	cmp	r4, r3
 800eb48:	d006      	beq.n	800eb58 <std+0x48>
 800eb4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800eb4e:	4294      	cmp	r4, r2
 800eb50:	d002      	beq.n	800eb58 <std+0x48>
 800eb52:	33d0      	adds	r3, #208	@ 0xd0
 800eb54:	429c      	cmp	r4, r3
 800eb56:	d105      	bne.n	800eb64 <std+0x54>
 800eb58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800eb5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb60:	f000 bab6 	b.w	800f0d0 <__retarget_lock_init_recursive>
 800eb64:	bd10      	pop	{r4, pc}
 800eb66:	bf00      	nop
 800eb68:	0800eddd 	.word	0x0800eddd
 800eb6c:	0800edff 	.word	0x0800edff
 800eb70:	0800ee37 	.word	0x0800ee37
 800eb74:	0800ee5b 	.word	0x0800ee5b
 800eb78:	20000604 	.word	0x20000604

0800eb7c <stdio_exit_handler>:
 800eb7c:	4a02      	ldr	r2, [pc, #8]	@ (800eb88 <stdio_exit_handler+0xc>)
 800eb7e:	4903      	ldr	r1, [pc, #12]	@ (800eb8c <stdio_exit_handler+0x10>)
 800eb80:	4803      	ldr	r0, [pc, #12]	@ (800eb90 <stdio_exit_handler+0x14>)
 800eb82:	f000 b869 	b.w	800ec58 <_fwalk_sglue>
 800eb86:	bf00      	nop
 800eb88:	2000000c 	.word	0x2000000c
 800eb8c:	0800fae5 	.word	0x0800fae5
 800eb90:	2000001c 	.word	0x2000001c

0800eb94 <cleanup_stdio>:
 800eb94:	6841      	ldr	r1, [r0, #4]
 800eb96:	4b0c      	ldr	r3, [pc, #48]	@ (800ebc8 <cleanup_stdio+0x34>)
 800eb98:	4299      	cmp	r1, r3
 800eb9a:	b510      	push	{r4, lr}
 800eb9c:	4604      	mov	r4, r0
 800eb9e:	d001      	beq.n	800eba4 <cleanup_stdio+0x10>
 800eba0:	f000 ffa0 	bl	800fae4 <_fflush_r>
 800eba4:	68a1      	ldr	r1, [r4, #8]
 800eba6:	4b09      	ldr	r3, [pc, #36]	@ (800ebcc <cleanup_stdio+0x38>)
 800eba8:	4299      	cmp	r1, r3
 800ebaa:	d002      	beq.n	800ebb2 <cleanup_stdio+0x1e>
 800ebac:	4620      	mov	r0, r4
 800ebae:	f000 ff99 	bl	800fae4 <_fflush_r>
 800ebb2:	68e1      	ldr	r1, [r4, #12]
 800ebb4:	4b06      	ldr	r3, [pc, #24]	@ (800ebd0 <cleanup_stdio+0x3c>)
 800ebb6:	4299      	cmp	r1, r3
 800ebb8:	d004      	beq.n	800ebc4 <cleanup_stdio+0x30>
 800ebba:	4620      	mov	r0, r4
 800ebbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebc0:	f000 bf90 	b.w	800fae4 <_fflush_r>
 800ebc4:	bd10      	pop	{r4, pc}
 800ebc6:	bf00      	nop
 800ebc8:	20000604 	.word	0x20000604
 800ebcc:	2000066c 	.word	0x2000066c
 800ebd0:	200006d4 	.word	0x200006d4

0800ebd4 <global_stdio_init.part.0>:
 800ebd4:	b510      	push	{r4, lr}
 800ebd6:	4b0b      	ldr	r3, [pc, #44]	@ (800ec04 <global_stdio_init.part.0+0x30>)
 800ebd8:	2104      	movs	r1, #4
 800ebda:	4c0b      	ldr	r4, [pc, #44]	@ (800ec08 <global_stdio_init.part.0+0x34>)
 800ebdc:	4a0b      	ldr	r2, [pc, #44]	@ (800ec0c <global_stdio_init.part.0+0x38>)
 800ebde:	4620      	mov	r0, r4
 800ebe0:	601a      	str	r2, [r3, #0]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f7ff ff94 	bl	800eb10 <std>
 800ebe8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ebec:	2201      	movs	r2, #1
 800ebee:	2109      	movs	r1, #9
 800ebf0:	f7ff ff8e 	bl	800eb10 <std>
 800ebf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ebf8:	2202      	movs	r2, #2
 800ebfa:	2112      	movs	r1, #18
 800ebfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec00:	f7ff bf86 	b.w	800eb10 <std>
 800ec04:	2000073c 	.word	0x2000073c
 800ec08:	20000604 	.word	0x20000604
 800ec0c:	0800eb7d 	.word	0x0800eb7d

0800ec10 <__sfp_lock_acquire>:
 800ec10:	4801      	ldr	r0, [pc, #4]	@ (800ec18 <__sfp_lock_acquire+0x8>)
 800ec12:	f000 ba5e 	b.w	800f0d2 <__retarget_lock_acquire_recursive>
 800ec16:	bf00      	nop
 800ec18:	20000745 	.word	0x20000745

0800ec1c <__sfp_lock_release>:
 800ec1c:	4801      	ldr	r0, [pc, #4]	@ (800ec24 <__sfp_lock_release+0x8>)
 800ec1e:	f000 ba59 	b.w	800f0d4 <__retarget_lock_release_recursive>
 800ec22:	bf00      	nop
 800ec24:	20000745 	.word	0x20000745

0800ec28 <__sinit>:
 800ec28:	b510      	push	{r4, lr}
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	f7ff fff0 	bl	800ec10 <__sfp_lock_acquire>
 800ec30:	6a23      	ldr	r3, [r4, #32]
 800ec32:	b11b      	cbz	r3, 800ec3c <__sinit+0x14>
 800ec34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec38:	f7ff bff0 	b.w	800ec1c <__sfp_lock_release>
 800ec3c:	4b04      	ldr	r3, [pc, #16]	@ (800ec50 <__sinit+0x28>)
 800ec3e:	6223      	str	r3, [r4, #32]
 800ec40:	4b04      	ldr	r3, [pc, #16]	@ (800ec54 <__sinit+0x2c>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d1f5      	bne.n	800ec34 <__sinit+0xc>
 800ec48:	f7ff ffc4 	bl	800ebd4 <global_stdio_init.part.0>
 800ec4c:	e7f2      	b.n	800ec34 <__sinit+0xc>
 800ec4e:	bf00      	nop
 800ec50:	0800eb95 	.word	0x0800eb95
 800ec54:	2000073c 	.word	0x2000073c

0800ec58 <_fwalk_sglue>:
 800ec58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec5c:	4607      	mov	r7, r0
 800ec5e:	4688      	mov	r8, r1
 800ec60:	4614      	mov	r4, r2
 800ec62:	2600      	movs	r6, #0
 800ec64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec68:	f1b9 0901 	subs.w	r9, r9, #1
 800ec6c:	d505      	bpl.n	800ec7a <_fwalk_sglue+0x22>
 800ec6e:	6824      	ldr	r4, [r4, #0]
 800ec70:	2c00      	cmp	r4, #0
 800ec72:	d1f7      	bne.n	800ec64 <_fwalk_sglue+0xc>
 800ec74:	4630      	mov	r0, r6
 800ec76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec7a:	89ab      	ldrh	r3, [r5, #12]
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d907      	bls.n	800ec90 <_fwalk_sglue+0x38>
 800ec80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec84:	3301      	adds	r3, #1
 800ec86:	d003      	beq.n	800ec90 <_fwalk_sglue+0x38>
 800ec88:	4629      	mov	r1, r5
 800ec8a:	4638      	mov	r0, r7
 800ec8c:	47c0      	blx	r8
 800ec8e:	4306      	orrs	r6, r0
 800ec90:	3568      	adds	r5, #104	@ 0x68
 800ec92:	e7e9      	b.n	800ec68 <_fwalk_sglue+0x10>

0800ec94 <iprintf>:
 800ec94:	b40f      	push	{r0, r1, r2, r3}
 800ec96:	b507      	push	{r0, r1, r2, lr}
 800ec98:	4906      	ldr	r1, [pc, #24]	@ (800ecb4 <iprintf+0x20>)
 800ec9a:	ab04      	add	r3, sp, #16
 800ec9c:	6808      	ldr	r0, [r1, #0]
 800ec9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eca2:	6881      	ldr	r1, [r0, #8]
 800eca4:	9301      	str	r3, [sp, #4]
 800eca6:	f000 fbef 	bl	800f488 <_vfiprintf_r>
 800ecaa:	b003      	add	sp, #12
 800ecac:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecb0:	b004      	add	sp, #16
 800ecb2:	4770      	bx	lr
 800ecb4:	20000018 	.word	0x20000018

0800ecb8 <_puts_r>:
 800ecb8:	6a03      	ldr	r3, [r0, #32]
 800ecba:	b570      	push	{r4, r5, r6, lr}
 800ecbc:	4605      	mov	r5, r0
 800ecbe:	460e      	mov	r6, r1
 800ecc0:	6884      	ldr	r4, [r0, #8]
 800ecc2:	b90b      	cbnz	r3, 800ecc8 <_puts_r+0x10>
 800ecc4:	f7ff ffb0 	bl	800ec28 <__sinit>
 800ecc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ecca:	07db      	lsls	r3, r3, #31
 800eccc:	d405      	bmi.n	800ecda <_puts_r+0x22>
 800ecce:	89a3      	ldrh	r3, [r4, #12]
 800ecd0:	0598      	lsls	r0, r3, #22
 800ecd2:	d402      	bmi.n	800ecda <_puts_r+0x22>
 800ecd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ecd6:	f000 f9fc 	bl	800f0d2 <__retarget_lock_acquire_recursive>
 800ecda:	89a3      	ldrh	r3, [r4, #12]
 800ecdc:	0719      	lsls	r1, r3, #28
 800ecde:	d502      	bpl.n	800ece6 <_puts_r+0x2e>
 800ece0:	6923      	ldr	r3, [r4, #16]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d135      	bne.n	800ed52 <_puts_r+0x9a>
 800ece6:	4621      	mov	r1, r4
 800ece8:	4628      	mov	r0, r5
 800ecea:	f000 f8f9 	bl	800eee0 <__swsetup_r>
 800ecee:	b380      	cbz	r0, 800ed52 <_puts_r+0x9a>
 800ecf0:	f04f 35ff 	mov.w	r5, #4294967295
 800ecf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ecf6:	07da      	lsls	r2, r3, #31
 800ecf8:	d405      	bmi.n	800ed06 <_puts_r+0x4e>
 800ecfa:	89a3      	ldrh	r3, [r4, #12]
 800ecfc:	059b      	lsls	r3, r3, #22
 800ecfe:	d402      	bmi.n	800ed06 <_puts_r+0x4e>
 800ed00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed02:	f000 f9e7 	bl	800f0d4 <__retarget_lock_release_recursive>
 800ed06:	4628      	mov	r0, r5
 800ed08:	bd70      	pop	{r4, r5, r6, pc}
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	da04      	bge.n	800ed18 <_puts_r+0x60>
 800ed0e:	69a2      	ldr	r2, [r4, #24]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	dc17      	bgt.n	800ed44 <_puts_r+0x8c>
 800ed14:	290a      	cmp	r1, #10
 800ed16:	d015      	beq.n	800ed44 <_puts_r+0x8c>
 800ed18:	6823      	ldr	r3, [r4, #0]
 800ed1a:	1c5a      	adds	r2, r3, #1
 800ed1c:	6022      	str	r2, [r4, #0]
 800ed1e:	7019      	strb	r1, [r3, #0]
 800ed20:	68a3      	ldr	r3, [r4, #8]
 800ed22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ed26:	3b01      	subs	r3, #1
 800ed28:	60a3      	str	r3, [r4, #8]
 800ed2a:	2900      	cmp	r1, #0
 800ed2c:	d1ed      	bne.n	800ed0a <_puts_r+0x52>
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	da11      	bge.n	800ed56 <_puts_r+0x9e>
 800ed32:	4622      	mov	r2, r4
 800ed34:	210a      	movs	r1, #10
 800ed36:	4628      	mov	r0, r5
 800ed38:	f000 f893 	bl	800ee62 <__swbuf_r>
 800ed3c:	3001      	adds	r0, #1
 800ed3e:	d0d7      	beq.n	800ecf0 <_puts_r+0x38>
 800ed40:	250a      	movs	r5, #10
 800ed42:	e7d7      	b.n	800ecf4 <_puts_r+0x3c>
 800ed44:	4622      	mov	r2, r4
 800ed46:	4628      	mov	r0, r5
 800ed48:	f000 f88b 	bl	800ee62 <__swbuf_r>
 800ed4c:	3001      	adds	r0, #1
 800ed4e:	d1e7      	bne.n	800ed20 <_puts_r+0x68>
 800ed50:	e7ce      	b.n	800ecf0 <_puts_r+0x38>
 800ed52:	3e01      	subs	r6, #1
 800ed54:	e7e4      	b.n	800ed20 <_puts_r+0x68>
 800ed56:	6823      	ldr	r3, [r4, #0]
 800ed58:	1c5a      	adds	r2, r3, #1
 800ed5a:	6022      	str	r2, [r4, #0]
 800ed5c:	220a      	movs	r2, #10
 800ed5e:	701a      	strb	r2, [r3, #0]
 800ed60:	e7ee      	b.n	800ed40 <_puts_r+0x88>
	...

0800ed64 <puts>:
 800ed64:	4b02      	ldr	r3, [pc, #8]	@ (800ed70 <puts+0xc>)
 800ed66:	4601      	mov	r1, r0
 800ed68:	6818      	ldr	r0, [r3, #0]
 800ed6a:	f7ff bfa5 	b.w	800ecb8 <_puts_r>
 800ed6e:	bf00      	nop
 800ed70:	20000018 	.word	0x20000018

0800ed74 <sniprintf>:
 800ed74:	b40c      	push	{r2, r3}
 800ed76:	4b18      	ldr	r3, [pc, #96]	@ (800edd8 <sniprintf+0x64>)
 800ed78:	b530      	push	{r4, r5, lr}
 800ed7a:	1e0c      	subs	r4, r1, #0
 800ed7c:	b09d      	sub	sp, #116	@ 0x74
 800ed7e:	681d      	ldr	r5, [r3, #0]
 800ed80:	da08      	bge.n	800ed94 <sniprintf+0x20>
 800ed82:	238b      	movs	r3, #139	@ 0x8b
 800ed84:	f04f 30ff 	mov.w	r0, #4294967295
 800ed88:	602b      	str	r3, [r5, #0]
 800ed8a:	b01d      	add	sp, #116	@ 0x74
 800ed8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed90:	b002      	add	sp, #8
 800ed92:	4770      	bx	lr
 800ed94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ed98:	9002      	str	r0, [sp, #8]
 800ed9a:	9006      	str	r0, [sp, #24]
 800ed9c:	a902      	add	r1, sp, #8
 800ed9e:	f8ad 3014 	strh.w	r3, [sp, #20]
 800eda2:	bf14      	ite	ne
 800eda4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800eda8:	4623      	moveq	r3, r4
 800edaa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800edac:	4628      	mov	r0, r5
 800edae:	9304      	str	r3, [sp, #16]
 800edb0:	9307      	str	r3, [sp, #28]
 800edb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800edb6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800edba:	ab21      	add	r3, sp, #132	@ 0x84
 800edbc:	9301      	str	r3, [sp, #4]
 800edbe:	f000 fa3d 	bl	800f23c <_svfiprintf_r>
 800edc2:	1c43      	adds	r3, r0, #1
 800edc4:	bfbc      	itt	lt
 800edc6:	238b      	movlt	r3, #139	@ 0x8b
 800edc8:	602b      	strlt	r3, [r5, #0]
 800edca:	2c00      	cmp	r4, #0
 800edcc:	d0dd      	beq.n	800ed8a <sniprintf+0x16>
 800edce:	9b02      	ldr	r3, [sp, #8]
 800edd0:	2200      	movs	r2, #0
 800edd2:	701a      	strb	r2, [r3, #0]
 800edd4:	e7d9      	b.n	800ed8a <sniprintf+0x16>
 800edd6:	bf00      	nop
 800edd8:	20000018 	.word	0x20000018

0800eddc <__sread>:
 800eddc:	b510      	push	{r4, lr}
 800edde:	460c      	mov	r4, r1
 800ede0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ede4:	f000 f916 	bl	800f014 <_read_r>
 800ede8:	2800      	cmp	r0, #0
 800edea:	bfab      	itete	ge
 800edec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800edee:	89a3      	ldrhlt	r3, [r4, #12]
 800edf0:	181b      	addge	r3, r3, r0
 800edf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800edf6:	bfac      	ite	ge
 800edf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800edfa:	81a3      	strhlt	r3, [r4, #12]
 800edfc:	bd10      	pop	{r4, pc}

0800edfe <__swrite>:
 800edfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee02:	461f      	mov	r7, r3
 800ee04:	898b      	ldrh	r3, [r1, #12]
 800ee06:	4605      	mov	r5, r0
 800ee08:	460c      	mov	r4, r1
 800ee0a:	05db      	lsls	r3, r3, #23
 800ee0c:	4616      	mov	r6, r2
 800ee0e:	d505      	bpl.n	800ee1c <__swrite+0x1e>
 800ee10:	2302      	movs	r3, #2
 800ee12:	2200      	movs	r2, #0
 800ee14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee18:	f000 f8ea 	bl	800eff0 <_lseek_r>
 800ee1c:	89a3      	ldrh	r3, [r4, #12]
 800ee1e:	4632      	mov	r2, r6
 800ee20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee24:	4628      	mov	r0, r5
 800ee26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ee2a:	81a3      	strh	r3, [r4, #12]
 800ee2c:	463b      	mov	r3, r7
 800ee2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee32:	f000 b911 	b.w	800f058 <_write_r>

0800ee36 <__sseek>:
 800ee36:	b510      	push	{r4, lr}
 800ee38:	460c      	mov	r4, r1
 800ee3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee3e:	f000 f8d7 	bl	800eff0 <_lseek_r>
 800ee42:	1c43      	adds	r3, r0, #1
 800ee44:	89a3      	ldrh	r3, [r4, #12]
 800ee46:	bf15      	itete	ne
 800ee48:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ee4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ee4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ee52:	81a3      	strheq	r3, [r4, #12]
 800ee54:	bf18      	it	ne
 800ee56:	81a3      	strhne	r3, [r4, #12]
 800ee58:	bd10      	pop	{r4, pc}

0800ee5a <__sclose>:
 800ee5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee5e:	f000 b8b7 	b.w	800efd0 <_close_r>

0800ee62 <__swbuf_r>:
 800ee62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee64:	460e      	mov	r6, r1
 800ee66:	4614      	mov	r4, r2
 800ee68:	4605      	mov	r5, r0
 800ee6a:	b118      	cbz	r0, 800ee74 <__swbuf_r+0x12>
 800ee6c:	6a03      	ldr	r3, [r0, #32]
 800ee6e:	b90b      	cbnz	r3, 800ee74 <__swbuf_r+0x12>
 800ee70:	f7ff feda 	bl	800ec28 <__sinit>
 800ee74:	69a3      	ldr	r3, [r4, #24]
 800ee76:	60a3      	str	r3, [r4, #8]
 800ee78:	89a3      	ldrh	r3, [r4, #12]
 800ee7a:	071a      	lsls	r2, r3, #28
 800ee7c:	d501      	bpl.n	800ee82 <__swbuf_r+0x20>
 800ee7e:	6923      	ldr	r3, [r4, #16]
 800ee80:	b943      	cbnz	r3, 800ee94 <__swbuf_r+0x32>
 800ee82:	4621      	mov	r1, r4
 800ee84:	4628      	mov	r0, r5
 800ee86:	f000 f82b 	bl	800eee0 <__swsetup_r>
 800ee8a:	b118      	cbz	r0, 800ee94 <__swbuf_r+0x32>
 800ee8c:	f04f 37ff 	mov.w	r7, #4294967295
 800ee90:	4638      	mov	r0, r7
 800ee92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee94:	6823      	ldr	r3, [r4, #0]
 800ee96:	b2f6      	uxtb	r6, r6
 800ee98:	6922      	ldr	r2, [r4, #16]
 800ee9a:	4637      	mov	r7, r6
 800ee9c:	1a98      	subs	r0, r3, r2
 800ee9e:	6963      	ldr	r3, [r4, #20]
 800eea0:	4283      	cmp	r3, r0
 800eea2:	dc05      	bgt.n	800eeb0 <__swbuf_r+0x4e>
 800eea4:	4621      	mov	r1, r4
 800eea6:	4628      	mov	r0, r5
 800eea8:	f000 fe1c 	bl	800fae4 <_fflush_r>
 800eeac:	2800      	cmp	r0, #0
 800eeae:	d1ed      	bne.n	800ee8c <__swbuf_r+0x2a>
 800eeb0:	68a3      	ldr	r3, [r4, #8]
 800eeb2:	3b01      	subs	r3, #1
 800eeb4:	60a3      	str	r3, [r4, #8]
 800eeb6:	6823      	ldr	r3, [r4, #0]
 800eeb8:	1c5a      	adds	r2, r3, #1
 800eeba:	6022      	str	r2, [r4, #0]
 800eebc:	701e      	strb	r6, [r3, #0]
 800eebe:	1c43      	adds	r3, r0, #1
 800eec0:	6962      	ldr	r2, [r4, #20]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d004      	beq.n	800eed0 <__swbuf_r+0x6e>
 800eec6:	89a3      	ldrh	r3, [r4, #12]
 800eec8:	07db      	lsls	r3, r3, #31
 800eeca:	d5e1      	bpl.n	800ee90 <__swbuf_r+0x2e>
 800eecc:	2e0a      	cmp	r6, #10
 800eece:	d1df      	bne.n	800ee90 <__swbuf_r+0x2e>
 800eed0:	4621      	mov	r1, r4
 800eed2:	4628      	mov	r0, r5
 800eed4:	f000 fe06 	bl	800fae4 <_fflush_r>
 800eed8:	2800      	cmp	r0, #0
 800eeda:	d0d9      	beq.n	800ee90 <__swbuf_r+0x2e>
 800eedc:	e7d6      	b.n	800ee8c <__swbuf_r+0x2a>
	...

0800eee0 <__swsetup_r>:
 800eee0:	b538      	push	{r3, r4, r5, lr}
 800eee2:	4b29      	ldr	r3, [pc, #164]	@ (800ef88 <__swsetup_r+0xa8>)
 800eee4:	4605      	mov	r5, r0
 800eee6:	460c      	mov	r4, r1
 800eee8:	6818      	ldr	r0, [r3, #0]
 800eeea:	b118      	cbz	r0, 800eef4 <__swsetup_r+0x14>
 800eeec:	6a03      	ldr	r3, [r0, #32]
 800eeee:	b90b      	cbnz	r3, 800eef4 <__swsetup_r+0x14>
 800eef0:	f7ff fe9a 	bl	800ec28 <__sinit>
 800eef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eef8:	0719      	lsls	r1, r3, #28
 800eefa:	d422      	bmi.n	800ef42 <__swsetup_r+0x62>
 800eefc:	06da      	lsls	r2, r3, #27
 800eefe:	d407      	bmi.n	800ef10 <__swsetup_r+0x30>
 800ef00:	2209      	movs	r2, #9
 800ef02:	602a      	str	r2, [r5, #0]
 800ef04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef08:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0c:	81a3      	strh	r3, [r4, #12]
 800ef0e:	e033      	b.n	800ef78 <__swsetup_r+0x98>
 800ef10:	0758      	lsls	r0, r3, #29
 800ef12:	d512      	bpl.n	800ef3a <__swsetup_r+0x5a>
 800ef14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef16:	b141      	cbz	r1, 800ef2a <__swsetup_r+0x4a>
 800ef18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef1c:	4299      	cmp	r1, r3
 800ef1e:	d002      	beq.n	800ef26 <__swsetup_r+0x46>
 800ef20:	4628      	mov	r0, r5
 800ef22:	f000 f8e5 	bl	800f0f0 <_free_r>
 800ef26:	2300      	movs	r3, #0
 800ef28:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef2a:	89a3      	ldrh	r3, [r4, #12]
 800ef2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef30:	81a3      	strh	r3, [r4, #12]
 800ef32:	2300      	movs	r3, #0
 800ef34:	6063      	str	r3, [r4, #4]
 800ef36:	6923      	ldr	r3, [r4, #16]
 800ef38:	6023      	str	r3, [r4, #0]
 800ef3a:	89a3      	ldrh	r3, [r4, #12]
 800ef3c:	f043 0308 	orr.w	r3, r3, #8
 800ef40:	81a3      	strh	r3, [r4, #12]
 800ef42:	6923      	ldr	r3, [r4, #16]
 800ef44:	b94b      	cbnz	r3, 800ef5a <__swsetup_r+0x7a>
 800ef46:	89a3      	ldrh	r3, [r4, #12]
 800ef48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ef4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef50:	d003      	beq.n	800ef5a <__swsetup_r+0x7a>
 800ef52:	4621      	mov	r1, r4
 800ef54:	4628      	mov	r0, r5
 800ef56:	f000 fe12 	bl	800fb7e <__smakebuf_r>
 800ef5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef5e:	f013 0201 	ands.w	r2, r3, #1
 800ef62:	d00a      	beq.n	800ef7a <__swsetup_r+0x9a>
 800ef64:	2200      	movs	r2, #0
 800ef66:	60a2      	str	r2, [r4, #8]
 800ef68:	6962      	ldr	r2, [r4, #20]
 800ef6a:	4252      	negs	r2, r2
 800ef6c:	61a2      	str	r2, [r4, #24]
 800ef6e:	6922      	ldr	r2, [r4, #16]
 800ef70:	b942      	cbnz	r2, 800ef84 <__swsetup_r+0xa4>
 800ef72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ef76:	d1c5      	bne.n	800ef04 <__swsetup_r+0x24>
 800ef78:	bd38      	pop	{r3, r4, r5, pc}
 800ef7a:	0799      	lsls	r1, r3, #30
 800ef7c:	bf58      	it	pl
 800ef7e:	6962      	ldrpl	r2, [r4, #20]
 800ef80:	60a2      	str	r2, [r4, #8]
 800ef82:	e7f4      	b.n	800ef6e <__swsetup_r+0x8e>
 800ef84:	2000      	movs	r0, #0
 800ef86:	e7f7      	b.n	800ef78 <__swsetup_r+0x98>
 800ef88:	20000018 	.word	0x20000018

0800ef8c <memmove>:
 800ef8c:	4288      	cmp	r0, r1
 800ef8e:	b510      	push	{r4, lr}
 800ef90:	eb01 0402 	add.w	r4, r1, r2
 800ef94:	d902      	bls.n	800ef9c <memmove+0x10>
 800ef96:	4284      	cmp	r4, r0
 800ef98:	4623      	mov	r3, r4
 800ef9a:	d807      	bhi.n	800efac <memmove+0x20>
 800ef9c:	1e43      	subs	r3, r0, #1
 800ef9e:	42a1      	cmp	r1, r4
 800efa0:	d008      	beq.n	800efb4 <memmove+0x28>
 800efa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efaa:	e7f8      	b.n	800ef9e <memmove+0x12>
 800efac:	4402      	add	r2, r0
 800efae:	4601      	mov	r1, r0
 800efb0:	428a      	cmp	r2, r1
 800efb2:	d100      	bne.n	800efb6 <memmove+0x2a>
 800efb4:	bd10      	pop	{r4, pc}
 800efb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efbe:	e7f7      	b.n	800efb0 <memmove+0x24>

0800efc0 <memset>:
 800efc0:	4402      	add	r2, r0
 800efc2:	4603      	mov	r3, r0
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d100      	bne.n	800efca <memset+0xa>
 800efc8:	4770      	bx	lr
 800efca:	f803 1b01 	strb.w	r1, [r3], #1
 800efce:	e7f9      	b.n	800efc4 <memset+0x4>

0800efd0 <_close_r>:
 800efd0:	b538      	push	{r3, r4, r5, lr}
 800efd2:	2300      	movs	r3, #0
 800efd4:	4d05      	ldr	r5, [pc, #20]	@ (800efec <_close_r+0x1c>)
 800efd6:	4604      	mov	r4, r0
 800efd8:	4608      	mov	r0, r1
 800efda:	602b      	str	r3, [r5, #0]
 800efdc:	f7f2 f90b 	bl	80011f6 <_close>
 800efe0:	1c43      	adds	r3, r0, #1
 800efe2:	d102      	bne.n	800efea <_close_r+0x1a>
 800efe4:	682b      	ldr	r3, [r5, #0]
 800efe6:	b103      	cbz	r3, 800efea <_close_r+0x1a>
 800efe8:	6023      	str	r3, [r4, #0]
 800efea:	bd38      	pop	{r3, r4, r5, pc}
 800efec:	20000740 	.word	0x20000740

0800eff0 <_lseek_r>:
 800eff0:	b538      	push	{r3, r4, r5, lr}
 800eff2:	4604      	mov	r4, r0
 800eff4:	4d06      	ldr	r5, [pc, #24]	@ (800f010 <_lseek_r+0x20>)
 800eff6:	4608      	mov	r0, r1
 800eff8:	4611      	mov	r1, r2
 800effa:	2200      	movs	r2, #0
 800effc:	602a      	str	r2, [r5, #0]
 800effe:	461a      	mov	r2, r3
 800f000:	f7f2 f920 	bl	8001244 <_lseek>
 800f004:	1c43      	adds	r3, r0, #1
 800f006:	d102      	bne.n	800f00e <_lseek_r+0x1e>
 800f008:	682b      	ldr	r3, [r5, #0]
 800f00a:	b103      	cbz	r3, 800f00e <_lseek_r+0x1e>
 800f00c:	6023      	str	r3, [r4, #0]
 800f00e:	bd38      	pop	{r3, r4, r5, pc}
 800f010:	20000740 	.word	0x20000740

0800f014 <_read_r>:
 800f014:	b538      	push	{r3, r4, r5, lr}
 800f016:	4604      	mov	r4, r0
 800f018:	4d06      	ldr	r5, [pc, #24]	@ (800f034 <_read_r+0x20>)
 800f01a:	4608      	mov	r0, r1
 800f01c:	4611      	mov	r1, r2
 800f01e:	2200      	movs	r2, #0
 800f020:	602a      	str	r2, [r5, #0]
 800f022:	461a      	mov	r2, r3
 800f024:	f7f2 f8ca 	bl	80011bc <_read>
 800f028:	1c43      	adds	r3, r0, #1
 800f02a:	d102      	bne.n	800f032 <_read_r+0x1e>
 800f02c:	682b      	ldr	r3, [r5, #0]
 800f02e:	b103      	cbz	r3, 800f032 <_read_r+0x1e>
 800f030:	6023      	str	r3, [r4, #0]
 800f032:	bd38      	pop	{r3, r4, r5, pc}
 800f034:	20000740 	.word	0x20000740

0800f038 <_sbrk_r>:
 800f038:	b538      	push	{r3, r4, r5, lr}
 800f03a:	2300      	movs	r3, #0
 800f03c:	4d05      	ldr	r5, [pc, #20]	@ (800f054 <_sbrk_r+0x1c>)
 800f03e:	4604      	mov	r4, r0
 800f040:	4608      	mov	r0, r1
 800f042:	602b      	str	r3, [r5, #0]
 800f044:	f7f2 f90c 	bl	8001260 <_sbrk>
 800f048:	1c43      	adds	r3, r0, #1
 800f04a:	d102      	bne.n	800f052 <_sbrk_r+0x1a>
 800f04c:	682b      	ldr	r3, [r5, #0]
 800f04e:	b103      	cbz	r3, 800f052 <_sbrk_r+0x1a>
 800f050:	6023      	str	r3, [r4, #0]
 800f052:	bd38      	pop	{r3, r4, r5, pc}
 800f054:	20000740 	.word	0x20000740

0800f058 <_write_r>:
 800f058:	b538      	push	{r3, r4, r5, lr}
 800f05a:	4604      	mov	r4, r0
 800f05c:	4d06      	ldr	r5, [pc, #24]	@ (800f078 <_write_r+0x20>)
 800f05e:	4608      	mov	r0, r1
 800f060:	4611      	mov	r1, r2
 800f062:	2200      	movs	r2, #0
 800f064:	602a      	str	r2, [r5, #0]
 800f066:	461a      	mov	r2, r3
 800f068:	f7f1 feb6 	bl	8000dd8 <_write>
 800f06c:	1c43      	adds	r3, r0, #1
 800f06e:	d102      	bne.n	800f076 <_write_r+0x1e>
 800f070:	682b      	ldr	r3, [r5, #0]
 800f072:	b103      	cbz	r3, 800f076 <_write_r+0x1e>
 800f074:	6023      	str	r3, [r4, #0]
 800f076:	bd38      	pop	{r3, r4, r5, pc}
 800f078:	20000740 	.word	0x20000740

0800f07c <__errno>:
 800f07c:	4b01      	ldr	r3, [pc, #4]	@ (800f084 <__errno+0x8>)
 800f07e:	6818      	ldr	r0, [r3, #0]
 800f080:	4770      	bx	lr
 800f082:	bf00      	nop
 800f084:	20000018 	.word	0x20000018

0800f088 <__libc_init_array>:
 800f088:	b570      	push	{r4, r5, r6, lr}
 800f08a:	4d0d      	ldr	r5, [pc, #52]	@ (800f0c0 <__libc_init_array+0x38>)
 800f08c:	2600      	movs	r6, #0
 800f08e:	4c0d      	ldr	r4, [pc, #52]	@ (800f0c4 <__libc_init_array+0x3c>)
 800f090:	1b64      	subs	r4, r4, r5
 800f092:	10a4      	asrs	r4, r4, #2
 800f094:	42a6      	cmp	r6, r4
 800f096:	d109      	bne.n	800f0ac <__libc_init_array+0x24>
 800f098:	4d0b      	ldr	r5, [pc, #44]	@ (800f0c8 <__libc_init_array+0x40>)
 800f09a:	2600      	movs	r6, #0
 800f09c:	4c0b      	ldr	r4, [pc, #44]	@ (800f0cc <__libc_init_array+0x44>)
 800f09e:	f000 fe11 	bl	800fcc4 <_init>
 800f0a2:	1b64      	subs	r4, r4, r5
 800f0a4:	10a4      	asrs	r4, r4, #2
 800f0a6:	42a6      	cmp	r6, r4
 800f0a8:	d105      	bne.n	800f0b6 <__libc_init_array+0x2e>
 800f0aa:	bd70      	pop	{r4, r5, r6, pc}
 800f0ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0b0:	3601      	adds	r6, #1
 800f0b2:	4798      	blx	r3
 800f0b4:	e7ee      	b.n	800f094 <__libc_init_array+0xc>
 800f0b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0ba:	3601      	adds	r6, #1
 800f0bc:	4798      	blx	r3
 800f0be:	e7f2      	b.n	800f0a6 <__libc_init_array+0x1e>
 800f0c0:	08010338 	.word	0x08010338
 800f0c4:	08010338 	.word	0x08010338
 800f0c8:	08010338 	.word	0x08010338
 800f0cc:	0801033c 	.word	0x0801033c

0800f0d0 <__retarget_lock_init_recursive>:
 800f0d0:	4770      	bx	lr

0800f0d2 <__retarget_lock_acquire_recursive>:
 800f0d2:	4770      	bx	lr

0800f0d4 <__retarget_lock_release_recursive>:
 800f0d4:	4770      	bx	lr

0800f0d6 <memcpy>:
 800f0d6:	440a      	add	r2, r1
 800f0d8:	1e43      	subs	r3, r0, #1
 800f0da:	4291      	cmp	r1, r2
 800f0dc:	d100      	bne.n	800f0e0 <memcpy+0xa>
 800f0de:	4770      	bx	lr
 800f0e0:	b510      	push	{r4, lr}
 800f0e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0e6:	4291      	cmp	r1, r2
 800f0e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0ec:	d1f9      	bne.n	800f0e2 <memcpy+0xc>
 800f0ee:	bd10      	pop	{r4, pc}

0800f0f0 <_free_r>:
 800f0f0:	b538      	push	{r3, r4, r5, lr}
 800f0f2:	4605      	mov	r5, r0
 800f0f4:	2900      	cmp	r1, #0
 800f0f6:	d041      	beq.n	800f17c <_free_r+0x8c>
 800f0f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0fc:	1f0c      	subs	r4, r1, #4
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	bfb8      	it	lt
 800f102:	18e4      	addlt	r4, r4, r3
 800f104:	f7ff fcf8 	bl	800eaf8 <__malloc_lock>
 800f108:	4a1d      	ldr	r2, [pc, #116]	@ (800f180 <_free_r+0x90>)
 800f10a:	6813      	ldr	r3, [r2, #0]
 800f10c:	b933      	cbnz	r3, 800f11c <_free_r+0x2c>
 800f10e:	6063      	str	r3, [r4, #4]
 800f110:	6014      	str	r4, [r2, #0]
 800f112:	4628      	mov	r0, r5
 800f114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f118:	f7ff bcf4 	b.w	800eb04 <__malloc_unlock>
 800f11c:	42a3      	cmp	r3, r4
 800f11e:	d908      	bls.n	800f132 <_free_r+0x42>
 800f120:	6820      	ldr	r0, [r4, #0]
 800f122:	1821      	adds	r1, r4, r0
 800f124:	428b      	cmp	r3, r1
 800f126:	bf01      	itttt	eq
 800f128:	6819      	ldreq	r1, [r3, #0]
 800f12a:	685b      	ldreq	r3, [r3, #4]
 800f12c:	1809      	addeq	r1, r1, r0
 800f12e:	6021      	streq	r1, [r4, #0]
 800f130:	e7ed      	b.n	800f10e <_free_r+0x1e>
 800f132:	461a      	mov	r2, r3
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	b10b      	cbz	r3, 800f13c <_free_r+0x4c>
 800f138:	42a3      	cmp	r3, r4
 800f13a:	d9fa      	bls.n	800f132 <_free_r+0x42>
 800f13c:	6811      	ldr	r1, [r2, #0]
 800f13e:	1850      	adds	r0, r2, r1
 800f140:	42a0      	cmp	r0, r4
 800f142:	d10b      	bne.n	800f15c <_free_r+0x6c>
 800f144:	6820      	ldr	r0, [r4, #0]
 800f146:	4401      	add	r1, r0
 800f148:	1850      	adds	r0, r2, r1
 800f14a:	6011      	str	r1, [r2, #0]
 800f14c:	4283      	cmp	r3, r0
 800f14e:	d1e0      	bne.n	800f112 <_free_r+0x22>
 800f150:	6818      	ldr	r0, [r3, #0]
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	4408      	add	r0, r1
 800f156:	6053      	str	r3, [r2, #4]
 800f158:	6010      	str	r0, [r2, #0]
 800f15a:	e7da      	b.n	800f112 <_free_r+0x22>
 800f15c:	d902      	bls.n	800f164 <_free_r+0x74>
 800f15e:	230c      	movs	r3, #12
 800f160:	602b      	str	r3, [r5, #0]
 800f162:	e7d6      	b.n	800f112 <_free_r+0x22>
 800f164:	6820      	ldr	r0, [r4, #0]
 800f166:	1821      	adds	r1, r4, r0
 800f168:	428b      	cmp	r3, r1
 800f16a:	bf02      	ittt	eq
 800f16c:	6819      	ldreq	r1, [r3, #0]
 800f16e:	685b      	ldreq	r3, [r3, #4]
 800f170:	1809      	addeq	r1, r1, r0
 800f172:	6063      	str	r3, [r4, #4]
 800f174:	bf08      	it	eq
 800f176:	6021      	streq	r1, [r4, #0]
 800f178:	6054      	str	r4, [r2, #4]
 800f17a:	e7ca      	b.n	800f112 <_free_r+0x22>
 800f17c:	bd38      	pop	{r3, r4, r5, pc}
 800f17e:	bf00      	nop
 800f180:	20000600 	.word	0x20000600

0800f184 <__ssputs_r>:
 800f184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f188:	461f      	mov	r7, r3
 800f18a:	688e      	ldr	r6, [r1, #8]
 800f18c:	4682      	mov	sl, r0
 800f18e:	460c      	mov	r4, r1
 800f190:	42be      	cmp	r6, r7
 800f192:	4690      	mov	r8, r2
 800f194:	680b      	ldr	r3, [r1, #0]
 800f196:	d82d      	bhi.n	800f1f4 <__ssputs_r+0x70>
 800f198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f19c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f1a0:	d026      	beq.n	800f1f0 <__ssputs_r+0x6c>
 800f1a2:	6965      	ldr	r5, [r4, #20]
 800f1a4:	6909      	ldr	r1, [r1, #16]
 800f1a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f1aa:	eba3 0901 	sub.w	r9, r3, r1
 800f1ae:	1c7b      	adds	r3, r7, #1
 800f1b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f1b4:	444b      	add	r3, r9
 800f1b6:	106d      	asrs	r5, r5, #1
 800f1b8:	429d      	cmp	r5, r3
 800f1ba:	bf38      	it	cc
 800f1bc:	461d      	movcc	r5, r3
 800f1be:	0553      	lsls	r3, r2, #21
 800f1c0:	d527      	bpl.n	800f212 <__ssputs_r+0x8e>
 800f1c2:	4629      	mov	r1, r5
 800f1c4:	f7ff fc18 	bl	800e9f8 <_malloc_r>
 800f1c8:	4606      	mov	r6, r0
 800f1ca:	b360      	cbz	r0, 800f226 <__ssputs_r+0xa2>
 800f1cc:	464a      	mov	r2, r9
 800f1ce:	6921      	ldr	r1, [r4, #16]
 800f1d0:	f7ff ff81 	bl	800f0d6 <memcpy>
 800f1d4:	89a3      	ldrh	r3, [r4, #12]
 800f1d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f1da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1de:	81a3      	strh	r3, [r4, #12]
 800f1e0:	6126      	str	r6, [r4, #16]
 800f1e2:	444e      	add	r6, r9
 800f1e4:	6165      	str	r5, [r4, #20]
 800f1e6:	eba5 0509 	sub.w	r5, r5, r9
 800f1ea:	6026      	str	r6, [r4, #0]
 800f1ec:	463e      	mov	r6, r7
 800f1ee:	60a5      	str	r5, [r4, #8]
 800f1f0:	42be      	cmp	r6, r7
 800f1f2:	d900      	bls.n	800f1f6 <__ssputs_r+0x72>
 800f1f4:	463e      	mov	r6, r7
 800f1f6:	4632      	mov	r2, r6
 800f1f8:	4641      	mov	r1, r8
 800f1fa:	6820      	ldr	r0, [r4, #0]
 800f1fc:	f7ff fec6 	bl	800ef8c <memmove>
 800f200:	68a3      	ldr	r3, [r4, #8]
 800f202:	2000      	movs	r0, #0
 800f204:	1b9b      	subs	r3, r3, r6
 800f206:	60a3      	str	r3, [r4, #8]
 800f208:	6823      	ldr	r3, [r4, #0]
 800f20a:	4433      	add	r3, r6
 800f20c:	6023      	str	r3, [r4, #0]
 800f20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f212:	462a      	mov	r2, r5
 800f214:	f000 fd20 	bl	800fc58 <_realloc_r>
 800f218:	4606      	mov	r6, r0
 800f21a:	2800      	cmp	r0, #0
 800f21c:	d1e0      	bne.n	800f1e0 <__ssputs_r+0x5c>
 800f21e:	6921      	ldr	r1, [r4, #16]
 800f220:	4650      	mov	r0, sl
 800f222:	f7ff ff65 	bl	800f0f0 <_free_r>
 800f226:	230c      	movs	r3, #12
 800f228:	f04f 30ff 	mov.w	r0, #4294967295
 800f22c:	f8ca 3000 	str.w	r3, [sl]
 800f230:	89a3      	ldrh	r3, [r4, #12]
 800f232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f236:	81a3      	strh	r3, [r4, #12]
 800f238:	e7e9      	b.n	800f20e <__ssputs_r+0x8a>
	...

0800f23c <_svfiprintf_r>:
 800f23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f240:	4698      	mov	r8, r3
 800f242:	898b      	ldrh	r3, [r1, #12]
 800f244:	b09d      	sub	sp, #116	@ 0x74
 800f246:	4607      	mov	r7, r0
 800f248:	061b      	lsls	r3, r3, #24
 800f24a:	460d      	mov	r5, r1
 800f24c:	4614      	mov	r4, r2
 800f24e:	d510      	bpl.n	800f272 <_svfiprintf_r+0x36>
 800f250:	690b      	ldr	r3, [r1, #16]
 800f252:	b973      	cbnz	r3, 800f272 <_svfiprintf_r+0x36>
 800f254:	2140      	movs	r1, #64	@ 0x40
 800f256:	f7ff fbcf 	bl	800e9f8 <_malloc_r>
 800f25a:	6028      	str	r0, [r5, #0]
 800f25c:	6128      	str	r0, [r5, #16]
 800f25e:	b930      	cbnz	r0, 800f26e <_svfiprintf_r+0x32>
 800f260:	230c      	movs	r3, #12
 800f262:	603b      	str	r3, [r7, #0]
 800f264:	f04f 30ff 	mov.w	r0, #4294967295
 800f268:	b01d      	add	sp, #116	@ 0x74
 800f26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f26e:	2340      	movs	r3, #64	@ 0x40
 800f270:	616b      	str	r3, [r5, #20]
 800f272:	2300      	movs	r3, #0
 800f274:	f8cd 800c 	str.w	r8, [sp, #12]
 800f278:	f04f 0901 	mov.w	r9, #1
 800f27c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800f420 <_svfiprintf_r+0x1e4>
 800f280:	9309      	str	r3, [sp, #36]	@ 0x24
 800f282:	2320      	movs	r3, #32
 800f284:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f288:	2330      	movs	r3, #48	@ 0x30
 800f28a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f28e:	4623      	mov	r3, r4
 800f290:	469a      	mov	sl, r3
 800f292:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f296:	b10a      	cbz	r2, 800f29c <_svfiprintf_r+0x60>
 800f298:	2a25      	cmp	r2, #37	@ 0x25
 800f29a:	d1f9      	bne.n	800f290 <_svfiprintf_r+0x54>
 800f29c:	ebba 0b04 	subs.w	fp, sl, r4
 800f2a0:	d00b      	beq.n	800f2ba <_svfiprintf_r+0x7e>
 800f2a2:	465b      	mov	r3, fp
 800f2a4:	4622      	mov	r2, r4
 800f2a6:	4629      	mov	r1, r5
 800f2a8:	4638      	mov	r0, r7
 800f2aa:	f7ff ff6b 	bl	800f184 <__ssputs_r>
 800f2ae:	3001      	adds	r0, #1
 800f2b0:	f000 80a7 	beq.w	800f402 <_svfiprintf_r+0x1c6>
 800f2b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2b6:	445a      	add	r2, fp
 800f2b8:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2ba:	f89a 3000 	ldrb.w	r3, [sl]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	f000 809f 	beq.w	800f402 <_svfiprintf_r+0x1c6>
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ca:	f10a 0a01 	add.w	sl, sl, #1
 800f2ce:	9304      	str	r3, [sp, #16]
 800f2d0:	9307      	str	r3, [sp, #28]
 800f2d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f2d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800f2d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2dc:	4654      	mov	r4, sl
 800f2de:	2205      	movs	r2, #5
 800f2e0:	484f      	ldr	r0, [pc, #316]	@ (800f420 <_svfiprintf_r+0x1e4>)
 800f2e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2e6:	f000 fca9 	bl	800fc3c <memchr>
 800f2ea:	9a04      	ldr	r2, [sp, #16]
 800f2ec:	b9d8      	cbnz	r0, 800f326 <_svfiprintf_r+0xea>
 800f2ee:	06d0      	lsls	r0, r2, #27
 800f2f0:	bf44      	itt	mi
 800f2f2:	2320      	movmi	r3, #32
 800f2f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2f8:	0711      	lsls	r1, r2, #28
 800f2fa:	bf44      	itt	mi
 800f2fc:	232b      	movmi	r3, #43	@ 0x2b
 800f2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f302:	f89a 3000 	ldrb.w	r3, [sl]
 800f306:	2b2a      	cmp	r3, #42	@ 0x2a
 800f308:	d015      	beq.n	800f336 <_svfiprintf_r+0xfa>
 800f30a:	9a07      	ldr	r2, [sp, #28]
 800f30c:	4654      	mov	r4, sl
 800f30e:	2000      	movs	r0, #0
 800f310:	f04f 0c0a 	mov.w	ip, #10
 800f314:	4621      	mov	r1, r4
 800f316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f31a:	3b30      	subs	r3, #48	@ 0x30
 800f31c:	2b09      	cmp	r3, #9
 800f31e:	d94b      	bls.n	800f3b8 <_svfiprintf_r+0x17c>
 800f320:	b1b0      	cbz	r0, 800f350 <_svfiprintf_r+0x114>
 800f322:	9207      	str	r2, [sp, #28]
 800f324:	e014      	b.n	800f350 <_svfiprintf_r+0x114>
 800f326:	eba0 0308 	sub.w	r3, r0, r8
 800f32a:	46a2      	mov	sl, r4
 800f32c:	fa09 f303 	lsl.w	r3, r9, r3
 800f330:	4313      	orrs	r3, r2
 800f332:	9304      	str	r3, [sp, #16]
 800f334:	e7d2      	b.n	800f2dc <_svfiprintf_r+0xa0>
 800f336:	9b03      	ldr	r3, [sp, #12]
 800f338:	1d19      	adds	r1, r3, #4
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	9103      	str	r1, [sp, #12]
 800f340:	bfbb      	ittet	lt
 800f342:	425b      	neglt	r3, r3
 800f344:	f042 0202 	orrlt.w	r2, r2, #2
 800f348:	9307      	strge	r3, [sp, #28]
 800f34a:	9307      	strlt	r3, [sp, #28]
 800f34c:	bfb8      	it	lt
 800f34e:	9204      	strlt	r2, [sp, #16]
 800f350:	7823      	ldrb	r3, [r4, #0]
 800f352:	2b2e      	cmp	r3, #46	@ 0x2e
 800f354:	d10a      	bne.n	800f36c <_svfiprintf_r+0x130>
 800f356:	7863      	ldrb	r3, [r4, #1]
 800f358:	2b2a      	cmp	r3, #42	@ 0x2a
 800f35a:	d132      	bne.n	800f3c2 <_svfiprintf_r+0x186>
 800f35c:	9b03      	ldr	r3, [sp, #12]
 800f35e:	3402      	adds	r4, #2
 800f360:	1d1a      	adds	r2, r3, #4
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f368:	9203      	str	r2, [sp, #12]
 800f36a:	9305      	str	r3, [sp, #20]
 800f36c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f430 <_svfiprintf_r+0x1f4>
 800f370:	2203      	movs	r2, #3
 800f372:	7821      	ldrb	r1, [r4, #0]
 800f374:	4650      	mov	r0, sl
 800f376:	f000 fc61 	bl	800fc3c <memchr>
 800f37a:	b138      	cbz	r0, 800f38c <_svfiprintf_r+0x150>
 800f37c:	eba0 000a 	sub.w	r0, r0, sl
 800f380:	2240      	movs	r2, #64	@ 0x40
 800f382:	9b04      	ldr	r3, [sp, #16]
 800f384:	3401      	adds	r4, #1
 800f386:	4082      	lsls	r2, r0
 800f388:	4313      	orrs	r3, r2
 800f38a:	9304      	str	r3, [sp, #16]
 800f38c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f390:	2206      	movs	r2, #6
 800f392:	4824      	ldr	r0, [pc, #144]	@ (800f424 <_svfiprintf_r+0x1e8>)
 800f394:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f398:	f000 fc50 	bl	800fc3c <memchr>
 800f39c:	2800      	cmp	r0, #0
 800f39e:	d036      	beq.n	800f40e <_svfiprintf_r+0x1d2>
 800f3a0:	4b21      	ldr	r3, [pc, #132]	@ (800f428 <_svfiprintf_r+0x1ec>)
 800f3a2:	bb1b      	cbnz	r3, 800f3ec <_svfiprintf_r+0x1b0>
 800f3a4:	9b03      	ldr	r3, [sp, #12]
 800f3a6:	3307      	adds	r3, #7
 800f3a8:	f023 0307 	bic.w	r3, r3, #7
 800f3ac:	3308      	adds	r3, #8
 800f3ae:	9303      	str	r3, [sp, #12]
 800f3b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3b2:	4433      	add	r3, r6
 800f3b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3b6:	e76a      	b.n	800f28e <_svfiprintf_r+0x52>
 800f3b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3bc:	460c      	mov	r4, r1
 800f3be:	2001      	movs	r0, #1
 800f3c0:	e7a8      	b.n	800f314 <_svfiprintf_r+0xd8>
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	3401      	adds	r4, #1
 800f3c6:	f04f 0c0a 	mov.w	ip, #10
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	9305      	str	r3, [sp, #20]
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3d4:	3a30      	subs	r2, #48	@ 0x30
 800f3d6:	2a09      	cmp	r2, #9
 800f3d8:	d903      	bls.n	800f3e2 <_svfiprintf_r+0x1a6>
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d0c6      	beq.n	800f36c <_svfiprintf_r+0x130>
 800f3de:	9105      	str	r1, [sp, #20]
 800f3e0:	e7c4      	b.n	800f36c <_svfiprintf_r+0x130>
 800f3e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3e6:	4604      	mov	r4, r0
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	e7f0      	b.n	800f3ce <_svfiprintf_r+0x192>
 800f3ec:	ab03      	add	r3, sp, #12
 800f3ee:	462a      	mov	r2, r5
 800f3f0:	a904      	add	r1, sp, #16
 800f3f2:	4638      	mov	r0, r7
 800f3f4:	9300      	str	r3, [sp, #0]
 800f3f6:	4b0d      	ldr	r3, [pc, #52]	@ (800f42c <_svfiprintf_r+0x1f0>)
 800f3f8:	f3af 8000 	nop.w
 800f3fc:	1c42      	adds	r2, r0, #1
 800f3fe:	4606      	mov	r6, r0
 800f400:	d1d6      	bne.n	800f3b0 <_svfiprintf_r+0x174>
 800f402:	89ab      	ldrh	r3, [r5, #12]
 800f404:	065b      	lsls	r3, r3, #25
 800f406:	f53f af2d 	bmi.w	800f264 <_svfiprintf_r+0x28>
 800f40a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f40c:	e72c      	b.n	800f268 <_svfiprintf_r+0x2c>
 800f40e:	ab03      	add	r3, sp, #12
 800f410:	462a      	mov	r2, r5
 800f412:	a904      	add	r1, sp, #16
 800f414:	4638      	mov	r0, r7
 800f416:	9300      	str	r3, [sp, #0]
 800f418:	4b04      	ldr	r3, [pc, #16]	@ (800f42c <_svfiprintf_r+0x1f0>)
 800f41a:	f000 f9bf 	bl	800f79c <_printf_i>
 800f41e:	e7ed      	b.n	800f3fc <_svfiprintf_r+0x1c0>
 800f420:	080102fc 	.word	0x080102fc
 800f424:	08010306 	.word	0x08010306
 800f428:	00000000 	.word	0x00000000
 800f42c:	0800f185 	.word	0x0800f185
 800f430:	08010302 	.word	0x08010302

0800f434 <__sfputc_r>:
 800f434:	6893      	ldr	r3, [r2, #8]
 800f436:	3b01      	subs	r3, #1
 800f438:	2b00      	cmp	r3, #0
 800f43a:	6093      	str	r3, [r2, #8]
 800f43c:	b410      	push	{r4}
 800f43e:	da08      	bge.n	800f452 <__sfputc_r+0x1e>
 800f440:	6994      	ldr	r4, [r2, #24]
 800f442:	42a3      	cmp	r3, r4
 800f444:	db01      	blt.n	800f44a <__sfputc_r+0x16>
 800f446:	290a      	cmp	r1, #10
 800f448:	d103      	bne.n	800f452 <__sfputc_r+0x1e>
 800f44a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f44e:	f7ff bd08 	b.w	800ee62 <__swbuf_r>
 800f452:	6813      	ldr	r3, [r2, #0]
 800f454:	1c58      	adds	r0, r3, #1
 800f456:	6010      	str	r0, [r2, #0]
 800f458:	4608      	mov	r0, r1
 800f45a:	7019      	strb	r1, [r3, #0]
 800f45c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f460:	4770      	bx	lr

0800f462 <__sfputs_r>:
 800f462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f464:	4606      	mov	r6, r0
 800f466:	460f      	mov	r7, r1
 800f468:	4614      	mov	r4, r2
 800f46a:	18d5      	adds	r5, r2, r3
 800f46c:	42ac      	cmp	r4, r5
 800f46e:	d101      	bne.n	800f474 <__sfputs_r+0x12>
 800f470:	2000      	movs	r0, #0
 800f472:	e007      	b.n	800f484 <__sfputs_r+0x22>
 800f474:	463a      	mov	r2, r7
 800f476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f47a:	4630      	mov	r0, r6
 800f47c:	f7ff ffda 	bl	800f434 <__sfputc_r>
 800f480:	1c43      	adds	r3, r0, #1
 800f482:	d1f3      	bne.n	800f46c <__sfputs_r+0xa>
 800f484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f488 <_vfiprintf_r>:
 800f488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f48c:	460d      	mov	r5, r1
 800f48e:	b09d      	sub	sp, #116	@ 0x74
 800f490:	4614      	mov	r4, r2
 800f492:	4698      	mov	r8, r3
 800f494:	4606      	mov	r6, r0
 800f496:	b118      	cbz	r0, 800f4a0 <_vfiprintf_r+0x18>
 800f498:	6a03      	ldr	r3, [r0, #32]
 800f49a:	b90b      	cbnz	r3, 800f4a0 <_vfiprintf_r+0x18>
 800f49c:	f7ff fbc4 	bl	800ec28 <__sinit>
 800f4a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f4a2:	07d9      	lsls	r1, r3, #31
 800f4a4:	d405      	bmi.n	800f4b2 <_vfiprintf_r+0x2a>
 800f4a6:	89ab      	ldrh	r3, [r5, #12]
 800f4a8:	059a      	lsls	r2, r3, #22
 800f4aa:	d402      	bmi.n	800f4b2 <_vfiprintf_r+0x2a>
 800f4ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f4ae:	f7ff fe10 	bl	800f0d2 <__retarget_lock_acquire_recursive>
 800f4b2:	89ab      	ldrh	r3, [r5, #12]
 800f4b4:	071b      	lsls	r3, r3, #28
 800f4b6:	d501      	bpl.n	800f4bc <_vfiprintf_r+0x34>
 800f4b8:	692b      	ldr	r3, [r5, #16]
 800f4ba:	b99b      	cbnz	r3, 800f4e4 <_vfiprintf_r+0x5c>
 800f4bc:	4629      	mov	r1, r5
 800f4be:	4630      	mov	r0, r6
 800f4c0:	f7ff fd0e 	bl	800eee0 <__swsetup_r>
 800f4c4:	b170      	cbz	r0, 800f4e4 <_vfiprintf_r+0x5c>
 800f4c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f4c8:	07dc      	lsls	r4, r3, #31
 800f4ca:	d504      	bpl.n	800f4d6 <_vfiprintf_r+0x4e>
 800f4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d0:	b01d      	add	sp, #116	@ 0x74
 800f4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4d6:	89ab      	ldrh	r3, [r5, #12]
 800f4d8:	0598      	lsls	r0, r3, #22
 800f4da:	d4f7      	bmi.n	800f4cc <_vfiprintf_r+0x44>
 800f4dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f4de:	f7ff fdf9 	bl	800f0d4 <__retarget_lock_release_recursive>
 800f4e2:	e7f3      	b.n	800f4cc <_vfiprintf_r+0x44>
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4ea:	f04f 0901 	mov.w	r9, #1
 800f4ee:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800f6a4 <_vfiprintf_r+0x21c>
 800f4f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4f4:	2320      	movs	r3, #32
 800f4f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f4fa:	2330      	movs	r3, #48	@ 0x30
 800f4fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f500:	4623      	mov	r3, r4
 800f502:	469a      	mov	sl, r3
 800f504:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f508:	b10a      	cbz	r2, 800f50e <_vfiprintf_r+0x86>
 800f50a:	2a25      	cmp	r2, #37	@ 0x25
 800f50c:	d1f9      	bne.n	800f502 <_vfiprintf_r+0x7a>
 800f50e:	ebba 0b04 	subs.w	fp, sl, r4
 800f512:	d00b      	beq.n	800f52c <_vfiprintf_r+0xa4>
 800f514:	465b      	mov	r3, fp
 800f516:	4622      	mov	r2, r4
 800f518:	4629      	mov	r1, r5
 800f51a:	4630      	mov	r0, r6
 800f51c:	f7ff ffa1 	bl	800f462 <__sfputs_r>
 800f520:	3001      	adds	r0, #1
 800f522:	f000 80a7 	beq.w	800f674 <_vfiprintf_r+0x1ec>
 800f526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f528:	445a      	add	r2, fp
 800f52a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f52c:	f89a 3000 	ldrb.w	r3, [sl]
 800f530:	2b00      	cmp	r3, #0
 800f532:	f000 809f 	beq.w	800f674 <_vfiprintf_r+0x1ec>
 800f536:	2300      	movs	r3, #0
 800f538:	f04f 32ff 	mov.w	r2, #4294967295
 800f53c:	f10a 0a01 	add.w	sl, sl, #1
 800f540:	9304      	str	r3, [sp, #16]
 800f542:	9307      	str	r3, [sp, #28]
 800f544:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f548:	931a      	str	r3, [sp, #104]	@ 0x68
 800f54a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f54e:	4654      	mov	r4, sl
 800f550:	2205      	movs	r2, #5
 800f552:	4854      	ldr	r0, [pc, #336]	@ (800f6a4 <_vfiprintf_r+0x21c>)
 800f554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f558:	f000 fb70 	bl	800fc3c <memchr>
 800f55c:	9a04      	ldr	r2, [sp, #16]
 800f55e:	b9d8      	cbnz	r0, 800f598 <_vfiprintf_r+0x110>
 800f560:	06d1      	lsls	r1, r2, #27
 800f562:	bf44      	itt	mi
 800f564:	2320      	movmi	r3, #32
 800f566:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f56a:	0713      	lsls	r3, r2, #28
 800f56c:	bf44      	itt	mi
 800f56e:	232b      	movmi	r3, #43	@ 0x2b
 800f570:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f574:	f89a 3000 	ldrb.w	r3, [sl]
 800f578:	2b2a      	cmp	r3, #42	@ 0x2a
 800f57a:	d015      	beq.n	800f5a8 <_vfiprintf_r+0x120>
 800f57c:	9a07      	ldr	r2, [sp, #28]
 800f57e:	4654      	mov	r4, sl
 800f580:	2000      	movs	r0, #0
 800f582:	f04f 0c0a 	mov.w	ip, #10
 800f586:	4621      	mov	r1, r4
 800f588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f58c:	3b30      	subs	r3, #48	@ 0x30
 800f58e:	2b09      	cmp	r3, #9
 800f590:	d94b      	bls.n	800f62a <_vfiprintf_r+0x1a2>
 800f592:	b1b0      	cbz	r0, 800f5c2 <_vfiprintf_r+0x13a>
 800f594:	9207      	str	r2, [sp, #28]
 800f596:	e014      	b.n	800f5c2 <_vfiprintf_r+0x13a>
 800f598:	eba0 0308 	sub.w	r3, r0, r8
 800f59c:	46a2      	mov	sl, r4
 800f59e:	fa09 f303 	lsl.w	r3, r9, r3
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	9304      	str	r3, [sp, #16]
 800f5a6:	e7d2      	b.n	800f54e <_vfiprintf_r+0xc6>
 800f5a8:	9b03      	ldr	r3, [sp, #12]
 800f5aa:	1d19      	adds	r1, r3, #4
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	9103      	str	r1, [sp, #12]
 800f5b2:	bfbb      	ittet	lt
 800f5b4:	425b      	neglt	r3, r3
 800f5b6:	f042 0202 	orrlt.w	r2, r2, #2
 800f5ba:	9307      	strge	r3, [sp, #28]
 800f5bc:	9307      	strlt	r3, [sp, #28]
 800f5be:	bfb8      	it	lt
 800f5c0:	9204      	strlt	r2, [sp, #16]
 800f5c2:	7823      	ldrb	r3, [r4, #0]
 800f5c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f5c6:	d10a      	bne.n	800f5de <_vfiprintf_r+0x156>
 800f5c8:	7863      	ldrb	r3, [r4, #1]
 800f5ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5cc:	d132      	bne.n	800f634 <_vfiprintf_r+0x1ac>
 800f5ce:	9b03      	ldr	r3, [sp, #12]
 800f5d0:	3402      	adds	r4, #2
 800f5d2:	1d1a      	adds	r2, r3, #4
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f5da:	9203      	str	r2, [sp, #12]
 800f5dc:	9305      	str	r3, [sp, #20]
 800f5de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f6b4 <_vfiprintf_r+0x22c>
 800f5e2:	2203      	movs	r2, #3
 800f5e4:	7821      	ldrb	r1, [r4, #0]
 800f5e6:	4650      	mov	r0, sl
 800f5e8:	f000 fb28 	bl	800fc3c <memchr>
 800f5ec:	b138      	cbz	r0, 800f5fe <_vfiprintf_r+0x176>
 800f5ee:	eba0 000a 	sub.w	r0, r0, sl
 800f5f2:	2240      	movs	r2, #64	@ 0x40
 800f5f4:	9b04      	ldr	r3, [sp, #16]
 800f5f6:	3401      	adds	r4, #1
 800f5f8:	4082      	lsls	r2, r0
 800f5fa:	4313      	orrs	r3, r2
 800f5fc:	9304      	str	r3, [sp, #16]
 800f5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f602:	2206      	movs	r2, #6
 800f604:	4828      	ldr	r0, [pc, #160]	@ (800f6a8 <_vfiprintf_r+0x220>)
 800f606:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f60a:	f000 fb17 	bl	800fc3c <memchr>
 800f60e:	2800      	cmp	r0, #0
 800f610:	d03f      	beq.n	800f692 <_vfiprintf_r+0x20a>
 800f612:	4b26      	ldr	r3, [pc, #152]	@ (800f6ac <_vfiprintf_r+0x224>)
 800f614:	bb1b      	cbnz	r3, 800f65e <_vfiprintf_r+0x1d6>
 800f616:	9b03      	ldr	r3, [sp, #12]
 800f618:	3307      	adds	r3, #7
 800f61a:	f023 0307 	bic.w	r3, r3, #7
 800f61e:	3308      	adds	r3, #8
 800f620:	9303      	str	r3, [sp, #12]
 800f622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f624:	443b      	add	r3, r7
 800f626:	9309      	str	r3, [sp, #36]	@ 0x24
 800f628:	e76a      	b.n	800f500 <_vfiprintf_r+0x78>
 800f62a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f62e:	460c      	mov	r4, r1
 800f630:	2001      	movs	r0, #1
 800f632:	e7a8      	b.n	800f586 <_vfiprintf_r+0xfe>
 800f634:	2300      	movs	r3, #0
 800f636:	3401      	adds	r4, #1
 800f638:	f04f 0c0a 	mov.w	ip, #10
 800f63c:	4619      	mov	r1, r3
 800f63e:	9305      	str	r3, [sp, #20]
 800f640:	4620      	mov	r0, r4
 800f642:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f646:	3a30      	subs	r2, #48	@ 0x30
 800f648:	2a09      	cmp	r2, #9
 800f64a:	d903      	bls.n	800f654 <_vfiprintf_r+0x1cc>
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d0c6      	beq.n	800f5de <_vfiprintf_r+0x156>
 800f650:	9105      	str	r1, [sp, #20]
 800f652:	e7c4      	b.n	800f5de <_vfiprintf_r+0x156>
 800f654:	fb0c 2101 	mla	r1, ip, r1, r2
 800f658:	4604      	mov	r4, r0
 800f65a:	2301      	movs	r3, #1
 800f65c:	e7f0      	b.n	800f640 <_vfiprintf_r+0x1b8>
 800f65e:	ab03      	add	r3, sp, #12
 800f660:	462a      	mov	r2, r5
 800f662:	a904      	add	r1, sp, #16
 800f664:	4630      	mov	r0, r6
 800f666:	9300      	str	r3, [sp, #0]
 800f668:	4b11      	ldr	r3, [pc, #68]	@ (800f6b0 <_vfiprintf_r+0x228>)
 800f66a:	f3af 8000 	nop.w
 800f66e:	4607      	mov	r7, r0
 800f670:	1c78      	adds	r0, r7, #1
 800f672:	d1d6      	bne.n	800f622 <_vfiprintf_r+0x19a>
 800f674:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f676:	07d9      	lsls	r1, r3, #31
 800f678:	d405      	bmi.n	800f686 <_vfiprintf_r+0x1fe>
 800f67a:	89ab      	ldrh	r3, [r5, #12]
 800f67c:	059a      	lsls	r2, r3, #22
 800f67e:	d402      	bmi.n	800f686 <_vfiprintf_r+0x1fe>
 800f680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f682:	f7ff fd27 	bl	800f0d4 <__retarget_lock_release_recursive>
 800f686:	89ab      	ldrh	r3, [r5, #12]
 800f688:	065b      	lsls	r3, r3, #25
 800f68a:	f53f af1f 	bmi.w	800f4cc <_vfiprintf_r+0x44>
 800f68e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f690:	e71e      	b.n	800f4d0 <_vfiprintf_r+0x48>
 800f692:	ab03      	add	r3, sp, #12
 800f694:	462a      	mov	r2, r5
 800f696:	a904      	add	r1, sp, #16
 800f698:	4630      	mov	r0, r6
 800f69a:	9300      	str	r3, [sp, #0]
 800f69c:	4b04      	ldr	r3, [pc, #16]	@ (800f6b0 <_vfiprintf_r+0x228>)
 800f69e:	f000 f87d 	bl	800f79c <_printf_i>
 800f6a2:	e7e4      	b.n	800f66e <_vfiprintf_r+0x1e6>
 800f6a4:	080102fc 	.word	0x080102fc
 800f6a8:	08010306 	.word	0x08010306
 800f6ac:	00000000 	.word	0x00000000
 800f6b0:	0800f463 	.word	0x0800f463
 800f6b4:	08010302 	.word	0x08010302

0800f6b8 <_printf_common>:
 800f6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6bc:	4616      	mov	r6, r2
 800f6be:	4698      	mov	r8, r3
 800f6c0:	688a      	ldr	r2, [r1, #8]
 800f6c2:	4607      	mov	r7, r0
 800f6c4:	690b      	ldr	r3, [r1, #16]
 800f6c6:	460c      	mov	r4, r1
 800f6c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f6cc:	4293      	cmp	r3, r2
 800f6ce:	bfb8      	it	lt
 800f6d0:	4613      	movlt	r3, r2
 800f6d2:	6033      	str	r3, [r6, #0]
 800f6d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f6d8:	b10a      	cbz	r2, 800f6de <_printf_common+0x26>
 800f6da:	3301      	adds	r3, #1
 800f6dc:	6033      	str	r3, [r6, #0]
 800f6de:	6823      	ldr	r3, [r4, #0]
 800f6e0:	0699      	lsls	r1, r3, #26
 800f6e2:	bf42      	ittt	mi
 800f6e4:	6833      	ldrmi	r3, [r6, #0]
 800f6e6:	3302      	addmi	r3, #2
 800f6e8:	6033      	strmi	r3, [r6, #0]
 800f6ea:	6825      	ldr	r5, [r4, #0]
 800f6ec:	f015 0506 	ands.w	r5, r5, #6
 800f6f0:	d106      	bne.n	800f700 <_printf_common+0x48>
 800f6f2:	f104 0a19 	add.w	sl, r4, #25
 800f6f6:	68e3      	ldr	r3, [r4, #12]
 800f6f8:	6832      	ldr	r2, [r6, #0]
 800f6fa:	1a9b      	subs	r3, r3, r2
 800f6fc:	42ab      	cmp	r3, r5
 800f6fe:	dc2b      	bgt.n	800f758 <_printf_common+0xa0>
 800f700:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f704:	6822      	ldr	r2, [r4, #0]
 800f706:	3b00      	subs	r3, #0
 800f708:	bf18      	it	ne
 800f70a:	2301      	movne	r3, #1
 800f70c:	0692      	lsls	r2, r2, #26
 800f70e:	d430      	bmi.n	800f772 <_printf_common+0xba>
 800f710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f714:	4641      	mov	r1, r8
 800f716:	4638      	mov	r0, r7
 800f718:	47c8      	blx	r9
 800f71a:	3001      	adds	r0, #1
 800f71c:	d023      	beq.n	800f766 <_printf_common+0xae>
 800f71e:	6823      	ldr	r3, [r4, #0]
 800f720:	341a      	adds	r4, #26
 800f722:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800f726:	f003 0306 	and.w	r3, r3, #6
 800f72a:	2b04      	cmp	r3, #4
 800f72c:	bf0a      	itet	eq
 800f72e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800f732:	2500      	movne	r5, #0
 800f734:	6833      	ldreq	r3, [r6, #0]
 800f736:	f04f 0600 	mov.w	r6, #0
 800f73a:	bf08      	it	eq
 800f73c:	1aed      	subeq	r5, r5, r3
 800f73e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f742:	bf08      	it	eq
 800f744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f748:	4293      	cmp	r3, r2
 800f74a:	bfc4      	itt	gt
 800f74c:	1a9b      	subgt	r3, r3, r2
 800f74e:	18ed      	addgt	r5, r5, r3
 800f750:	42b5      	cmp	r5, r6
 800f752:	d11a      	bne.n	800f78a <_printf_common+0xd2>
 800f754:	2000      	movs	r0, #0
 800f756:	e008      	b.n	800f76a <_printf_common+0xb2>
 800f758:	2301      	movs	r3, #1
 800f75a:	4652      	mov	r2, sl
 800f75c:	4641      	mov	r1, r8
 800f75e:	4638      	mov	r0, r7
 800f760:	47c8      	blx	r9
 800f762:	3001      	adds	r0, #1
 800f764:	d103      	bne.n	800f76e <_printf_common+0xb6>
 800f766:	f04f 30ff 	mov.w	r0, #4294967295
 800f76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f76e:	3501      	adds	r5, #1
 800f770:	e7c1      	b.n	800f6f6 <_printf_common+0x3e>
 800f772:	18e1      	adds	r1, r4, r3
 800f774:	1c5a      	adds	r2, r3, #1
 800f776:	2030      	movs	r0, #48	@ 0x30
 800f778:	3302      	adds	r3, #2
 800f77a:	4422      	add	r2, r4
 800f77c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f788:	e7c2      	b.n	800f710 <_printf_common+0x58>
 800f78a:	2301      	movs	r3, #1
 800f78c:	4622      	mov	r2, r4
 800f78e:	4641      	mov	r1, r8
 800f790:	4638      	mov	r0, r7
 800f792:	47c8      	blx	r9
 800f794:	3001      	adds	r0, #1
 800f796:	d0e6      	beq.n	800f766 <_printf_common+0xae>
 800f798:	3601      	adds	r6, #1
 800f79a:	e7d9      	b.n	800f750 <_printf_common+0x98>

0800f79c <_printf_i>:
 800f79c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7a0:	7e0f      	ldrb	r7, [r1, #24]
 800f7a2:	4691      	mov	r9, r2
 800f7a4:	4680      	mov	r8, r0
 800f7a6:	460c      	mov	r4, r1
 800f7a8:	2f78      	cmp	r7, #120	@ 0x78
 800f7aa:	469a      	mov	sl, r3
 800f7ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f7ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f7b2:	d807      	bhi.n	800f7c4 <_printf_i+0x28>
 800f7b4:	2f62      	cmp	r7, #98	@ 0x62
 800f7b6:	d80a      	bhi.n	800f7ce <_printf_i+0x32>
 800f7b8:	2f00      	cmp	r7, #0
 800f7ba:	f000 80d2 	beq.w	800f962 <_printf_i+0x1c6>
 800f7be:	2f58      	cmp	r7, #88	@ 0x58
 800f7c0:	f000 80b9 	beq.w	800f936 <_printf_i+0x19a>
 800f7c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f7c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f7cc:	e03a      	b.n	800f844 <_printf_i+0xa8>
 800f7ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f7d2:	2b15      	cmp	r3, #21
 800f7d4:	d8f6      	bhi.n	800f7c4 <_printf_i+0x28>
 800f7d6:	a101      	add	r1, pc, #4	@ (adr r1, 800f7dc <_printf_i+0x40>)
 800f7d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f7dc:	0800f835 	.word	0x0800f835
 800f7e0:	0800f849 	.word	0x0800f849
 800f7e4:	0800f7c5 	.word	0x0800f7c5
 800f7e8:	0800f7c5 	.word	0x0800f7c5
 800f7ec:	0800f7c5 	.word	0x0800f7c5
 800f7f0:	0800f7c5 	.word	0x0800f7c5
 800f7f4:	0800f849 	.word	0x0800f849
 800f7f8:	0800f7c5 	.word	0x0800f7c5
 800f7fc:	0800f7c5 	.word	0x0800f7c5
 800f800:	0800f7c5 	.word	0x0800f7c5
 800f804:	0800f7c5 	.word	0x0800f7c5
 800f808:	0800f949 	.word	0x0800f949
 800f80c:	0800f873 	.word	0x0800f873
 800f810:	0800f903 	.word	0x0800f903
 800f814:	0800f7c5 	.word	0x0800f7c5
 800f818:	0800f7c5 	.word	0x0800f7c5
 800f81c:	0800f96b 	.word	0x0800f96b
 800f820:	0800f7c5 	.word	0x0800f7c5
 800f824:	0800f873 	.word	0x0800f873
 800f828:	0800f7c5 	.word	0x0800f7c5
 800f82c:	0800f7c5 	.word	0x0800f7c5
 800f830:	0800f90b 	.word	0x0800f90b
 800f834:	6833      	ldr	r3, [r6, #0]
 800f836:	1d1a      	adds	r2, r3, #4
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	6032      	str	r2, [r6, #0]
 800f83c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f840:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f844:	2301      	movs	r3, #1
 800f846:	e09d      	b.n	800f984 <_printf_i+0x1e8>
 800f848:	6833      	ldr	r3, [r6, #0]
 800f84a:	6820      	ldr	r0, [r4, #0]
 800f84c:	1d19      	adds	r1, r3, #4
 800f84e:	6031      	str	r1, [r6, #0]
 800f850:	0606      	lsls	r6, r0, #24
 800f852:	d501      	bpl.n	800f858 <_printf_i+0xbc>
 800f854:	681d      	ldr	r5, [r3, #0]
 800f856:	e003      	b.n	800f860 <_printf_i+0xc4>
 800f858:	0645      	lsls	r5, r0, #25
 800f85a:	d5fb      	bpl.n	800f854 <_printf_i+0xb8>
 800f85c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f860:	2d00      	cmp	r5, #0
 800f862:	da03      	bge.n	800f86c <_printf_i+0xd0>
 800f864:	232d      	movs	r3, #45	@ 0x2d
 800f866:	426d      	negs	r5, r5
 800f868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f86c:	4859      	ldr	r0, [pc, #356]	@ (800f9d4 <_printf_i+0x238>)
 800f86e:	230a      	movs	r3, #10
 800f870:	e011      	b.n	800f896 <_printf_i+0xfa>
 800f872:	6821      	ldr	r1, [r4, #0]
 800f874:	6833      	ldr	r3, [r6, #0]
 800f876:	0608      	lsls	r0, r1, #24
 800f878:	f853 5b04 	ldr.w	r5, [r3], #4
 800f87c:	d402      	bmi.n	800f884 <_printf_i+0xe8>
 800f87e:	0649      	lsls	r1, r1, #25
 800f880:	bf48      	it	mi
 800f882:	b2ad      	uxthmi	r5, r5
 800f884:	2f6f      	cmp	r7, #111	@ 0x6f
 800f886:	6033      	str	r3, [r6, #0]
 800f888:	4852      	ldr	r0, [pc, #328]	@ (800f9d4 <_printf_i+0x238>)
 800f88a:	bf14      	ite	ne
 800f88c:	230a      	movne	r3, #10
 800f88e:	2308      	moveq	r3, #8
 800f890:	2100      	movs	r1, #0
 800f892:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f896:	6866      	ldr	r6, [r4, #4]
 800f898:	2e00      	cmp	r6, #0
 800f89a:	60a6      	str	r6, [r4, #8]
 800f89c:	bfa2      	ittt	ge
 800f89e:	6821      	ldrge	r1, [r4, #0]
 800f8a0:	f021 0104 	bicge.w	r1, r1, #4
 800f8a4:	6021      	strge	r1, [r4, #0]
 800f8a6:	b90d      	cbnz	r5, 800f8ac <_printf_i+0x110>
 800f8a8:	2e00      	cmp	r6, #0
 800f8aa:	d04b      	beq.n	800f944 <_printf_i+0x1a8>
 800f8ac:	4616      	mov	r6, r2
 800f8ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800f8b2:	fb03 5711 	mls	r7, r3, r1, r5
 800f8b6:	5dc7      	ldrb	r7, [r0, r7]
 800f8b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f8bc:	462f      	mov	r7, r5
 800f8be:	460d      	mov	r5, r1
 800f8c0:	42bb      	cmp	r3, r7
 800f8c2:	d9f4      	bls.n	800f8ae <_printf_i+0x112>
 800f8c4:	2b08      	cmp	r3, #8
 800f8c6:	d10b      	bne.n	800f8e0 <_printf_i+0x144>
 800f8c8:	6823      	ldr	r3, [r4, #0]
 800f8ca:	07df      	lsls	r7, r3, #31
 800f8cc:	d508      	bpl.n	800f8e0 <_printf_i+0x144>
 800f8ce:	6923      	ldr	r3, [r4, #16]
 800f8d0:	6861      	ldr	r1, [r4, #4]
 800f8d2:	4299      	cmp	r1, r3
 800f8d4:	bfde      	ittt	le
 800f8d6:	2330      	movle	r3, #48	@ 0x30
 800f8d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f8dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f8e0:	1b92      	subs	r2, r2, r6
 800f8e2:	6122      	str	r2, [r4, #16]
 800f8e4:	464b      	mov	r3, r9
 800f8e6:	aa03      	add	r2, sp, #12
 800f8e8:	4621      	mov	r1, r4
 800f8ea:	4640      	mov	r0, r8
 800f8ec:	f8cd a000 	str.w	sl, [sp]
 800f8f0:	f7ff fee2 	bl	800f6b8 <_printf_common>
 800f8f4:	3001      	adds	r0, #1
 800f8f6:	d14a      	bne.n	800f98e <_printf_i+0x1f2>
 800f8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8fc:	b004      	add	sp, #16
 800f8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f902:	6823      	ldr	r3, [r4, #0]
 800f904:	f043 0320 	orr.w	r3, r3, #32
 800f908:	6023      	str	r3, [r4, #0]
 800f90a:	2778      	movs	r7, #120	@ 0x78
 800f90c:	4832      	ldr	r0, [pc, #200]	@ (800f9d8 <_printf_i+0x23c>)
 800f90e:	6823      	ldr	r3, [r4, #0]
 800f910:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f914:	061f      	lsls	r7, r3, #24
 800f916:	6831      	ldr	r1, [r6, #0]
 800f918:	f851 5b04 	ldr.w	r5, [r1], #4
 800f91c:	d402      	bmi.n	800f924 <_printf_i+0x188>
 800f91e:	065f      	lsls	r7, r3, #25
 800f920:	bf48      	it	mi
 800f922:	b2ad      	uxthmi	r5, r5
 800f924:	6031      	str	r1, [r6, #0]
 800f926:	07d9      	lsls	r1, r3, #31
 800f928:	bf44      	itt	mi
 800f92a:	f043 0320 	orrmi.w	r3, r3, #32
 800f92e:	6023      	strmi	r3, [r4, #0]
 800f930:	b11d      	cbz	r5, 800f93a <_printf_i+0x19e>
 800f932:	2310      	movs	r3, #16
 800f934:	e7ac      	b.n	800f890 <_printf_i+0xf4>
 800f936:	4827      	ldr	r0, [pc, #156]	@ (800f9d4 <_printf_i+0x238>)
 800f938:	e7e9      	b.n	800f90e <_printf_i+0x172>
 800f93a:	6823      	ldr	r3, [r4, #0]
 800f93c:	f023 0320 	bic.w	r3, r3, #32
 800f940:	6023      	str	r3, [r4, #0]
 800f942:	e7f6      	b.n	800f932 <_printf_i+0x196>
 800f944:	4616      	mov	r6, r2
 800f946:	e7bd      	b.n	800f8c4 <_printf_i+0x128>
 800f948:	6833      	ldr	r3, [r6, #0]
 800f94a:	6825      	ldr	r5, [r4, #0]
 800f94c:	1d18      	adds	r0, r3, #4
 800f94e:	6961      	ldr	r1, [r4, #20]
 800f950:	6030      	str	r0, [r6, #0]
 800f952:	062e      	lsls	r6, r5, #24
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	d501      	bpl.n	800f95c <_printf_i+0x1c0>
 800f958:	6019      	str	r1, [r3, #0]
 800f95a:	e002      	b.n	800f962 <_printf_i+0x1c6>
 800f95c:	0668      	lsls	r0, r5, #25
 800f95e:	d5fb      	bpl.n	800f958 <_printf_i+0x1bc>
 800f960:	8019      	strh	r1, [r3, #0]
 800f962:	2300      	movs	r3, #0
 800f964:	4616      	mov	r6, r2
 800f966:	6123      	str	r3, [r4, #16]
 800f968:	e7bc      	b.n	800f8e4 <_printf_i+0x148>
 800f96a:	6833      	ldr	r3, [r6, #0]
 800f96c:	2100      	movs	r1, #0
 800f96e:	1d1a      	adds	r2, r3, #4
 800f970:	6032      	str	r2, [r6, #0]
 800f972:	681e      	ldr	r6, [r3, #0]
 800f974:	6862      	ldr	r2, [r4, #4]
 800f976:	4630      	mov	r0, r6
 800f978:	f000 f960 	bl	800fc3c <memchr>
 800f97c:	b108      	cbz	r0, 800f982 <_printf_i+0x1e6>
 800f97e:	1b80      	subs	r0, r0, r6
 800f980:	6060      	str	r0, [r4, #4]
 800f982:	6863      	ldr	r3, [r4, #4]
 800f984:	6123      	str	r3, [r4, #16]
 800f986:	2300      	movs	r3, #0
 800f988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f98c:	e7aa      	b.n	800f8e4 <_printf_i+0x148>
 800f98e:	6923      	ldr	r3, [r4, #16]
 800f990:	4632      	mov	r2, r6
 800f992:	4649      	mov	r1, r9
 800f994:	4640      	mov	r0, r8
 800f996:	47d0      	blx	sl
 800f998:	3001      	adds	r0, #1
 800f99a:	d0ad      	beq.n	800f8f8 <_printf_i+0x15c>
 800f99c:	6823      	ldr	r3, [r4, #0]
 800f99e:	079b      	lsls	r3, r3, #30
 800f9a0:	d413      	bmi.n	800f9ca <_printf_i+0x22e>
 800f9a2:	68e0      	ldr	r0, [r4, #12]
 800f9a4:	9b03      	ldr	r3, [sp, #12]
 800f9a6:	4298      	cmp	r0, r3
 800f9a8:	bfb8      	it	lt
 800f9aa:	4618      	movlt	r0, r3
 800f9ac:	e7a6      	b.n	800f8fc <_printf_i+0x160>
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	4632      	mov	r2, r6
 800f9b2:	4649      	mov	r1, r9
 800f9b4:	4640      	mov	r0, r8
 800f9b6:	47d0      	blx	sl
 800f9b8:	3001      	adds	r0, #1
 800f9ba:	d09d      	beq.n	800f8f8 <_printf_i+0x15c>
 800f9bc:	3501      	adds	r5, #1
 800f9be:	68e3      	ldr	r3, [r4, #12]
 800f9c0:	9903      	ldr	r1, [sp, #12]
 800f9c2:	1a5b      	subs	r3, r3, r1
 800f9c4:	42ab      	cmp	r3, r5
 800f9c6:	dcf2      	bgt.n	800f9ae <_printf_i+0x212>
 800f9c8:	e7eb      	b.n	800f9a2 <_printf_i+0x206>
 800f9ca:	2500      	movs	r5, #0
 800f9cc:	f104 0619 	add.w	r6, r4, #25
 800f9d0:	e7f5      	b.n	800f9be <_printf_i+0x222>
 800f9d2:	bf00      	nop
 800f9d4:	0801030d 	.word	0x0801030d
 800f9d8:	0801031e 	.word	0x0801031e

0800f9dc <__sflush_r>:
 800f9dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9e4:	0716      	lsls	r6, r2, #28
 800f9e6:	4605      	mov	r5, r0
 800f9e8:	460c      	mov	r4, r1
 800f9ea:	d454      	bmi.n	800fa96 <__sflush_r+0xba>
 800f9ec:	684b      	ldr	r3, [r1, #4]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	dc02      	bgt.n	800f9f8 <__sflush_r+0x1c>
 800f9f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	dd48      	ble.n	800fa8a <__sflush_r+0xae>
 800f9f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f9fa:	2e00      	cmp	r6, #0
 800f9fc:	d045      	beq.n	800fa8a <__sflush_r+0xae>
 800f9fe:	2300      	movs	r3, #0
 800fa00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fa04:	682f      	ldr	r7, [r5, #0]
 800fa06:	6a21      	ldr	r1, [r4, #32]
 800fa08:	602b      	str	r3, [r5, #0]
 800fa0a:	d030      	beq.n	800fa6e <__sflush_r+0x92>
 800fa0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fa0e:	89a3      	ldrh	r3, [r4, #12]
 800fa10:	0759      	lsls	r1, r3, #29
 800fa12:	d505      	bpl.n	800fa20 <__sflush_r+0x44>
 800fa14:	6863      	ldr	r3, [r4, #4]
 800fa16:	1ad2      	subs	r2, r2, r3
 800fa18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fa1a:	b10b      	cbz	r3, 800fa20 <__sflush_r+0x44>
 800fa1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fa1e:	1ad2      	subs	r2, r2, r3
 800fa20:	2300      	movs	r3, #0
 800fa22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fa24:	6a21      	ldr	r1, [r4, #32]
 800fa26:	4628      	mov	r0, r5
 800fa28:	47b0      	blx	r6
 800fa2a:	1c43      	adds	r3, r0, #1
 800fa2c:	89a3      	ldrh	r3, [r4, #12]
 800fa2e:	d106      	bne.n	800fa3e <__sflush_r+0x62>
 800fa30:	6829      	ldr	r1, [r5, #0]
 800fa32:	291d      	cmp	r1, #29
 800fa34:	d82b      	bhi.n	800fa8e <__sflush_r+0xb2>
 800fa36:	4a2a      	ldr	r2, [pc, #168]	@ (800fae0 <__sflush_r+0x104>)
 800fa38:	410a      	asrs	r2, r1
 800fa3a:	07d6      	lsls	r6, r2, #31
 800fa3c:	d427      	bmi.n	800fa8e <__sflush_r+0xb2>
 800fa3e:	2200      	movs	r2, #0
 800fa40:	04d9      	lsls	r1, r3, #19
 800fa42:	6062      	str	r2, [r4, #4]
 800fa44:	6922      	ldr	r2, [r4, #16]
 800fa46:	6022      	str	r2, [r4, #0]
 800fa48:	d504      	bpl.n	800fa54 <__sflush_r+0x78>
 800fa4a:	1c42      	adds	r2, r0, #1
 800fa4c:	d101      	bne.n	800fa52 <__sflush_r+0x76>
 800fa4e:	682b      	ldr	r3, [r5, #0]
 800fa50:	b903      	cbnz	r3, 800fa54 <__sflush_r+0x78>
 800fa52:	6560      	str	r0, [r4, #84]	@ 0x54
 800fa54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa56:	602f      	str	r7, [r5, #0]
 800fa58:	b1b9      	cbz	r1, 800fa8a <__sflush_r+0xae>
 800fa5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa5e:	4299      	cmp	r1, r3
 800fa60:	d002      	beq.n	800fa68 <__sflush_r+0x8c>
 800fa62:	4628      	mov	r0, r5
 800fa64:	f7ff fb44 	bl	800f0f0 <_free_r>
 800fa68:	2300      	movs	r3, #0
 800fa6a:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa6c:	e00d      	b.n	800fa8a <__sflush_r+0xae>
 800fa6e:	2301      	movs	r3, #1
 800fa70:	4628      	mov	r0, r5
 800fa72:	47b0      	blx	r6
 800fa74:	4602      	mov	r2, r0
 800fa76:	1c50      	adds	r0, r2, #1
 800fa78:	d1c9      	bne.n	800fa0e <__sflush_r+0x32>
 800fa7a:	682b      	ldr	r3, [r5, #0]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d0c6      	beq.n	800fa0e <__sflush_r+0x32>
 800fa80:	2b1d      	cmp	r3, #29
 800fa82:	d001      	beq.n	800fa88 <__sflush_r+0xac>
 800fa84:	2b16      	cmp	r3, #22
 800fa86:	d11d      	bne.n	800fac4 <__sflush_r+0xe8>
 800fa88:	602f      	str	r7, [r5, #0]
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	e021      	b.n	800fad2 <__sflush_r+0xf6>
 800fa8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa92:	b21b      	sxth	r3, r3
 800fa94:	e01a      	b.n	800facc <__sflush_r+0xf0>
 800fa96:	690f      	ldr	r7, [r1, #16]
 800fa98:	2f00      	cmp	r7, #0
 800fa9a:	d0f6      	beq.n	800fa8a <__sflush_r+0xae>
 800fa9c:	0793      	lsls	r3, r2, #30
 800fa9e:	680e      	ldr	r6, [r1, #0]
 800faa0:	600f      	str	r7, [r1, #0]
 800faa2:	bf0c      	ite	eq
 800faa4:	694b      	ldreq	r3, [r1, #20]
 800faa6:	2300      	movne	r3, #0
 800faa8:	eba6 0807 	sub.w	r8, r6, r7
 800faac:	608b      	str	r3, [r1, #8]
 800faae:	f1b8 0f00 	cmp.w	r8, #0
 800fab2:	ddea      	ble.n	800fa8a <__sflush_r+0xae>
 800fab4:	4643      	mov	r3, r8
 800fab6:	463a      	mov	r2, r7
 800fab8:	6a21      	ldr	r1, [r4, #32]
 800faba:	4628      	mov	r0, r5
 800fabc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fabe:	47b0      	blx	r6
 800fac0:	2800      	cmp	r0, #0
 800fac2:	dc08      	bgt.n	800fad6 <__sflush_r+0xfa>
 800fac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800facc:	f04f 30ff 	mov.w	r0, #4294967295
 800fad0:	81a3      	strh	r3, [r4, #12]
 800fad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fad6:	4407      	add	r7, r0
 800fad8:	eba8 0800 	sub.w	r8, r8, r0
 800fadc:	e7e7      	b.n	800faae <__sflush_r+0xd2>
 800fade:	bf00      	nop
 800fae0:	dfbffffe 	.word	0xdfbffffe

0800fae4 <_fflush_r>:
 800fae4:	b538      	push	{r3, r4, r5, lr}
 800fae6:	690b      	ldr	r3, [r1, #16]
 800fae8:	4605      	mov	r5, r0
 800faea:	460c      	mov	r4, r1
 800faec:	b913      	cbnz	r3, 800faf4 <_fflush_r+0x10>
 800faee:	2500      	movs	r5, #0
 800faf0:	4628      	mov	r0, r5
 800faf2:	bd38      	pop	{r3, r4, r5, pc}
 800faf4:	b118      	cbz	r0, 800fafe <_fflush_r+0x1a>
 800faf6:	6a03      	ldr	r3, [r0, #32]
 800faf8:	b90b      	cbnz	r3, 800fafe <_fflush_r+0x1a>
 800fafa:	f7ff f895 	bl	800ec28 <__sinit>
 800fafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d0f3      	beq.n	800faee <_fflush_r+0xa>
 800fb06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fb08:	07d0      	lsls	r0, r2, #31
 800fb0a:	d404      	bmi.n	800fb16 <_fflush_r+0x32>
 800fb0c:	0599      	lsls	r1, r3, #22
 800fb0e:	d402      	bmi.n	800fb16 <_fflush_r+0x32>
 800fb10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fb12:	f7ff fade 	bl	800f0d2 <__retarget_lock_acquire_recursive>
 800fb16:	4628      	mov	r0, r5
 800fb18:	4621      	mov	r1, r4
 800fb1a:	f7ff ff5f 	bl	800f9dc <__sflush_r>
 800fb1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fb20:	4605      	mov	r5, r0
 800fb22:	07da      	lsls	r2, r3, #31
 800fb24:	d4e4      	bmi.n	800faf0 <_fflush_r+0xc>
 800fb26:	89a3      	ldrh	r3, [r4, #12]
 800fb28:	059b      	lsls	r3, r3, #22
 800fb2a:	d4e1      	bmi.n	800faf0 <_fflush_r+0xc>
 800fb2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fb2e:	f7ff fad1 	bl	800f0d4 <__retarget_lock_release_recursive>
 800fb32:	e7dd      	b.n	800faf0 <_fflush_r+0xc>

0800fb34 <__swhatbuf_r>:
 800fb34:	b570      	push	{r4, r5, r6, lr}
 800fb36:	460c      	mov	r4, r1
 800fb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb3c:	b096      	sub	sp, #88	@ 0x58
 800fb3e:	4615      	mov	r5, r2
 800fb40:	2900      	cmp	r1, #0
 800fb42:	461e      	mov	r6, r3
 800fb44:	da0c      	bge.n	800fb60 <__swhatbuf_r+0x2c>
 800fb46:	89a3      	ldrh	r3, [r4, #12]
 800fb48:	2100      	movs	r1, #0
 800fb4a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fb4e:	bf14      	ite	ne
 800fb50:	2340      	movne	r3, #64	@ 0x40
 800fb52:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb56:	2000      	movs	r0, #0
 800fb58:	6031      	str	r1, [r6, #0]
 800fb5a:	602b      	str	r3, [r5, #0]
 800fb5c:	b016      	add	sp, #88	@ 0x58
 800fb5e:	bd70      	pop	{r4, r5, r6, pc}
 800fb60:	466a      	mov	r2, sp
 800fb62:	f000 f849 	bl	800fbf8 <_fstat_r>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	dbed      	blt.n	800fb46 <__swhatbuf_r+0x12>
 800fb6a:	9901      	ldr	r1, [sp, #4]
 800fb6c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb70:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb74:	4259      	negs	r1, r3
 800fb76:	4159      	adcs	r1, r3
 800fb78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb7c:	e7eb      	b.n	800fb56 <__swhatbuf_r+0x22>

0800fb7e <__smakebuf_r>:
 800fb7e:	898b      	ldrh	r3, [r1, #12]
 800fb80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb82:	079d      	lsls	r5, r3, #30
 800fb84:	4606      	mov	r6, r0
 800fb86:	460c      	mov	r4, r1
 800fb88:	d507      	bpl.n	800fb9a <__smakebuf_r+0x1c>
 800fb8a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fb8e:	6023      	str	r3, [r4, #0]
 800fb90:	6123      	str	r3, [r4, #16]
 800fb92:	2301      	movs	r3, #1
 800fb94:	6163      	str	r3, [r4, #20]
 800fb96:	b003      	add	sp, #12
 800fb98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb9a:	ab01      	add	r3, sp, #4
 800fb9c:	466a      	mov	r2, sp
 800fb9e:	f7ff ffc9 	bl	800fb34 <__swhatbuf_r>
 800fba2:	9f00      	ldr	r7, [sp, #0]
 800fba4:	4605      	mov	r5, r0
 800fba6:	4630      	mov	r0, r6
 800fba8:	4639      	mov	r1, r7
 800fbaa:	f7fe ff25 	bl	800e9f8 <_malloc_r>
 800fbae:	b948      	cbnz	r0, 800fbc4 <__smakebuf_r+0x46>
 800fbb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbb4:	059a      	lsls	r2, r3, #22
 800fbb6:	d4ee      	bmi.n	800fb96 <__smakebuf_r+0x18>
 800fbb8:	f023 0303 	bic.w	r3, r3, #3
 800fbbc:	f043 0302 	orr.w	r3, r3, #2
 800fbc0:	81a3      	strh	r3, [r4, #12]
 800fbc2:	e7e2      	b.n	800fb8a <__smakebuf_r+0xc>
 800fbc4:	89a3      	ldrh	r3, [r4, #12]
 800fbc6:	6020      	str	r0, [r4, #0]
 800fbc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbcc:	81a3      	strh	r3, [r4, #12]
 800fbce:	9b01      	ldr	r3, [sp, #4]
 800fbd0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fbd4:	b15b      	cbz	r3, 800fbee <__smakebuf_r+0x70>
 800fbd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbda:	4630      	mov	r0, r6
 800fbdc:	f000 f81e 	bl	800fc1c <_isatty_r>
 800fbe0:	b128      	cbz	r0, 800fbee <__smakebuf_r+0x70>
 800fbe2:	89a3      	ldrh	r3, [r4, #12]
 800fbe4:	f023 0303 	bic.w	r3, r3, #3
 800fbe8:	f043 0301 	orr.w	r3, r3, #1
 800fbec:	81a3      	strh	r3, [r4, #12]
 800fbee:	89a3      	ldrh	r3, [r4, #12]
 800fbf0:	431d      	orrs	r5, r3
 800fbf2:	81a5      	strh	r5, [r4, #12]
 800fbf4:	e7cf      	b.n	800fb96 <__smakebuf_r+0x18>
	...

0800fbf8 <_fstat_r>:
 800fbf8:	b538      	push	{r3, r4, r5, lr}
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	4d06      	ldr	r5, [pc, #24]	@ (800fc18 <_fstat_r+0x20>)
 800fbfe:	4604      	mov	r4, r0
 800fc00:	4608      	mov	r0, r1
 800fc02:	4611      	mov	r1, r2
 800fc04:	602b      	str	r3, [r5, #0]
 800fc06:	f7f1 fb02 	bl	800120e <_fstat>
 800fc0a:	1c43      	adds	r3, r0, #1
 800fc0c:	d102      	bne.n	800fc14 <_fstat_r+0x1c>
 800fc0e:	682b      	ldr	r3, [r5, #0]
 800fc10:	b103      	cbz	r3, 800fc14 <_fstat_r+0x1c>
 800fc12:	6023      	str	r3, [r4, #0]
 800fc14:	bd38      	pop	{r3, r4, r5, pc}
 800fc16:	bf00      	nop
 800fc18:	20000740 	.word	0x20000740

0800fc1c <_isatty_r>:
 800fc1c:	b538      	push	{r3, r4, r5, lr}
 800fc1e:	2300      	movs	r3, #0
 800fc20:	4d05      	ldr	r5, [pc, #20]	@ (800fc38 <_isatty_r+0x1c>)
 800fc22:	4604      	mov	r4, r0
 800fc24:	4608      	mov	r0, r1
 800fc26:	602b      	str	r3, [r5, #0]
 800fc28:	f7f1 fb01 	bl	800122e <_isatty>
 800fc2c:	1c43      	adds	r3, r0, #1
 800fc2e:	d102      	bne.n	800fc36 <_isatty_r+0x1a>
 800fc30:	682b      	ldr	r3, [r5, #0]
 800fc32:	b103      	cbz	r3, 800fc36 <_isatty_r+0x1a>
 800fc34:	6023      	str	r3, [r4, #0]
 800fc36:	bd38      	pop	{r3, r4, r5, pc}
 800fc38:	20000740 	.word	0x20000740

0800fc3c <memchr>:
 800fc3c:	b2c9      	uxtb	r1, r1
 800fc3e:	4603      	mov	r3, r0
 800fc40:	4402      	add	r2, r0
 800fc42:	b510      	push	{r4, lr}
 800fc44:	4293      	cmp	r3, r2
 800fc46:	4618      	mov	r0, r3
 800fc48:	d101      	bne.n	800fc4e <memchr+0x12>
 800fc4a:	2000      	movs	r0, #0
 800fc4c:	e003      	b.n	800fc56 <memchr+0x1a>
 800fc4e:	7804      	ldrb	r4, [r0, #0]
 800fc50:	3301      	adds	r3, #1
 800fc52:	428c      	cmp	r4, r1
 800fc54:	d1f6      	bne.n	800fc44 <memchr+0x8>
 800fc56:	bd10      	pop	{r4, pc}

0800fc58 <_realloc_r>:
 800fc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc5c:	4680      	mov	r8, r0
 800fc5e:	4615      	mov	r5, r2
 800fc60:	460c      	mov	r4, r1
 800fc62:	b921      	cbnz	r1, 800fc6e <_realloc_r+0x16>
 800fc64:	4611      	mov	r1, r2
 800fc66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc6a:	f7fe bec5 	b.w	800e9f8 <_malloc_r>
 800fc6e:	b92a      	cbnz	r2, 800fc7c <_realloc_r+0x24>
 800fc70:	f7ff fa3e 	bl	800f0f0 <_free_r>
 800fc74:	2400      	movs	r4, #0
 800fc76:	4620      	mov	r0, r4
 800fc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc7c:	f000 f81a 	bl	800fcb4 <_malloc_usable_size_r>
 800fc80:	4285      	cmp	r5, r0
 800fc82:	4606      	mov	r6, r0
 800fc84:	d802      	bhi.n	800fc8c <_realloc_r+0x34>
 800fc86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fc8a:	d8f4      	bhi.n	800fc76 <_realloc_r+0x1e>
 800fc8c:	4629      	mov	r1, r5
 800fc8e:	4640      	mov	r0, r8
 800fc90:	f7fe feb2 	bl	800e9f8 <_malloc_r>
 800fc94:	4607      	mov	r7, r0
 800fc96:	2800      	cmp	r0, #0
 800fc98:	d0ec      	beq.n	800fc74 <_realloc_r+0x1c>
 800fc9a:	42b5      	cmp	r5, r6
 800fc9c:	462a      	mov	r2, r5
 800fc9e:	4621      	mov	r1, r4
 800fca0:	bf28      	it	cs
 800fca2:	4632      	movcs	r2, r6
 800fca4:	f7ff fa17 	bl	800f0d6 <memcpy>
 800fca8:	4621      	mov	r1, r4
 800fcaa:	4640      	mov	r0, r8
 800fcac:	463c      	mov	r4, r7
 800fcae:	f7ff fa1f 	bl	800f0f0 <_free_r>
 800fcb2:	e7e0      	b.n	800fc76 <_realloc_r+0x1e>

0800fcb4 <_malloc_usable_size_r>:
 800fcb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcb8:	1f18      	subs	r0, r3, #4
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	bfbc      	itt	lt
 800fcbe:	580b      	ldrlt	r3, [r1, r0]
 800fcc0:	18c0      	addlt	r0, r0, r3
 800fcc2:	4770      	bx	lr

0800fcc4 <_init>:
 800fcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcc6:	bf00      	nop
 800fcc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcca:	bc08      	pop	{r3}
 800fccc:	469e      	mov	lr, r3
 800fcce:	4770      	bx	lr

0800fcd0 <_fini>:
 800fcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcd2:	bf00      	nop
 800fcd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcd6:	bc08      	pop	{r3}
 800fcd8:	469e      	mov	lr, r3
 800fcda:	4770      	bx	lr
